const express = require("express");
const multer = require("multer");
const router = express.Router();
const createConnection = require("../config/databaseAsync");
const createPoolConnection = require("../config/databasePool");
const XLSX = require("xlsx");
const fs = require("fs");
const path = require("path");

const getImportTKBSite = async (req, res) => {
  res.render("importTKB.ejs");
};

const getTKBChinhThucSite = async (req, res) => {
  res.render("TKBChinhThuc.ejs");
};

// render b·∫£ng
const getDataTKBChinhThuc = async (req, res) => {
  const { Khoa, Dot, Ki, Nam } = req.body;

  const semester = `${Dot}, ${Ki}, ${Nam}`;

  let connection;
  try {
    connection = await createPoolConnection(); // L·∫•y k·∫øt n·ªëi t·ª´ pool

    let query;
    const queryParams = [];

    // X√¢y d·ª±ng truy v·∫•n d·ª±a v√†o gi√° tr·ªã c·ªßa Khoa
    if (Khoa !== "ALL") {
      query = `SELECT 
              id, 
              course_id, 
              course_name, 
              major, 
              lecturer, 
              start_date, 
              end_date, 
              ll_code, 
              ll_total, 
              student_quantity, 
              student_bonus, 
              bonus_time, 
              qc, 
              semester 
          FROM course_schedule_details 
          WHERE major = ? AND semester = ?;
`;
      queryParams.push(Khoa, semester);
    } else {
      query = `SELECT 
              id, 
              course_id, 
              course_name, 
              major, 
              lecturer, 
              start_date, 
              end_date, 
              ll_code, 
              ll_total, 
              student_quantity, 
              student_bonus, 
              bonus_time, 
              qc, 
              semester 
          FROM course_schedule_details 
          WHERE semester = ?;
`;
      queryParams.push(semester);
    }

    // Th·ª±c hi·ªán truy v·∫•n
    const [results] = await connection.execute(query, queryParams);

    // Tr·∫£ v·ªÅ k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng JSON
    res.json(results); // results ch·ª©a d·ªØ li·ªáu tr·∫£ v·ªÅ
  } catch (error) {
    console.error("L·ªói trong h√†m getTableTam:", error);
    res
      .status(500)
      .json({ message: "Kh√¥ng th·ªÉ truy xu·∫•t d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu." });
  } finally {
    if (connection) connection.release(); // Tr·∫£ l·∫°i k·∫øt n·ªëi cho pool
  }
};

// h√†m s·ª≠a 1 d√≤ng
// const updateRowTKB = async (req, res) => {
//   const ID = req.params.id;
//   const data = req.body; // D·ªØ li·ªáu c·ªßa d√≤ng c·∫ßn c·∫≠p nh·∫≠t

//   let connection; // Khai b√°o bi·∫øn k·∫øt n·ªëi

//   try {
//     connection = await createPoolConnection(); // L·∫•y k·∫øt n·ªëi t·ª´ pool

//     // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
//     if (!data || typeof data !== "object" || !ID) {
//       return res
//         .status(400)
//         .json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu ID." });
//     }

//     let student_bonus = 1;

//     switch (true) {
//       case data.student_quantity >= 101:
//         student_bonus = 1.5;
//         break;
//       case data.student_quantity >= 81:
//         student_bonus = 1.4;
//         break;
//       case data.student_quantity >= 66:
//         student_bonus = 1.3;
//         break;
//       case data.student_quantity >= 51:
//         student_bonus = 1.2;
//         break;
//       case data.student_quantity >= 41:
//         student_bonus = 1.1;
//         break;
//     }

//     const qc = student_bonus * data.bonus_time * data.ll_total;

//     // Chu·∫©n b·ªã gi√° tr·ªã cho truy v·∫•n UPDATE
//     const updateValues = [
//       data.course_name,
//       data.credit_hours,
//       data.ll_code,
//       data.ll_total,
//       data.classroom || null,
//       data.course_code || null,
//       data.major || null,
//       data.study_format || null,
//       data.lecturer || null,
//       data.periods_per_week || null,
//       data.period_start || null,
//       data.period_end || null,
//       data.day_of_week || null,
//       convertDateFormat(data.start_date) || null,
//       convertDateFormat(data.end_date) || null,
//       data.student_quantity || null,
//       data.student_bonus || null,
//       data.bonus_time || null,
//       data.bonus_teacher || null,
//       data.bonus_total || null,
//       qc || null,
//       data.class_section || null,
//       data.course_id || null,
//       data.semester || null,
//       ID, // ƒêi·ªÅu ki·ªán WHERE s·ª≠ d·ª•ng ID
//     ];

//     const updateQuery = `
//     UPDATE course_schedule_details
//     SET
//         course_name = ?,
//         credit_hours = ?,
//         ll_code = ?,
//         ll_total = ?,
//         classroom = ?,
//         course_code = ?,
//         major = ?,
//         study_format = ?,
//         lecturer = ?,
//         periods_per_week = ?,
//         period_start = ?,
//         period_end = ?,
//         day_of_week = ?,
//         start_date = ?,
//         end_date = ?,
//         student_quantity = ?,
//         student_bonus = ?,
//         bonus_time = ?,
//         bonus_teacher = ?,
//         bonus_total = ?,
//         qc = ?,
//         class_section = ?,
//         course_id = ?,
//         semester = ?
//     WHERE ID = ?;
//   `;

//     // Th·ª±c thi truy v·∫•n
//     await connection.query(updateQuery, updateValues);

//     // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
//     return res.json({ message: "D√≤ng d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng." });
//   } catch (error) {
//     console.error("L·ªói khi c·∫≠p nh·∫≠t d√≤ng d·ªØ li·ªáu:", error);
//     return res
//       .status(500)
//       .json({ message: "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu." });
//   } finally {
//     if (connection) connection.release(); // Gi·∫£i ph√≥ng k·∫øt n·ªëi
//   }
// };

const updateRowTKB = async (req, res) => {
  let { id, field, value, data } = req.body;
  let connection;

  try {
    connection = await createPoolConnection(); // L·∫•y k·∫øt n·ªëi t·ª´ pool

    if (field === "student_quantity") {
      let student_bonus = 1;

      switch (true) {
        case data.student_quantity >= 101:
          student_bonus = 1.5;
          break;
        case data.student_quantity >= 81:
          student_bonus = 1.4;
          break;
        case data.student_quantity >= 66:
          student_bonus = 1.3;
          break;
        case data.student_quantity >= 51:
          student_bonus = 1.2;
          break;
        case data.student_quantity >= 41:
          student_bonus = 1.1;
          break;
      }

      const qc = student_bonus * data.bonus_time * data.ll_total;

      const updateQuery = `
        UPDATE course_schedule_details 
        SET student_quantity = ?, student_bonus = ?, qc = ? 
        WHERE id = ?`;
      const updateValues = [value, student_bonus, qc, id];

      await connection.query(updateQuery, updateValues);
    } else if (field === "bonus_time") {
      const qc = data.student_bonus * value * data.ll_total;

      const updateQuery = `
        UPDATE course_schedule_details 
        SET bonus_time = ?, qc = ? 
        WHERE id = ?`;
      const updateValues = [value, qc, id];

      await connection.query(updateQuery, updateValues);
    } else if (field === "ll_total") {
      const qc = data.student_bonus * data.bonus_time * value;

      const updateQuery = `
        UPDATE course_schedule_details 
        SET ll_total = ?, qc = ? 
        WHERE id = ?`;
      const updateValues = [value, qc, id];

      await connection.query(updateQuery, updateValues);
    } else {
      if (field === "start_date" || field === "end_date") {
        value = formatDateForDB(value);
      }

      const updateQuery = `UPDATE course_schedule_details SET ${field} = ? WHERE id = ?`;
      const updateValues = [value, id];
      console.log(updateValues);

      await connection.query(updateQuery, updateValues);
    }

    // üõ† L·∫•y l·∫°i d·ªØ li·ªáu sau khi c·∫≠p nh·∫≠t
    const [updatedRow] = await connection.query(
      "SELECT * FROM course_schedule_details WHERE id = ?",
      [id]
    );

    return res.json(updatedRow[0]); // ‚úÖ Tr·∫£ v·ªÅ to√†n b·ªô d√≤ng m·ªõi c·∫≠p nh·∫≠t
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t d√≤ng d·ªØ li·ªáu:", error);
    return res
      .status(500)
      .json({ message: "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu." });
  } finally {
    if (connection) connection.release(); // Gi·∫£i ph√≥ng k·∫øt n·ªëi
  }
};

function formatDateForDB(dateStr) {
  if (!dateStr) return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng c√≥ gi√° tr·ªã

  const parts = dateStr.split("/"); // T√°ch ng√†y, th√°ng, nƒÉm

  if (parts.length === 3) {
    const day = parts[0].padStart(2, "0"); // L·∫•y ng√†y
    const month = parts[1].padStart(2, "0"); // L·∫•y th√°ng
    const year = parts[2]; // L·∫•y nƒÉm

    return `${year}-${month}-${day}`; // Tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng yyyy-mm-dd
  }

  return null; // Tr·∫£ v·ªÅ null n·∫øu sai ƒë·ªãnh d·∫°ng
}

function convertDateFormat(dateStr) {
  const parts = dateStr.split("-");
  return `${parts[2]}-${parts[1]}-${parts[0]}`; // Chuy·ªÉn t·ª´ DD-MM-YYYY sang YYYY-MM-DD
}

// h√†m x√≥a 1 d√≤ng
const deleteRow = async (req, res) => {
  const { id } = req.params; // L·∫•y ID t·ª´ URL

  console.log(`X√≥a ${id} trong b·∫£ng TKB:`);

  let connection;

  try {
    connection = await createPoolConnection(); // L·∫•y k·∫øt n·ªëi t·ª´ pool

    // Ki·ªÉm tra xem ID c√≥ h·ª£p l·ªá kh√¥ng
    if (!id) {
      return res.status(400).json({ message: "ID kh√¥ng h·ª£p l·ªá." });
    }

    // Chu·∫©n b·ªã truy v·∫•n DELETE
    const deleteQuery = `DELETE FROM course_schedule_details WHERE id = ?`;

    // Th·ª±c thi truy v·∫•n
    await connection.query(deleteQuery, [id]);

    // Tr·∫£ v·ªÅ ph·∫£n h·ªìi th√†nh c√¥ng
    return res.json({ message: "D√≤ng d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng." });
  } catch (error) {
    console.error("L·ªói khi x√≥a d√≤ng d·ªØ li·ªáu:", error);
    return res.status(500).json({ message: "ƒê√£ x·∫£y ra l·ªói khi x√≥a d·ªØ li·ªáu." });
  } finally {
    if (connection) connection.release(); // Gi·∫£i ph√≥ng k·∫øt n·ªëi
  }
};

// const updateStudentQuantity = async (req, res) => {
//   const jsonData = req.body;

//   let connection;

//   try {
//     if (!jsonData || jsonData.length === 0) {
//       return res.status(400).json({ message: "D·ªØ li·ªáu ƒë·∫ßu v√†o tr·ªëng" });
//     }

//     connection = await createPoolConnection();

//     const batchSize = 50; // T√πy ch·ªânh batch size
//     const errors = [];

//     for (let i = 0; i < jsonData.length; i += batchSize) {
//       const batch = jsonData.slice(i, i + batchSize);

//       let updateQuery = `UPDATE course_schedule_details SET `;
//       const updateValues = [];
//       const ids = [];

//       // C·∫≠p nh·∫≠t student_quantity
//       let studentQuantityCase = ` student_quantity = CASE`;
//       batch.forEach(({ id, student_quantity }) => {
//         id = Number(id);
//         student_quantity = Number(student_quantity);
//         if (isNaN(id) || isNaN(student_quantity)) {
//           errors.push(`D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá cho id ${id}`);
//           return;
//         }

//         studentQuantityCase += ` WHEN id = ? THEN ?`;
//         updateValues.push(id, student_quantity);

//         if (!ids.includes(id)) ids.push(id);
//       });
//       studentQuantityCase += ` END,`;

//       // C·∫≠p nh·∫≠t student_bonus
//       let studentBonusCase = ` student_bonus = CASE`;
//       batch.forEach(({ id, student_quantity }) => {
//         id = Number(id);
//         student_quantity = Number(student_quantity);
//         if (isNaN(id) || isNaN(student_quantity)) return;

//         let student_bonus = 1;
//         if (student_quantity >= 101) student_bonus = 1.5;
//         else if (student_quantity >= 81) student_bonus = 1.4;
//         else if (student_quantity >= 66) student_bonus = 1.3;
//         else if (student_quantity >= 51) student_bonus = 1.2;
//         else if (student_quantity >= 41) student_bonus = 1.1;

//         studentBonusCase += ` WHEN id = ? THEN ?`;
//         updateValues.push(id, student_bonus);
//       });
//       studentBonusCase += ` END,`;

//       // C·∫≠p nh·∫≠t qc
//       let qcCase = ` qc = CASE`;
//       batch.forEach(({ id, student_quantity, ll_total, bonus_time }) => {
//         id = Number(id);
//         student_quantity = Number(student_quantity);
//         if (isNaN(id) || isNaN(student_quantity)) return;

//         let student_bonus = 1;
//         if (student_quantity >= 101) student_bonus = 1.5;
//         else if (student_quantity >= 81) student_bonus = 1.4;
//         else if (student_quantity >= 66) student_bonus = 1.3;
//         else if (student_quantity >= 51) student_bonus = 1.2;
//         else if (student_quantity >= 41) student_bonus = 1.1;

//         const qc =
//           student_bonus * (Number(bonus_time) || 0) * (Number(ll_total) || 0);

//         qcCase += ` WHEN id = ? THEN ?`;
//         updateValues.push(id, qc);
//       });
//       qcCase += ` END`;

//       // Ho√†n thi·ªán query
//       const whereClause = ` WHERE id IN (${ids.map(() => "?").join(", ")})`;
//       updateValues.push(...ids);

//       const finalQuery = `${updateQuery} ${studentQuantityCase} ${studentBonusCase} ${qcCase} ${whereClause}`;

//       console.log("üìå Query:", finalQuery);
//       console.log("üìå Values:", updateValues);

//       await connection.query(finalQuery, updateValues);
//     }

//     if (errors.length > 0) {
//       return res.status(400).json({ success: false, errors });
//     }

//     res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" });
//   } catch (error) {
//     console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", error);
//     res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t d·ªØ li·ªáu" });
//   } finally {
//     if (connection) connection.release();
//   }
// };

const updateStudentQuantity = async (req, res) => {
  const jsonData = req.body;

  let connection;

  try {
    if (!jsonData || jsonData.length === 0) {
      return res.status(400).json({ message: "D·ªØ li·ªáu ƒë·∫ßu v√†o tr·ªëng" });
    }

    connection = await createPoolConnection();

    const batchSize = 50; // T√πy ch·ªânh batch size
    const errors = [];

    for (let i = 0; i < jsonData.length; i += batchSize) {
      const batch = jsonData.slice(i, i + batchSize);

      let updateQuery = `UPDATE course_schedule_details SET `;
      const updateValues = [];
      const ids = [];

      // Map ƒë·ªÉ l∆∞u student_bonus c·ªßa t·ª´ng ID
      const studentBonusMap = new Map();

      // C·∫≠p nh·∫≠t student_quantity
      let studentQuantityCase = ` student_quantity = CASE`;
      batch.forEach(({ id, student_quantity }) => {
        id = Number(id);
        student_quantity = Number(student_quantity);
        if (isNaN(id) || isNaN(student_quantity)) {
          errors.push(`D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá cho id ${id}`);
          return;
        }

        studentQuantityCase += ` WHEN id = ? THEN ?`;
        updateValues.push(id, student_quantity);

        if (!ids.includes(id)) ids.push(id);
      });
      studentQuantityCase += ` END,`;

      // C·∫≠p nh·∫≠t student_bonus
      let studentBonusCase = ` student_bonus = CASE`;
      batch.forEach(({ id, student_quantity }) => {
        id = Number(id);
        student_quantity = Number(student_quantity);
        if (isNaN(id) || isNaN(student_quantity)) return;

        let student_bonus = 1;
        if (student_quantity >= 101) student_bonus = 1.5;
        else if (student_quantity >= 81) student_bonus = 1.4;
        else if (student_quantity >= 66) student_bonus = 1.3;
        else if (student_quantity >= 51) student_bonus = 1.2;
        else if (student_quantity >= 41) student_bonus = 1.1;

        studentBonusCase += ` WHEN id = ? THEN ?`;
        updateValues.push(id, student_bonus);

        // L∆∞u v√†o Map
        studentBonusMap.set(id, student_bonus);
      });
      studentBonusCase += ` END,`;

      // C·∫≠p nh·∫≠t qc (L·∫•y student_bonus t·ª´ Map)
      let qcCase = ` qc = CASE`;
      batch.forEach(({ id, student_quantity, ll_total, bonus_time }) => {
        id = Number(id);
        student_quantity = Number(student_quantity);
        if (isNaN(id) || isNaN(student_quantity)) return;

        const student_bonus = studentBonusMap.get(id) || 1;
        const qc =
          student_bonus * (Number(bonus_time) || 0) * (Number(ll_total) || 0);

        qcCase += ` WHEN id = ? THEN ?`;
        console.log(qc);
        updateValues.push(id, qc);
      });
      qcCase += ` END`;

      // Ho√†n thi·ªán query
      const whereClause = ` WHERE id IN (${ids.map(() => "?").join(", ")})`;
      updateValues.push(...ids);

      const finalQuery = `${updateQuery} ${studentQuantityCase} ${studentBonusCase} ${qcCase} ${whereClause}`;

      await connection.query(finalQuery, updateValues);
    }

    if (errors.length > 0) {
      return res.status(400).json({ success: false, errors });
    }

    res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" });
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t:", error);
    res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t d·ªØ li·ªáu" });
  } finally {
    if (connection) connection.release();
  }
};

const themTKBVaoQCDK = async (req, res) => {
  const { Khoa, Dot, Ki, Nam } = req.body;
  const semester = `${Dot}, ${Ki}, ${Nam}`;

  let connection;

  try {
    // L·∫•y k·∫øt n·ªëi t·ª´ createPoolConnection
    connection = await createPoolConnection();

    // L·∫•y d·ªØ li·ªáu b√™n b·∫£ng course_schedule_details
    let getDataTKBQuery = `
    SELECT 
      major AS Khoa,
      ll_code AS SoTietCTDT,
      ll_total AS LL,
      student_quantity AS SoSinhVien,
      student_bonus AS HeSoLopDong,
      bonus_time AS HeSoT7CN,
      course_id AS MaBoMon,
      lecturer AS GiaoVien,
      credit_hours AS SoTinChi,
      course_name AS LopHocPhan,
      course_code AS MaHocPhan,
      start_date AS NgayBatDau,
      end_date AS NgayKetThuc,
      bonus_total AS QuyChuan
    FROM course_schedule_details
    WHERE semester = ?
  `;

    const getDataTKBParams = [semester];

    if (Khoa !== "ALL") {
      getDataTKBQuery += " AND major = ?";
      getDataTKBParams.push(Khoa);
    }

    const [tkbData] = await connection.query(getDataTKBQuery, getDataTKBParams);

    // N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th√¨ kh√¥ng c·∫ßn insert
    if (tkbData.length === 0) {
      console.log("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ insert.");
      return;
    }

    // Th√™m d·ªØ li·ªáu v√†o b·∫£ng t·∫°m
    // C√¢u l·ªánh INSERT
    const insertQuery = `
      INSERT INTO tam (Khoa, dot, ki, nam, SoTietCTDT, LL, SoSinhVien, HeSoLopDong, HeSoT7CN, MaBoMon, 
      GiaoVien, SoTinChi, LopHocPhan, MaHocPhan, NgayBatDau, NgayKetThuc, quychuan) 
      VALUES ?
    `;

    // Chuy·ªÉn d·ªØ li·ªáu v·ªÅ d·∫°ng m·∫£ng 2D cho MySQL
    const insertValues = tkbData.map((row) => [
      row.Khoa, // major
      Dot, // dot
      Ki, // ki
      Nam, // nam
      row.SoTietCTDT, // ll_code
      row.LL, // ll_total
      row.SoSinhVien, // student_quantity
      row.HeSoLopDong, // student_bonus
      row.HeSoT7CN, // bonus_time
      row.MaBoMon, // course_id
      row.GiaoVien, // lecturer
      row.SoTinChi, // credit_hours
      row.LopHocPhan, // course_name
      row.MaHocPhan, // course_code
      row.NgayBatDau || " ", // start_date
      row.NgayKetThuc || " ", // end_date
      row.QuyChuan, // bonus_total
    ]);

    // Th·ª±c hi·ªán INSERT
    await connection.query(insertQuery, [insertValues]);

    // X√≥a d·ªØ li·ªáu b·∫£ng course_schedule_details
    // let deleteQuery = `DELETE FROM course_schedule_details WHERE semester = ?`;
    // const deleteParams = [semester];

    // if (Khoa !== "ALL") {
    //   deleteQuery += " AND major = ?";
    //   deleteParams.push(Khoa);
    // }

    // await connection.query(deleteQuery, deleteParams);

    res.status(200).json({ success: true, message: "C·∫≠p nh·∫≠t th√†nh c√¥ng" });
  } catch (error) {
    console.error("L·ªói c·∫≠p nh·∫≠t:", error);
    res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t d·ªØ li·ªáu" });
  } finally {
    if (connection) connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
  }
};

// const addNewRowTKB = async (req, res) => {
//   const data = req.body;

//   // Gh√©p c√°c th√¥ng tin k·ª≥ h·ªçc t·ª´ frontend
//   const semester = `${data.Dot}, ${data.Ki}, ${data.Nam}`;

//   let connection;

//   try {
//     // K·∫øt n·ªëi database t·ª´ pool
//     connection = await createPoolConnection();

//     // T·∫°o c√¢u truy v·∫•n INSERT
//     const insertQuery = `
//       INSERT INTO course_schedule_details
//       (course_name, course_code, student_quantity, lecturer, major, ll_total,
//        bonus_time, ll_code, start_date, end_date, semester, qc)
//       VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
//     `;

//     let student_bonus = 1;

//     switch (true) {
//       case data.student_quantity >= 101:
//         student_bonus = 1.5;
//         break;
//       case data.student_quantity >= 81:
//         student_bonus = 1.4;
//         break;
//       case data.student_quantity >= 66:
//         student_bonus = 1.3;
//         break;
//       case data.student_quantity >= 51:
//         student_bonus = 1.2;
//         break;
//       case data.student_quantity >= 41:
//         student_bonus = 1.1;
//         break;
//     }

//     const qc = student_bonus * data.bonus_time * data.ll_total;

//     // Gi√° tr·ªã c·∫ßn ch√®n v√†o database
//     const insertValues = [
//       data.course_name,
//       data.course_code,
//       data.student_quantity,
//       data.lecturer,
//       data.major,
//       data.ll_total,
//       data.bonus_time,
//       data.ll_code,
//       data.start_date,
//       data.end_date,
//       semester,
//       qc,
//     ];

//     // Th·ª±c hi·ªán ch√®n d·ªØ li·ªáu v√†o database
//     await connection.query(insertQuery, insertValues);

//     res.status(200).json({ success: true, message: "Th√™m d·ªØ li·ªáu th√†nh c√¥ng" });
//   } catch (error) {
//     console.error("L·ªói th√™m d·ªØ li·ªáu:", error);
//     res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra khi th√™m d·ªØ li·ªáu" });
//   } finally {
//     if (connection) connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
//   }
// };

const addNewRowTKB = async (req, res) => {
  const data = req.body;

  // Gh√©p c√°c th√¥ng tin k·ª≥ h·ªçc t·ª´ frontend
  const semester = data.semester;

  let connection;

  try {
    // K·∫øt n·ªëi database t·ª´ pool
    connection = await createPoolConnection();

    // T·∫°o c√¢u truy v·∫•n INSERT
    const insertQuery = `
      INSERT INTO course_schedule_details 
      (course_name, course_code, student_quantity, lecturer, major, ll_total, 
       bonus_time, ll_code, start_date, end_date, semester, qc) 
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;

    // Gi√° tr·ªã c·∫ßn ch√®n v√†o database
    const insertValues = [
      data.course_name || "",
      data.course_code || "",
      data.student_quantity || "0",
      data.lecturer || "",
      data.major,
      data.ll_total || "0",
      data.bonus_time || "0",
      data.ll_code || "0",
      data.start_date || null,
      data.end_date || null,
      semester,
      0,
    ];

    // Th·ª±c hi·ªán ch√®n d·ªØ li·ªáu v√†o database
    const [result] = await connection.query(insertQuery, insertValues);
    const newId = result.insertId; // L·∫•y ID c·ªßa d√≤ng v·ª´a th√™m

    // Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë·∫ßy ƒë·ªß c·ªßa d√≤ng m·ªõi
    res.status(200).json({
      message: "D√≤ng ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng",
      data: { id: newId, ...req.body }, // G·ª≠i l·∫°i d·ªØ li·ªáu ƒë√£ th√™m
    });
  } catch (error) {
    console.error("L·ªói th√™m d·ªØ li·ªáu:", error);
    res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra khi th√™m d·ªØ li·ªáu" });
  } finally {
    if (connection) connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
  }
};

const deleteTKB = async (req, res) => {
  const { major, semester } = req.body;

  let connection;

  try {
    // K·∫øt n·ªëi database t·ª´ pool
    connection = await createPoolConnection();

    let sql = "DELETE FROM course_schedule_details WHERE semester = ?";
    let params = [semester];

    if (major !== "ALL") {
      sql += " AND major = ?";
      params.push(major);
    }

    // Th·ª±c hi·ªán x√≥a d·ªØ li·ªáu
    const [result] = await connection.query(sql, params);

    if (result.affectedRows === 0) {
      return res.status(404).json({ message: "Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ x√≥a" });
    }

    res.status(200).json({ message: "X√≥a th√†nh c√¥ng" });
  } catch (error) {
    console.error("L·ªói x√≥a d·ªØ li·ªáu:", error);
    res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra khi x√≥a d·ªØ li·ªáu" });
  } finally {
    if (connection) connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
  }
};

// Xu·∫•t file excel

const exportMultipleWorksheets = async (req, res) => {
  const { major, semester } = req.body;
  let connection;

  try {
    // K·∫øt n·ªëi database t·ª´ pool
    connection = await createPoolConnection();

    // N·∫øu `major = "ALL"`, l·∫•y danh s√°ch t·∫•t c·∫£ c√°c ng√†nh
    let majors = [major];
    if (major === "ALL") {
      const [majorRows] = await connection.query(
        "SELECT DISTINCT major FROM course_schedule_details WHERE semester = ?",
        [semester]
      );
      majors = majorRows.map((row) => row.major);
    }

    // **üìå T·∫°o workbook**
    const wb = XLSX.utils.book_new();

    for (const m of majors) {
      // Truy v·∫•n l·∫•y d·ªØ li·ªáu theo t·ª´ng major
      let query =
        "SELECT * FROM course_schedule_details WHERE semester = ? AND major = ?";
      let params = [semester, m];

      const [rows] = await connection.query(query, params);
      if (rows.length === 0) continue; // B·ªè qua n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

      // ƒê·ªãnh nghƒ©a ti√™u ƒë·ªÅ c·ªôt
      const headers = [
        "STT",
        "S·ªë TC",
        "L·ªõp h·ªçc ph·∫ßn",
        "Gi√°o vi√™n",
        "S·ªë ti·∫øt CTƒêT",
        "S·ªë SV",
        "L√™n l·ªõp",
        "H·ªá s·ªë l√™n l·ªõp ngo√†i gi·ªù HC/ Th·∫°c sƒ©/ Ti·∫øn sƒ©",
        "H·ªá s·ªë l·ªõp ƒë√¥ng",
        "Quy chu·∫©n",
      ];

      // **üìå D·ªØ li·ªáu Excel**
      const excelData = rows.map((item, index) => [
        index + 1, // STT
        item.credit_hours,
        item.course_name,
        item.lecturer,
        item.ll_code,
        item.student_quantity,
        item.ll_total,
        item.bonus_time,
        item.student_bonus,
        item.qc,
      ]);

      // **üìå T·∫°o worksheet**
      const ws = XLSX.utils.aoa_to_sheet([
        [`B·∫¢NG TH·ªêNG K√ä KH·ªêI L∆Ø·ª¢NG GI·∫¢NG D·∫†Y - ${m}`], // Ti√™u ƒë·ªÅ sheet
        [], // D√≤ng tr·ªëng
        headers, // D√≤ng ti√™u ƒë·ªÅ c·ªôt
        ...excelData, // D·ªØ li·ªáu
      ]);

      // **üìå CƒÉn gi·ªØa v√† l√†m ƒë·∫≠m d√≤ng ti√™u ƒë·ªÅ**
      ws["!merges"] = [
        { s: { r: 0, c: 0 }, e: { r: 0, c: headers.length - 1 } },
      ];
      ws["A1"].s = {
        font: { bold: true, sz: 14 },
        alignment: { horizontal: "center", vertical: "center" },
      };

      // **üìå Th√™m sheet v√†o workbook**
      XLSX.utils.book_append_sheet(wb, ws, m);
    }

    // **üìå L∆∞u file Excel**
    const fileName = `TKB_${semester.replace(/[, ]+/g, "_")}.xlsx`;
    const filePath = path.join(__dirname, "../../uploads", fileName);
    XLSX.writeFile(wb, filePath);

    // **üìå G·ª≠i file v·ªÅ client**
    res.download(filePath, fileName, (err) => {
      if (err) {
        console.error("L·ªói t·∫£i file:", err);
        res.status(500).json({ error: "L·ªói khi t·∫£i file" });
      }
      fs.unlinkSync(filePath); // X√≥a file sau khi t·∫£i
    });
  } catch (error) {
    console.error("L·ªói xu·∫•t file Excel:", error);
    res.status(500).json({ error: "L·ªói server khi xu·∫•t file Excel" });
  } finally {
    if (connection) connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
  }
};

const exportSingleWorksheets = async (req, res) => {
  const { major, semester } = req.body;
  let connection;

  try {
    // K·∫øt n·ªëi database t·ª´ pool
    connection = await createPoolConnection();

    // N·∫øu `major = "ALL"`, l·∫•y danh s√°ch t·∫•t c·∫£ c√°c ng√†nh
    let majors = [major];
    if (major === "ALL") {
      const [majorRows] = await connection.query(
        "SELECT DISTINCT major FROM course_schedule_details WHERE semester = ?",
        [semester]
      );
      majors = majorRows.map((row) => row.major);
    }

    // **üìå Ti√™u ƒë·ªÅ c·ªôt**
    const headers = [
      "STT",
      "S·ªë TC",
      "L·ªõp h·ªçc ph·∫ßn",
      "Gi√°o vi√™n",
      "S·ªë ti·∫øt CTƒêT",
      "S·ªë SV",
      "L√™n l·ªõp",
      "H·ªá s·ªë l√™n l·ªõp ngo√†i gi·ªù HC/ Th·∫°c sƒ©/ Ti·∫øn sƒ©",
      "H·ªá s·ªë l·ªõp ƒë√¥ng",
      "Quy chu·∫©n",
    ];

    // **üìå T·∫°o workbook v√† worksheet**
    const wb = XLSX.utils.book_new();
    let wsData = [["B·∫¢NG TH·ªêNG K√ä KH·ªêI L∆Ø·ª¢NG GI·∫¢NG D·∫†Y"], [], headers]; // Ti√™u ƒë·ªÅ ch√≠nh + d√≤ng tr·ªëng + ti√™u ƒë·ªÅ c·ªôt

    let stt = 1; // Bi·∫øn ƒë·∫øm STT t·ªïng

    for (const m of majors) {
      // Truy v·∫•n l·∫•y d·ªØ li·ªáu theo t·ª´ng major
      let query =
        "SELECT * FROM course_schedule_details WHERE semester = ? AND major = ?";
      let params = [semester, m];

      const [rows] = await connection.query(query, params);
      if (rows.length === 0) continue; // B·ªè qua n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu

      // **üìå Th√™m d√≤ng ti√™u ƒë·ªÅ ng√†nh**
      wsData.push([`H·ªçc ph·∫ßn thu·ªôc khoa ${m}`]);

      // **üìå Th√™m d·ªØ li·ªáu ng√†nh**
      const excelData = rows.map((item) => [
        stt++, // STT li√™n t·ª•c
        item.credit_hours,
        item.course_name,
        item.lecturer,
        item.ll_code,
        item.student_quantity,
        item.ll_total,
        item.bonus_time,
        item.student_bonus,
        item.qc,
      ]);

      wsData = [...wsData, ...excelData]; // Th√™m d·ªØ li·ªáu v√† 1 d√≤ng tr·ªëng
    }

    // **üìå T·∫°o worksheet**
    const ws = XLSX.utils.aoa_to_sheet(wsData);

    // **üìå CƒÉn gi·ªØa v√† l√†m ƒë·∫≠m d√≤ng ti√™u ƒë·ªÅ**
    ws["!merges"] = [
      { s: { r: 0, c: 0 }, e: { r: 0, c: headers.length - 1 } }, // Merge ti√™u ƒë·ªÅ ch√≠nh
    ];
    ws["A1"].s = {
      font: { bold: true, sz: 14 },
      alignment: { horizontal: "center", vertical: "center" },
    };

    // **üìå L∆∞u file Excel**
    const fileName = `TKB_${semester.replace(/[, ]+/g, "_")}.xlsx`;
    const filePath = path.join(__dirname, "../../uploads", fileName);
    XLSX.utils.book_append_sheet(wb, ws, "TKB");
    XLSX.writeFile(wb, filePath);

    // **üìå G·ª≠i file v·ªÅ client**
    res.download(filePath, fileName, (err) => {
      if (err) {
        console.error("L·ªói t·∫£i file:", err);
        res.status(500).json({ error: "L·ªói khi t·∫£i file" });
      }
      fs.unlinkSync(filePath); // X√≥a file sau khi t·∫£i
    });
  } catch (error) {
    console.error("L·ªói xu·∫•t file Excel:", error);
    res.status(500).json({ error: "L·ªói server khi xu·∫•t file Excel" });
  } finally {
    if (connection) connection.release(); // Tr·∫£ k·∫øt n·ªëi v·ªÅ pool
  }
};

// Xu·∫•t c√°c h√†m ƒë·ªÉ s·ª≠ d·ª•ng trong router
module.exports = {
  getImportTKBSite,
  getTKBChinhThucSite,
  getDataTKBChinhThuc,
  updateRowTKB,
  deleteRow,
  updateStudentQuantity,
  themTKBVaoQCDK,
  addNewRowTKB,
  deleteTKB,
  exportMultipleWorksheets,
  exportSingleWorksheets,
};
