const mysql = require("mysql2/promise");
const fs = require("fs");
const path = require("path");
const multer = require("multer");
const createPoolConnection = require("../config/databasePool");

async function createConnectionWithMultipleStatements() {
    const connection = await createPoolConnection(); // ‚úÖ G·ªçi ƒë√∫ng h√†m ƒë·ªÉ l·∫•y k·∫øt n·ªëi
    connection.config.multipleStatements = true; // ‚úÖ B·∫≠t multipleStatements
    return connection;
}


const BACKUP_DIR = path.join(process.cwd(), "backups");
// C·∫•u h√¨nh multer ƒë·ªÉ l∆∞u file SQL
const upload = multer({ dest: BACKUP_DIR });

// Ki·ªÉm tra th∆∞ m·ª•c backup
if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
}

const backupAndDownload = async (req, res) => {
    try {
        const timestamp = new Date().toISOString().replace(/[:.]/g, "-");
        const backupFile = path.join(BACKUP_DIR, `backup-${timestamp}.sql`);

        const connection = await createPoolConnection()
        const [tables] = await connection.query("SHOW TABLES");

        let sqlDump = "";
        for (let tableObj of tables) {
            const tableName = Object.values(tableObj)[0];
            sqlDump += `-- Backup table: ${tableName}\n`;
            sqlDump += `DROP TABLE IF EXISTS ${tableName};\n`;

            // L·∫•y c·∫•u tr√∫c b·∫£ng
            const [createTable] = await connection.query(`SHOW CREATE TABLE ${tableName}`);
            sqlDump += createTable[0]["Create Table"] + ";\n\n";

            // L·∫•y d·ªØ li·ªáu
            const [rows] = await connection.query(`SELECT * FROM ${tableName}`);
            for (let row of rows) {
                const values = Object.values(row).map(val => `'${val}'`).join(",");
                sqlDump += `INSERT INTO ${tableName} VALUES (${values});\n`;
            }
            sqlDump += "\n";
        }

        fs.writeFileSync(backupFile, sqlDump, "utf-8");
        connection.release();;

        console.log("Backup th√†nh c√¥ng:", backupFile);

        // Th·ª±c hi·ªán t·∫£i file backup ngay sau khi t·∫°o
        res.download(backupFile, path.basename(backupFile), (err) => {
            console.log("t·∫£i file", path.basename(backupFile))
            if (err) {
                console.log("l·ªói", err);
                console.error("‚ö†Ô∏è L·ªói t·∫£i file:", err);
                res.status(500).json({ success: false, message: "T·∫£i file th·∫•t b·∫°i!", error: err.message });
            }
        });


} catch (error) {
    console.error("L·ªói backup:", error.message || error);
    res.status(500).json({ success: false, message: "Backup th·∫•t b·∫°i!", error: error.message });
}
};
const resetDatabase = async (req, res) => {
    try {
        let filePath = "";

        // Tr∆∞·ªùng h·ª£p 1: Ng∆∞·ªùi d√πng t·∫£i file l√™n
        if (req.file) {
            filePath = req.file.path;
            console.log("üìÇ File SQL ƒë∆∞·ª£c nh·∫≠n t·ª´ upload:", filePath);
        }
        // Tr∆∞·ªùng h·ª£p 2: Ng∆∞·ªùi d√πng ch·ªçn file t·ª´ danh s√°ch backup
        else if (req.body.backupFileName) {
            filePath = path.join(BACKUP_DIR, req.body.backupFileName); // ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
            console.log("üìÇ File SQL ƒë∆∞·ª£c ch·ªçn t·ª´ backup:", filePath);
        }
        // N·∫øu kh√¥ng c√≥ file n√†o, b√°o l·ªói
        else {
            return res.status(400).json({ success: false, message: "‚ö†Ô∏è Vui l√≤ng ch·ªçn file SQL!" });
        }

        if (!fs.existsSync(filePath)) {
            return res.status(404).json({ success: false, message: "‚ùå File kh√¥ng t·ªìn t·∫°i!" });
        }

        // ƒê·∫£m b·∫£o DB_CONFIG c√≥ multipleStatements: true
        // const connection = await mysql.createConnection({ ...DB_CONFIG, multipleStatements: true });
        const connection = await createConnectionWithMultipleStatements()
        // üóëÔ∏è X√≥a to√†n b·ªô database: X√≥a t·∫•t c·∫£ b·∫£ng
        const [tables] = await connection.query("SHOW TABLES");
        if (tables.length > 0) {
            console.log("üóëÔ∏è X√≥a t·∫•t c·∫£ b·∫£ng...");
            for (let tableObj of tables) {
                const tableName = Object.values(tableObj)[0];
                await connection.query(`DROP TABLE IF EXISTS \`${tableName}\``);
                console.log(`‚úÖ ƒê√£ x√≥a b·∫£ng: ${tableName}`);
            }
        }

        // üì• ƒê·ªçc n·ªôi dung file SQL v·ªõi encoding "utf8"
        let sqlContent = fs.readFileSync(filePath, { encoding: "utf8" });

        // üîß Lo·∫°i b·ªè c√°c d√≤ng ch·ªâ ch·ª©a "/" (ho·∫∑c ch·ªâ kho·∫£ng tr·∫Øng v√† "/")
        sqlContent = sqlContent.replace(/^\s*\/\s*$/gm, "");

        // üîç Lo·∫°i b·ªè c√°c d√≤ng kh√¥ng c·∫ßn thi·∫øt (comment, SET NAMES, SET @OLD_TIME_ZONE, SET SQL_MODE)
        sqlContent = sqlContent
            .split("\n")
            .filter(line =>
                !line.startsWith("/*!") &&
                !line.startsWith("--") &&
                !line.startsWith("SET NAMES") &&
                !line.startsWith("SET @OLD_TIME_ZONE") &&
                !line.startsWith("SET SQL_MODE")
            )
            .join("\n");

        // üîß Lo·∫°i b·ªè ho√†n to√†n c√°c l·ªánh DELIMITER
        sqlContent = sqlContent.replace(/^DELIMITER.*$/gm, "");

        // ‚úÖ T√°ch c√°c block TRIGGER b·∫±ng regex c·∫£i ti·∫øn: B·∫Øt block b·∫Øt ƒë·∫ßu b·∫±ng "CREATE TRIGGER" v√† k·∫øt th√∫c b·∫±ng "END;" (c√≥ th·ªÉ c√≥ kho·∫£ng tr·∫Øng sau END;)
        const triggerRegex = /CREATE TRIGGER[\s\S]*?END\s*\/\//gi;
        const triggerMatches = sqlContent.match(triggerRegex) || [];
        let triggerQueries = triggerMatches.map(triggerQuery => triggerQuery.trim());
        triggerQueries = triggerQueries.map(triggerQuery => {
            return triggerQuery
                .replace(/END\s*\/\//g, "END;") // Chuy·ªÉn END// th√†nh END;
                .split("\n")
                .map(line => {
                    if (/^\s*DECLARE\s/i.test(line) && !/;\s*$/.test(line)) {
                        return line.trimEnd() + ";";
                    }
                    return line;
                })
                .join("\n");
        });
        

        // X√≥a c√°c block trigger kh·ªèi n·ªôi dung SQL ƒë·ªÉ l·∫•y ph·∫ßn "normal" c√≤n l·∫°i
        let normalSqlContent = sqlContent;
        for (const trigger of triggerMatches) {
            normalSqlContent = normalSqlContent.replace(trigger, "");
        }
        let normalQueries = normalSqlContent.split(/;\s*\n/).filter(q => q.trim() !== "");

        // üîÑ Ch·∫°y c√°c c√¢u l·ªánh SQL b√¨nh th∆∞·ªùng
for (let query of normalQueries) {
    try {
        // üìå N·∫øu query l√† c√¢u INSERT, ki·ªÉm tra v√† s·ª≠a d·ªØ li·ªáu ki·ªÉu ng√†y
        if (/INSERT INTO/i.test(query)) {
            query = query.replace(
                /(["'])([A-Za-z]{3} [A-Za-z]{3} \d{1,2} \d{4} \d{2}:\d{2}:\d{2} GMT[+-]\d{4} \([^)]+\))\1/g,
                (match, quote, dateStr) => {
                    try {
                        // Chuy·ªÉn ƒë·ªïi chu·ªói ng√†y th√†nh ISO, sau ƒë√≥ l·∫•y ph·∫ßn YYYY-MM-DD
                        const parsedDate = new Date(dateStr).toISOString().split("T")[0];
                        return `${quote}${parsedDate}${quote}`;
                    } catch (err) {
                        console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi ng√†y:", dateStr);
                        return match; // N·∫øu l·ªói, gi·ªØ nguy√™n gi√° tr·ªã c≈©
                    }
                }
            );
            // Escape d·∫•u ngo·∫∑c k√©p b√™n trong c√°c gi√° tr·ªã chu·ªói, chuy·ªÉn sang d·∫•u nh√°y ƒë∆°n (n·∫øu c·∫ßn)
            // query = query.replace(/(?<=\s)"(?!,)|(?<![,])"(?=[\s:.])/g, "'");
            // Thay th·∫ø t·∫•t c·∫£ c√°c gi√° tr·ªã "null" (v·ªõi d·∫•u nh√°y) th√†nh NULL kh√¥ng d·∫•u
            query = query.replace(/(["'])null\1/gi, 'NULL');

        }
        
        await connection.query(query);
    } catch (err) {
        console.error(`‚ùå L·ªói khi ch·∫°y query:\n${query}\n‚õî L·ªói:`, err.message);
        return res.status(500).json({
            success: false,
            message: "L·ªói trong qu√° tr√¨nh nh·∫≠p d·ªØ li·ªáu!",
            error: err.message,
            query: query // Tr·∫£ v·ªÅ query l·ªói ƒë·ªÉ debug
        });
    }
}



        // üîÑ Ch·∫°y c√°c c√¢u l·ªánh TRIGGER
        for (let triggerQuery of triggerQueries) {
            // Lo·∫°i b·ªè k√Ω t·ª± "/" th·ª´a n·∫øu c√≥ ·ªü ƒë·∫ßu trigger (n·∫øu c·∫ßn)
            triggerQuery = triggerQuery.trim();
            if (triggerQuery.startsWith("/")) {
                triggerQuery = triggerQuery.substring(1).trim();
            }
            console.log("Trigger query:\n", triggerQuery);
            try {
                await connection.query(triggerQuery);
            } catch (err) {
                console.error(`‚ùå L·ªói khi ch·∫°y TRIGGER:\n${triggerQuery}\n‚õî L·ªói:`, err.message);
                return res.status(500).json({ 
                    success: false, 
                    message: "L·ªói khi t·∫°o TRIGGER!",
                    error: err.message,
                    query: triggerQuery
                });
            }
        }

        await connection.release();

        console.log("üéâ Database ƒë√£ ƒë∆∞·ª£c reset th√†nh c√¥ng!");
        res.json({ success: true, message: "‚úÖ Database ƒë√£ ƒë∆∞·ª£c reset v√† nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng!" });
    } catch (error) {
        console.error("‚ùå L·ªói reset database:", error.message || error);
        res.status(500).json({ success: false, message: "Reset database th·∫•t b·∫°i!", error: error.message });
    }
};
const listBackupFiles = async (req, res) => {
    try {
        if (!fs.existsSync(BACKUP_DIR)) {
            return res.status(404).json({ success: false, message: "Th∆∞ m·ª•c backup kh√¥ng t·ªìn t·∫°i!" });
        }

        const files = fs.readdirSync(BACKUP_DIR).filter(file => file.endsWith(".sql"));
        

        res.json({ success: true, files });
    } catch (err) {
        res.status(500).json({ success: false, message: "L·ªói khi l·∫•y danh s√°ch file!", error: err.message });
    }
};
const addToDatabase = async (req, res) => {
    try {
        let filePath = "";

        // Tr∆∞·ªùng h·ª£p 1: Ng∆∞·ªùi d√πng t·∫£i file l√™n
        if (req.file) {
            filePath = req.file.path;
            console.log("üìÇ File SQL ƒë∆∞·ª£c nh·∫≠n t·ª´ upload:", filePath);
        }
        // Tr∆∞·ªùng h·ª£p 2: Ng∆∞·ªùi d√πng ch·ªçn file t·ª´ danh s√°ch backup
        else if (req.body.backupFileName) {
            filePath = path.join(BACKUP_DIR, req.body.backupFileName); // ƒê∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß
            console.log("üìÇ File SQL ƒë∆∞·ª£c ch·ªçn t·ª´ backup:", filePath);
        }
        // N·∫øu kh√¥ng c√≥ file n√†o, b√°o l·ªói
        else {
            return res.status(400).json({ success: false, message: "‚ö†Ô∏è Vui l√≤ng ch·ªçn file SQL!" });
        }

        if (!fs.existsSync(filePath)) {
            return res.status(404).json({ success: false, message: "‚ùå File kh√¥ng t·ªìn t·∫°i!" });
        }

        // ƒê·∫£m b·∫£o DB_CONFIG c√≥ multipleStatements: true
        // const connection = await mysql.createConnection({ ...DB_CONFIG, multipleStatements: true });
        const connection = await createConnectionWithMultipleStatements()
        // üì• ƒê·ªçc n·ªôi dung file SQL v·ªõi encoding "utf8"
        let sqlContent = fs.readFileSync(filePath, { encoding: "utf8" });

        // üîß Lo·∫°i b·ªè c√°c d√≤ng ch·ªâ ch·ª©a "/" (ho·∫∑c ch·ªâ kho·∫£ng tr·∫Øng v√† "/")
        sqlContent = sqlContent.replace(/^\s*\/\s*$/gm, "");

        // üîç Lo·∫°i b·ªè c√°c d√≤ng kh√¥ng c·∫ßn thi·∫øt (comment, SET NAMES, SET @OLD_TIME_ZONE, SET SQL_MODE)
        sqlContent = sqlContent
            .split("\n")
            .filter(line =>
                !line.startsWith("/*!") &&
                !line.startsWith("--") &&
                !line.startsWith("SET NAMES") &&
                !line.startsWith("SET @OLD_TIME_ZONE") &&
                !line.startsWith("SET SQL_MODE")
            )
            .join("\n");

        // üîß Lo·∫°i b·ªè ho√†n to√†n c√°c l·ªánh DELIMITER
        sqlContent = sqlContent.replace(/^DELIMITER.*$/gm, "");

        // ‚úÖ T√°ch c√°c block TRIGGER b·∫±ng regex c·∫£i ti·∫øn: B·∫Øt block b·∫Øt ƒë·∫ßu b·∫±ng "CREATE TRIGGER" v√† k·∫øt th√∫c b·∫±ng "END;" (c√≥ th·ªÉ c√≥ kho·∫£ng tr·∫Øng sau END;)
        const triggerRegex = /CREATE TRIGGER[\s\S]*?END\s*\/\//gi;
        const triggerMatches = sqlContent.match(triggerRegex) || [];
        let triggerQueries = triggerMatches.map(triggerQuery => triggerQuery.trim());
        triggerQueries = triggerQueries.map(triggerQuery => {
            return triggerQuery
                .replace(/END\s*\/\//g, "END;") // Chuy·ªÉn END// th√†nh END;
                .split("\n")
                .map(line => {
                    if (/^\s*DECLARE\s/i.test(line) && !/;\s*$/.test(line)) {
                        return line.trimEnd() + ";";
                    }
                    return line;
                })
                .join("\n");
        });
        

        // X√≥a c√°c block trigger kh·ªèi n·ªôi dung SQL ƒë·ªÉ l·∫•y ph·∫ßn "normal" c√≤n l·∫°i
        let normalSqlContent = sqlContent;
        for (const trigger of triggerMatches) {
            normalSqlContent = normalSqlContent.replace(trigger, "");
        }
        let normalQueries = normalSqlContent.split(/;\s*\n/).filter(q => q.trim() !== "");

        // üîÑ Ch·∫°y c√°c c√¢u l·ªánh SQL b√¨nh th∆∞·ªùng
for (let query of normalQueries) {
    try {
        // üìå N·∫øu query l√† c√¢u INSERT, ki·ªÉm tra v√† s·ª≠a d·ªØ li·ªáu ki·ªÉu ng√†y
        if (/INSERT INTO/i.test(query)) {
            query = query.replace(
                /(["'])([A-Za-z]{3} [A-Za-z]{3} \d{1,2} \d{4} \d{2}:\d{2}:\d{2} GMT[+-]\d{4} \([^)]+\))\1/g,
                (match, quote, dateStr) => {
                    try {
                        // Chuy·ªÉn ƒë·ªïi chu·ªói ng√†y th√†nh ISO, sau ƒë√≥ l·∫•y ph·∫ßn YYYY-MM-DD
                        const parsedDate = new Date(dateStr).toISOString().split("T")[0];
                        return `${quote}${parsedDate}${quote}`;
                    } catch (err) {
                        console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi ng√†y:", dateStr);
                        return match; // N·∫øu l·ªói, gi·ªØ nguy√™n gi√° tr·ªã c≈©
                    }
                }
            );
            // Escape d·∫•u ngo·∫∑c k√©p b√™n trong c√°c gi√° tr·ªã chu·ªói, chuy·ªÉn sang d·∫•u nh√°y ƒë∆°n (n·∫øu c·∫ßn)
            // query = query.replace(/(?<=\s)"(?!,)|(?<![,])"(?=[\s:.])/g, "'");
            // Thay th·∫ø t·∫•t c·∫£ c√°c gi√° tr·ªã "null" (v·ªõi d·∫•u nh√°y) th√†nh NULL kh√¥ng d·∫•u
            query = query.replace(/(["'])null\1/gi, 'NULL');

        }
        
        await connection.query(query);
    } catch (err) {
        console.error(`‚ùå L·ªói khi ch·∫°y query:\n${query}\n‚õî L·ªói:`, err.message);
        return res.status(500).json({
            success: false,
            message: "L·ªói trong qu√° tr√¨nh nh·∫≠p d·ªØ li·ªáu!",
            error: err.message,
            query: query // Tr·∫£ v·ªÅ query l·ªói ƒë·ªÉ debug
        });
    }
}



        // üîÑ Ch·∫°y c√°c c√¢u l·ªánh TRIGGER
        for (let triggerQuery of triggerQueries) {
            // Lo·∫°i b·ªè k√Ω t·ª± "/" th·ª´a n·∫øu c√≥ ·ªü ƒë·∫ßu trigger (n·∫øu c·∫ßn)
            triggerQuery = triggerQuery.trim();
            if (triggerQuery.startsWith("/")) {
                triggerQuery = triggerQuery.substring(1).trim();
            }
            console.log("Trigger query:\n", triggerQuery);
            try {
                await connection.query(triggerQuery);
            } catch (err) {
                console.error(`‚ùå L·ªói khi ch·∫°y TRIGGER:\n${triggerQuery}\n‚õî L·ªói:`, err.message);
                return res.status(500).json({ 
                    success: false, 
                    message: "L·ªói khi t·∫°o TRIGGER!",
                    error: err.message,
                    query: triggerQuery
                });
            }
        }

        await connection.release();

        console.log("üéâ Database ƒë√£ ƒë∆∞·ª£c reset th√†nh c√¥ng!");
        res.json({ success: true, message: "‚úÖ Database ƒë√£ ƒë∆∞·ª£c reset v√† nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng!" });
    } catch (error) {
        console.error("‚ùå L·ªói reset database:", error.message || error);
        res.status(500).json({ success: false, message: "Reset database th·∫•t b·∫°i!", error: error.message });
    }
};
const executeSQLQuery = async (req, res) => {
    try {
        const { sqlQuery } = req.body;

        // Ki·ªÉm tra ƒë·∫ßu v√†o
        if (!sqlQuery || sqlQuery.trim() === "") {
            return res.status(400).json({ success: false, message: "‚ö†Ô∏è Vui l√≤ng nh·∫≠p c√¢u l·ªánh SQL!" });
        }

        // Ch·∫∑n m·ªôt s·ªë l·ªánh nguy hi·ªÉm
        const forbiddenKeywords = ["DROP DATABASE", "SHUTDOWN", "KILL"];
        if (forbiddenKeywords.some(keyword => sqlQuery.toUpperCase().includes(keyword))) {
            return res.status(403).json({ success: false, message: "‚õî L·ªánh SQL kh√¥ng ƒë∆∞·ª£c ph√©p!" });
        }

        // K·∫øt n·ªëi database
        const connection = await createConnectionWithMultipleStatements();

        // Th·ª±c thi c√¢u l·ªánh SQL
        const [results] = await connection.query(sqlQuery);

        await connection.release();

        res.json({ success: true, message: "‚úÖ SQL ƒë√£ ch·∫°y th√†nh c√¥ng!", results });
    } catch (error) {
        console.error("‚ùå L·ªói khi ch·∫°y SQL:", error.message || error);
        res.status(500).json({ success: false, message: "L·ªói khi th·ª±c thi SQL!", error: error.message });
    }
};



module.exports = { backupAndDownload, resetDatabase, upload, listBackupFiles, addToDatabase, executeSQLQuery };
