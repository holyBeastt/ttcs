<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <style>
      /* Định dạng cho bảng */
      .table {
        width: 70%;
        border-collapse: separate;
        border-spacing: 0;
        margin-top: 20px;
        font-size: 0.9em;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        border-radius: 8px;
        overflow: hidden;
        justify-self: center;
      }

      .table th,
      .table td {
        padding: 10px;
        text-align: left;
        border: 1px solid #dee2e6;
        border-right: 2px solid #dee2e6;
        border-left: 2px solid #dee2e6;
      }

      .table th {
        background-color: blue;
        color: white;
        font-weight: bold;
        border-right: 2px solid #fff;
      }

      .table th:last-child {
        border-right: 2px solid #dee2e6;
      }

      .table tbody tr {
        border-bottom: 1px solid #dddddd;
        transition: all 0.3s ease;
      }

      .table tbody tr:nth-child(even) {
        background-color: #f3f3f3;
      }

      .table tbody tr:last-of-type {
        border-bottom: 2px solid #009879;
      }

      .table tbody tr:hover {
        background-color: #f5f5f5;
        transform: scale(1.01);
      }
      /* Định dạng cho tiêu đề */
      h3 {
        color: #009879;
        text-align: center;
        margin: 30px 0;
        font-weight: 600;
        position: relative;
        padding-bottom: 10px;
      }

      h3:after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 100px;
        height: 3px;
        background: #009879;
      }

      /* Định dạng cho biểu đồ */
      canvas {
        max-width: 1000px;
        margin: auto;
      }
    </style>
  </head>

  <body>
    <!-- Phần header -->
    <%- include('header') %>

    <!-- Phần nội dung -->

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <div class="d-flex justify-content-start align-items-end mb-3">
      <select
        class="form-select mx-1 selectop"
        id="dot"
        style="width: 150px"
      ></select>

      <select
        class="form-select mx-1 selectop"
        id="ki"
        style="width: 150px"
      ></select>

      <!-- Combo box Năm -->
      <select
        class="form-select mx-1 selectop"
        style="width: 200px"
        id="NamHoc"
      ></select>

      <!-- Combo box Khoa -->
      <select
        class="form-select mx-1 selectop"
        id="Khoa"
        style="width: 150px"
      ></select>
    </div>
    <h3>Thống kê số đồ án tốt nghiệp theo giảng viên</h3>
    <div style="margin-top: 20px">
      <div class="row mt-4">
        <div class="col-md-4">
          <div class="alert alert-success text-center">
            <strong>Tổng số tiết cơ hữu:</strong> <span id="totalCoHuu">0</span>
          </div>
        </div>
        <div class="col-md-4">
          <div class="alert alert-warning text-center">
            <strong>Tổng số tiết mời giảng:</strong> <span id="totalMoiGiang">0</span>
          </div>
        </div>
        <div class="col-md-4">
          <div class="alert alert-primary text-center">
            <strong>Tổng số tiết:</strong> <span id="totalSoTiet">0</span>
          </div>
        </div>
      </div>
      <canvas
        id="chartCoHuu"
        style="width: 60%; height: 200px; margin-bottom: 20px"
      ></canvas>
    </div>
    <div id="coHuuTable">
      <h3>Bảng chi tiết Cơ hữu</h3>
      <table table class="table table-bordered my-2" border="1" id="coHuuTable">
        <thead>
          <tr>
            <th>STT</th>
            <th>Tên Giảng Viên</th>
            <th>Khoa</th>
            <th>Số đồ án</th>
            <th>Số tiết quy đổi</th>
          </tr>
        </thead>
        <tbody>
          <!-- Dữ liệu sẽ được hiển thị ở đây -->
        </tbody>
      </table>
    </div>
    <div>
      <canvas id="chartMoiGiang" style="width: 60%; height: 200px"></canvas>
    </div>

    <!-- Bảng chi tiết Cơ hữu -->

    <!-- Bảng chi tiết Mời giảng -->
    <div id="moiGiangTable">
      <h3>Bảng chi tiết Mời giảng</h3>
      <table
        table
        class="table table-bordered my-2"
        border="1"
        id="moiGiangTable"
      >
        <thead>
          <tr>
            <th>STT</th>
            <th>Tên Giảng Viên</th>
            <th>Khoa</th>
            <th>Số đồ án</th>
            <th>Số tiết quy đổi</th>
          </tr>
        </thead>
        <tbody>
          <!-- Dữ liệu sẽ được hiển thị ở đây -->
        </tbody>
      </table>
    </div>

    <script>
      $(document).ready(function () {
        // Biến để theo dõi số lượng combobox đã được khởi tạo
        let initializedComboboxes = 0;
        const totalComboboxes = 4; // Tổng số combobox cần khởi tạo

        function checkAndFetchData() {
          initializedComboboxes++;
          if (initializedComboboxes === totalComboboxes) {
            fetchThongkeData();
          }
        }

        // Xóa các option mặc định
        $("#NamHoc option").remove();
        $("#Dot option").remove();
        $("#Khoa option").remove();
        $("#ki option").remove();

        // Chỉ gọi một lần để khởi tạo combobox Khoa
        $.ajax({
          url: "/getPhongBanDoAn",
          method: "GET",
          success: function (response) {
            if (response.success) {
              $("#Khoa").empty(); // Xóa các option cũ
              $("#Khoa").append('<option value="ALL">Tất cả khoa</option>'); // Thêm tùy chọn mặc định

              response.MaPhongBan.forEach(function (item) {
                $("#Khoa").append(
                  `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                );
              });

              // Đặt giá trị mặc định nếu cần
              const MaPhongBan = localStorage.getItem("MaPhongBan");
              const isKhoa = localStorage.getItem("isKhoa");
              console.log("Khoa", MaPhongBan);

              // Kiểm tra nếu MaPhongBan không nằm trong danh sách option
              if (isKhoa == 1 && MaPhongBan) {
                const exists = $("#Khoa option").filter(function () {
                  return $(this).val() === MaPhongBan;
                }).length;

                if (!exists) {
                  // Thêm MaPhongBan vào combobox nếu không tồn tại
                  $("#Khoa").append(
                    `<option value="${MaPhongBan}">${MaPhongBan}</option>`
                  );
                }

                // Gán giá trị MaPhongBan vào combobox
                $("#Khoa").val(MaPhongBan);
                $("#Khoa").prop("disabled", true); // Vô hiệu hóa combobox nếu cần
              } else if (isKhoa == 0) {
                $("#Khoa").val("ALL");
              }

              fetchThongkeData(); // Gọi hàm để lấy dữ liệu ngay sau khi khởi tạo combobox Khoa
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu phòng ban:", error);
          },
        });

        // Khởi tạo các combobox khác
        $.ajax({
          url: "/getNamHocDoAn",
          method: "GET",
          success: function (response) {
            if (response.success) {
              // Thêm dữ liệu năm học
              response.NamHoc.forEach(function (item) {
                $("#NamHoc").append(
                  `<option value="${item.NamHoc}">${
                    item.NamHoc === "ALL" ? "Tất cả năm" : item.NamHoc
                  }</option>`
                );
              });
              if (response.MaxNamHoc) {
                $("#NamHoc").val(response.MaxNamHoc).trigger("change");
              }
              fetchThongkeData();
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu:", error);
            // Đảm bảo fetchThongkemgData vẫn được gọi ngay cả khi có lỗi
            fetchThongkeData();
          },
        });

        // Khởi tạo combobox Dot
        $.ajax({
          url: "/getDot",
          method: "GET",
          success: function (response) {
            if (response.success) {
              response.Dot.forEach(function (item) {
                $("#dot").append(
                  `<option value="${item.Dot}">${
                    item.Dot === "ALL" ? "Tất cả đợt" : item.Dot
                  }</option>`
                );
              });
              // Thêm option "Tất cả đợt" vào đầu
              $("#dot").prepend(
                '<option value="ALL" selected>Tất cả đợt</option>'
              );
              fetchThongkeData();
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu đợt:", error);
          },
        });

        $.ajax({
          url: "/getKiDoAn",
          method: "GET",
          success: function (response) {
            if (response.success) {
              response.Ki.forEach(function (item) {
                $("#ki").append(
                  `<option value="${item.Ki}">${
                    item.Ki === "ALL" ? "Tất cả kì" : item.Ki
                  }</option>`
                );
              });
              // Thêm option "Tất cả Kì" vào đầu
              $("#ki").prepend(
                '<option value="ALL" selected>Tất cả kì</option>'
              );
              fetchThongkeData();
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu kì đồ án:", error);
          },
        });

        function fetchThongkeData() {
          const namhoc = $("#NamHoc").val();
          const khoa = $("#Khoa").val();
          const dot = $("#dot").val();
          const ki = $("#ki").val();

          $.ajax({
            url: "/data",
            method: "GET",
            data: { namhoc, khoa, dot, ki },
            success: function (response) {
              if (response.success) {
                // ======= XỬ LÝ TRƯỜNG HỢP KHOA = ALL =======
                if (response.isAllKhoa && Array.isArray(response.cohuuKhoa) && Array.isArray(response.moigiangKhoa)) {
                  // Tính tổng số tiết
                  const totalCoHuu = response.cohuuKhoa.reduce((sum, item) => sum + parseFloat(item.soTiet || 0), 0);
                  const totalMoiGiang = response.moigiangKhoa.reduce((sum, item) => sum + parseFloat(item.soTiet || 0), 0);
                  const totalSoTiet = totalCoHuu + totalMoiGiang;

                  // Tính phần trăm
                  const percentCoHuu = totalSoTiet > 0 ? ((totalCoHuu / totalSoTiet) * 100).toFixed(1) : 0;
                  const percentMoiGiang = totalSoTiet > 0 ? ((totalMoiGiang / totalSoTiet) * 100).toFixed(1) : 0;

                  // Hiển thị tổng số tiết
                  $("#totalCoHuu").text(`${totalCoHuu} (${percentCoHuu}%)`);
                  $("#totalMoiGiang").text(`${totalMoiGiang} (${percentMoiGiang}%)`);
                  $("#totalSoTiet").text(totalSoTiet);

                  // Vẽ biểu đồ Cơ hữu theo khoa (có %)
                  const cohuuLabels = response.cohuuKhoa.map(item => item.MaPhongBan || "Không rõ");
                  const cohuuValues = response.cohuuKhoa.map(item => item.soTiet || 0);
                  const cohuuPercents = cohuuValues.map(val => totalCoHuu > 0 ? ((val / totalCoHuu) * 100).toFixed(1) : 0);

                  if (window.chartCoHuu instanceof Chart) window.chartCoHuu.destroy();
                  const ctxCoHuu = document.getElementById("chartCoHuu").getContext("2d");
                  window.chartCoHuu = new Chart(ctxCoHuu, {
                      type: "bar",
                      data: {
                          labels: cohuuLabels,
                          datasets: [{
                              label: "Số tiết quy đổi (Cơ hữu)",
                              data: cohuuValues,
                              backgroundColor: "blue",
                              borderColor: "yellow",
                              borderWidth: 3,
                          }]
                      },
                      options: {
                          responsive: true,
                          plugins: {
                              tooltip: {
                                  callbacks: {
                                      label: function(context) {
                                          const value = context.raw;
                                          const percent = totalCoHuu > 0 ? ((value / totalCoHuu) * 100).toFixed(1) : 0;
                                          return `${context.label}: ${value} (${percent}%)`;
                                      }
                                  }
                              },
                              title: { display: true, text: "Cơ hữu theo khoa", font: { size: 18 } }
                          },
                          scales: { y: { beginAtZero: true } }
                      }
                  });

                  // Hiển thị bảng tổng hợp Cơ hữu (có % ở cột số tiết quy đổi)
                  let htmlCoHuu = `
                      <h3>Bảng tổng hợp Cơ hữu theo khoa</h3>
                      <table class="table table-bordered my-2" border="1">
                          <thead>
                              <tr>
                                  <th>STT</th>
                                  <th>Khoa</th>
                                  <th>Số lượng giảng viên</th>
                                  <th>Số đồ án</th>
                                  <th>Số tiết quy đổi</th>
                              </tr>
                          </thead>
                          <tbody>
                  `;
                  response.cohuuKhoa.forEach((item, idx) => {
                      const percent = totalCoHuu > 0 ? ((item.soTiet / totalCoHuu) * 100).toFixed(1) : 0;
                      htmlCoHuu += `
                          <tr>
                              <td>${idx + 1}</td>
                              <td>${item.MaPhongBan}</td>
                              <td>${item.soGiangVien}</td>
                              <td>${item.soDoAn}</td>
                              <td>${item.soTiet} (${percent}%)</td>
                          </tr>
                      `;
                  });
                  htmlCoHuu += `</tbody></table>`;
                  $("#coHuuTable").html(htmlCoHuu);

                  // Biểu đồ và bảng cho Mời giảng (có %)
                  const moigiangLabels = response.moigiangKhoa.map(item => item.MaPhongBan || "Không rõ");
                  const moigiangValues = response.moigiangKhoa.map(item => item.soTiet || 0);
                  const moigiangPercents = moigiangValues.map(val => totalMoiGiang > 0 ? ((val / totalMoiGiang) * 100).toFixed(1) : 0);

                  if (window.chartMoiGiang instanceof Chart) window.chartMoiGiang.destroy();
                  const ctxMoiGiang = document.getElementById("chartMoiGiang").getContext("2d");
                  window.chartMoiGiang = new Chart(ctxMoiGiang, {
                      type: "bar",
                      data: {
                          labels: moigiangLabels,
                          datasets: [{
                              label: "Số tiết quy đổi (Mời giảng)",
                              data: moigiangValues,
                              backgroundColor: "green",
                              borderColor: "orange",
                              borderWidth: 3,
                          }]
                      },
                      options: {
                          responsive: true,
                          plugins: {
                              tooltip: {
                                  callbacks: {
                                      label: function(context) {
                                          const value = context.raw;
                                          const percent = totalMoiGiang > 0 ? ((value / totalMoiGiang) * 100).toFixed(1) : 0;
                                          return `${context.label}: ${value} (${percent}%)`;
                                      }
                                  }
                              },
                              title: { display: true, text: "Mời giảng theo khoa", font: { size: 18 } }
                          },
                          scales: { y: { beginAtZero: true } }
                      }
                  });

                  let htmlMoiGiang = `
                      <h3>Bảng tổng hợp Mời giảng theo khoa</h3>
                      <table class="table table-bordered my-2" border="1">
                          <thead>
                              <tr>
                                  <th>STT</th>
                                  <th>Khoa</th>
                                  <th>Số lượng giảng viên</th>
                                  <th>Số đồ án</th>
                                  <th>Số tiết quy đổi</th>
                              </tr>
                          </thead>
                          <tbody>
                  `;
                  response.moigiangKhoa.forEach((item, idx) => {
                      const percent = totalMoiGiang > 0 ? ((item.soTiet / totalMoiGiang) * 100).toFixed(1) : 0;
                      htmlMoiGiang += `
                          <tr>
                              <td>${idx + 1}</td>
                              <td>${item.MaPhongBan}</td>
                              <td>${item.soGiangVien}</td>
                              <td>${item.soDoAn}</td>
                              <td>${item.soTiet} (${percent}%)</td>
                          </tr>
                      `;
                  });
                  htmlMoiGiang += `</tbody></table>`;
                  $("#moiGiangTable").html(htmlMoiGiang);

                  // Không render bảng chi tiết nữa!
                  return;
                }

                // ======= NẾU KHÔNG PHẢI KHOA = ALL, render bảng chi tiết như cũ =======
                const coHuu = response.coHuu;
                const moiGiang = response.moiGiang;
                const totalCoHuu = response.totalCoHuu || 0;
                const totalMoiGiang = response.totalMoiGiang || 0;
                const totalSoTiet = response.totalSoTiet || (totalCoHuu + totalMoiGiang);

                // Tính phần trăm
                const percentCoHuu = totalSoTiet > 0 ? ((totalCoHuu / totalSoTiet) * 100).toFixed(1) : 0;
                const percentMoiGiang = totalSoTiet > 0 ? ((totalMoiGiang / totalSoTiet) * 100).toFixed(1) : 0;

                // Hiển thị tổng số tiết có %
                $("#totalCoHuu").text(`${totalCoHuu} (${percentCoHuu}%)`);
                $("#totalMoiGiang").text(`${totalMoiGiang} (${percentMoiGiang}%)`);
                $("#totalSoTiet").text(totalSoTiet);

                // Labels và values cho biểu đồ Cơ hữu
                const coHuuLabels = coHuu.map(item => item.GiangVien || "Không rõ");
                const coHuuValues = coHuu.map(item => item.soDoAn);

                // Labels và values cho biểu đồ Mời giảng
                const moiGiangLabels = moiGiang.map(item => item.GiangVien || "Không rõ");
                const moiGiangValues = moiGiang.map(item => item.soDoAn);

                // Hủy biểu đồ cũ nếu tồn tại
                if (window.chartCoHuu instanceof Chart) window.chartCoHuu.destroy();
                if (window.chartMoiGiang instanceof Chart) window.chartMoiGiang.destroy();

                // Tạo biểu đồ Cơ hữu
                const ctxCoHuu = document.getElementById("chartCoHuu").getContext("2d");
                window.chartCoHuu = new Chart(ctxCoHuu, {
                  type: "bar",
                  data: {
                    labels: coHuuLabels,
                    datasets: [{
                      label: "Số đồ án (Cơ hữu)",
                      data: coHuuValues,
                      backgroundColor: "blue",
                      borderColor: "yellow",
                      borderWidth: 3,
                    }],
                  },
                  options: {
                    responsive: true,
                    plugins: {
                      title: { display: true, text: "Cơ hữu", font: { size: 18 } }
                    },
                    scales: { y: { beginAtZero: true } }
                  }
                });

                // Tạo biểu đồ Mời giảng
                const ctxMoiGiang = document.getElementById("chartMoiGiang").getContext("2d");
                window.chartMoiGiang = new Chart(ctxMoiGiang, {
                  type: "bar",
                  data: {
                    labels: moiGiangLabels,
                    datasets: [{
                      label: "Số đồ án (Mời giảng)",
                      data: moiGiangValues,
                      backgroundColor: "green",
                      borderColor: "orange",
                      borderWidth: 3,
                    }],
                  },
                  options: {
                    responsive: true,
                    plugins: {
                      title: { display: true, text: "Mời giảng", font: { size: 18 } }
                    },
                    scales: { y: { beginAtZero: true } }
                  }
                });

                // Hiển thị bảng chi tiết Cơ hữu
                let htmlCoHuu = `
                  <h3>Bảng chi tiết Cơ hữu</h3>
                  <table class="table table-bordered my-2" border="1" id="coHuuTable">
                    <thead>
                      <tr>
                        <th>STT</th>
                        <th>Tên Giảng Viên</th>
                        <th>Khoa</th>
                        <th>Số đồ án</th>
                        <th>Số tiết quy đổi</th>
                      </tr>
                    </thead>
                    <tbody>
                `;
                coHuu.forEach((item, index) => {
                  htmlCoHuu += `
                    <tr>
                      <td>${index + 1}</td>
                      <td>${item.GiangVien || "Không rõ"}</td>
                      <td>${item.MaPhongBan || "Không rõ"}</td>
                      <td>${item.soDoAn}</td>
                      <td>${item.soTiet}</td>
                    </tr>
                  `;
                });
                htmlCoHuu += `</tbody></table>`;
                $("#coHuuTable").html(htmlCoHuu);

                // Hiển thị bảng chi tiết Mời giảng
                let htmlMoiGiang = `
                  <h3>Bảng chi tiết Mời giảng</h3>
                  <table class="table table-bordered my-2" border="1" id="moiGiangTable">
                    <thead>
                      <tr>
                        <th>STT</th>
                        <th>Tên Giảng Viên</th>
                        <th>Khoa</th>
                        <th>Số đồ án</th>
                        <th>Số tiết quy đổi</th>
                      </tr>
                    </thead>
                    <tbody>
                `;
                moiGiang.forEach((item, index) => {
                  htmlMoiGiang += `
                    <tr>
                      <td>${index + 1}</td>
                      <td>${item.GiangVien || "Không rõ"}</td>
                      <td>${item.MaPhongBan || "Không rõ"}</td>
                      <td>${item.soDoAn}</td>
                      <td>${item.soTiet}</td>
                    </tr>
                  `;
                });
                htmlMoiGiang += `</tbody></table>`;
                $("#moiGiangTable").html(htmlMoiGiang);
              } else {
                alert("Không thể tải dữ liệu từ server.");
              }
            },
            error: function (error) {
              console.error("Lỗi:", error);
            },
          });
        }

        $("#NamHoc, #Khoa, #dot, #ki").on("change", fetchThongkeData);
        fetchThongkeData(); // Gọi ngay khi trang được tải
      });
    </script>

    <script>
      document
        .getElementById("changeMessage")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

          if (MaPhongBan) {
            // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
            window.location.href = `/changeMessage/${MaPhongBan}`;
          } else {
            alert("Không tìm thấy MaPhongBan trong localStorage.");
          }
        });
    </script>

    <script>
      document
        .getElementById("changePasswordLink")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage

          if (tenDangNhap) {
            // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
            window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(
              tenDangNhap
            )}`;
          } else {
            alert("Không tìm thấy TenDangNhap trong localStorage.");
          }
        });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const role = localStorage.getItem("userRole");
        const isKhoa = localStorage.getItem("isKhoa");

        // Ẩn button ngay khi trang được tải
        const actionButton = document.getElementById("changeMessage");
        //Ẩn site thêm thông báo
        if (role === APP_ROLES.troLy_phong || role === APP_ROLES.lanhDao_phong) {
          actionButton.style.display = "";
        } else {
          actionButton.style.display = "none";
        }
      });
    </script>
    <script>
      document
        .getElementById("infome")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const id_User = localStorage.getItem("id_User"); // Lấy id_User từ localStorage
          if (id_User) {
            // Chuyển hướng đến trang infome và truyền id_User trong URL
            window.location.href = `/infome/${id_User}`;
          } else {
            alert("Không tìm thấy id_User trong localStorage.");
          }
        });
    </script>
  </body>
</html>
