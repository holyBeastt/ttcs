<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="/css/table.css">
  <link rel="stylesheet" href="/css/teachingInfo.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
  <style>
    .table>:not(caption)>*>* {
      border-bottom-width: 2px;
    }

    /* CSS để căn chỉnh label tổng số tiết */
    .table {
      border-color: #ffffff;
      z-index: 1;
    }

    /* CSS để căn chỉnh label tổng số tiết */
    .total-label {
      position: relative;
      /* Change this if necessary */
      z-index: 1;
      /* Ensure this is lower than .suggestions */
      margin-top: 10px;
      /* Adjust spacing if needed */
      text-align: right;
    }

    .suggestions {
      position: absolute;
      /* Đảm bảo gợi ý nằm bên trên các thành phần khác */
      top: calc(100% + 5px);
      /* Đặt gợi ý phía trên input với một khoảng cách */
      left: 0;
      font-size: 12px;
      background-color: #f0f0f0;
      color: #000;
      border: 1px solid #ccc;
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      /* Đảm bảo gợi ý nằm trên các thành phần khác */
      border-radius: 4px;
      max-height: 300px;
      overflow-y: auto;
    }

    /* Hiệu ứng lung linh khi hover */
    .suggestions:hover {
      background-color: #e0e0e0;
      /* Thay đổi màu nền khi hover */
      box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
      /* Tăng độ bóng khi hover */
    }


    /* CSS cho từng mục gợi ý */
    .suggestion-item {
      padding: 8px 12px;
      /* Khoảng cách bên trong từng mục */
      cursor: pointer;
      /* Con trỏ chuột thay đổi khi hover */
      transition: background-color 0.2s ease;
      /* Tạo hiệu ứng chuyển đổi mượt mà khi hover */
    }

    /* Hiệu ứng khi người dùng di chuột vào mục gợi ý */
    .suggestion-item:hover {
      background-color: #f0f0f0;
      /* Màu nền khi hover */
    }

    /* Đặt lại một số thuộc tính khi input mất focus */
    input:focus+.suggestions {
      display: block;
      /* Đảm bảo khung hiển thị khi input được focus */
    }

    /* Đảm bảo container gợi ý không bị tràn ra ngoài khung nếu có */
    .suggestions {
      overflow: hidden;
    }

    /* Đặt chiều rộng cố định cho cả input[type="date"] và input[type="text"] */
    input[type="date"],
    input[type="text"] {
      width: 120px;
      /* Điều chỉnh giá trị này theo mong muốn */
      box-sizing: border-box;
      padding: 5px;
      /* Giữ padding như cũ */
    }

    /* phần css cho label tổng số tiết ki*/
    .total-label {
      margin-left: auto;
      /* Căn phải cho thẻ total-label */
      margin-right: 0;
      font-family: Arial, sans-serif;
      font-size: 16px;
      background-color: #f4f4f4;
      padding: 10px;
      border-radius: 8px;
      width: fit-content;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      display: block;
      /* Đảm bảo thẻ div là khối để căn phải hoạt động */
    }

    .total-label label {
      font-weight: bold;
      /* Giữ chữ in đậm */
      color: #000;
      /* Màu chữ đen */
      margin-right: 8px;
      /* Thêm khoảng cách bên phải */
      cursor: pointer;
      /* Tạo hiệu ứng chuyển màu nền và màu chữ mềm mại */
      padding: 5px 10px;
      /* Thêm padding cho label để tạo không gian */
      border: 1px solid #ccc;
      /* Khung cho label */
      border-radius: 4px;
      /* Bo góc cho khung */
    }

    .total-label label,
    .total-label label span {
      background-color: #007BFF;
      /* Màu nền khi hover */
      color: #fff;
      /* Màu chữ trắng khi hover */
    }

    .total-label span {
      font-weight: bold;
      /* Giữ chữ trong span cũng in đậm */
      color: #333;
      /* Màu chữ đậm cho giá trị */
    }

    .btn {
      margin-bottom: 0px;
      height: 45px;
    }
  </style>
</head>

<body>

  <nav class="navbar-top ">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">
        <img src="/Logo-Hoc-Vien-Ky-Thuat-Mat-Ma-ACTVN.webp" alt="Logo">
        <div class="navbar-title">
          <img src="/dongchu_banner.png" alt="banner">
        </div>
      </a>
    </div>
  </nav>

  <!-- Phần dưới của navbar chứa các mục nằm ngang -->
  <nav class="navbar navbar-expand-lg navbar-bottom sticky-top">
    <div class="" style="width: 100%;">
      <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>
      <div class="collapse navbar-collapse" style="width: 100%;" id="navbarNav">
        <ul class="navbar-nav">
          <li class="nav-item">
            <a class="nav-link" id="Home" href=""><i class="fa-solid fa-house"></i></a>
          </li>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Giảng Viên Mời
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" href="/gvmList">Danh sách giảng viên mời</a>
                <a class="nav-link" id="actionButton1" href="/importGvmList" style="width: 100%;">Thêm giảng viên mời
                  bằng file</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Bảng Quy Chuẩn
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" href="/import" id="actionButton2" style="width: 100%;">Thêm file quy chuẩn</a>
                <a class="nav-link" href="/tableTam">Bảng quy chuẩn dự kiến</a>
                <a class="nav-link" href="/tableQC">Bảng quy chuẩn chính thức</a>
                <a class="nav-link" id="ThongTinGD" href="">Thông tin giảng viên theo lớp</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Mời Giảng
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" href="/xemCacLopGvm">Xem các lớp mời</a>
                <a class="nav-link" href="/classInfoGvm">Thông tin lớp giảng viên mời</a>
                <a class="nav-link" href="/hopDongDuKien" role="button">Hợp đồng dự kiến</a>
                <a class="nav-link " href="/infoHDGvm" role="button">Thông tin hợp đồng</a>
                <li class="nav-item"></li>
                <a class="nav-link " href="/phuLucHD">Phụ lục hợp đồng</a>
                </li>
                <a class="nav-link " href="/exportHD">Hợp Đồng</a>
                <a class="nav-link" id="suaHD" style="display: none;" href="/suaHD">Sửa Thông Tin Hợp Đồng</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle active" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Vượt Giờ
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="" href="/infoclassvuotgio">Thông tin lớp vượt giờ của tôi</a>
                <a class="nav-link" id="" href="/addclass">Thêm lớp giảng dạy</a>
                <a class="nav-link active" id="" href="/addclassgiuaky">Thêm lớp kiểm tra giữa kỳ</a>
                <a class="nav-link" id="actionButton3" href="/duyetgk">Duyệt các lớp giữa kì</a>
                <a class="nav-link" id="" href="/vuotGioExport">Xuất thông tin vượt giờ</a>

              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Nghiên Cứu Khoa Học
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <!-- <a class="nav-link" id="" href="#">COMING SOON</a> -->
                <a class="nav-link" href="/detaiduan">Đề tài và dự án</a>
                <a class="nav-link" href="/baibaokhoahoc">Bài báo khoa học</a>
                <a class="nav-link" id="" href="/bangsangchevagiaithuong">Bằng sáng chế và giải thưởng trong năm</a>
                <a class="nav-link" id="" href="/sachvagiaotrinh">Sách và giáo trình xuất bản trong nước</a>
                <a class="nav-link" id="" href="/nckhvahuanluyendoituyen">NCKH và Huấn luyện đội tuyển</a>
                <a class="nav-link" id="" href="/xaydungctdt">Xây dựng chương trình đào tạo</a>
                <a class="nav-link" id="" href="/biensoangiaotrinhbaigiang">Biên soạn giáo trình, bài giảng</a>
                <!-- <a class="nav-link" id="" href="/nhiemvukhoahocvacongnghe">Nhiệm vụ khoa học và công nghệ</a> -->
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Đồ Án
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="importDoAn" style="display: none;" href="/importDoAn">Import đồ án</a>
                <a class="nav-link" id="" href="/getVuotGioDoAnDuKienSite">Đồ án dự kiến</a>
                <a class="nav-link" id="" href="/doAnChinhThuc">Đồ án tốt nghiệp</a>
                <a class="nav-link" id="" href="/doAnHopDongDuKienSite">Hợp đồng dự kiến</a>
                <a class="nav-link" id="" href="/exportPhuLucDA">Phụ lục đồ án</a>
                <a class="nav-link" id="" href="/hopDongDA">Hợp đồng đồ án</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Thống Kê
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="" href="/thongkemg">Mời Giảng</a>
                <a class="nav-link" id="" href="/thongkevuotgio">Vượt giờ</a>
                <a class="nav-link" id="" href="#">Đồ Án</a>
                <a class="nav-link" id="" href="#">Nghiên cứu khoa học</a>
              </div>
            </div>
          </div>
          <div class="navbar-nav">
            <div class="nav-item dropdown">
              <a class="nav-link dropdown-toggle" href="#" id="navbarDropdownUser" data-bs-toggle="dropdown"
                aria-expanded="false">
                Hệ Thống
              </a>
              <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <a class="nav-link" id="" href="log">Xem File Log</a>
              </div>
            </div>
          </div>
        </ul>
        <div class="navbar-nav">
          <div class="nav-item dropdown">
            <a class="nav-link dropdown-toggle fullname" href="/login" id="navbarDropdownUser" data-bs-toggle="dropdown"
              aria-expanded="false">
              Hi, Lê Đức Thuận
            </a>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
              <a class="dropdown-item" id="infome">Thông tin cá nhân</a>
              <a class="dropdown-item" id="changePasswordLink">Đổi mật khẩu</a>
                <a class="dropdown-item" id="changeMessage">Thêm thông báo</a>
              <a class="dropdown-item" href="/">Đăng xuất</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>

  <h1 class="d-flex justify-content-center my-3">Chọn lớp coi thi giữa kì</h1>
  <div class="container-fluid box m-4">
    <div class="">
      <div class="d-flex">
        <div class="cbb d-flex" style="margin-top: 20px;">

          <select class="selectop mx-1" id="combobox-dot">
            <option value="">Đợt</option>
          </select>

          <!-- Combo box Kỳ -->
          <select class="selectop mx-1" id="comboboxki">
            <option value="">Kỳ</option>
          </select>

          <!-- Combo box Năm -->
          <select class="selectop mx-1" id="NamHoc">
            <option value="">Năm học</option>
          </select>

          <button id="infoGvm" class="btn text-nowrap mx-2">Hiển thị</button>
          <button onclick="submitData()" class="btn mx-2" id="update-qc">Cập nhật</button>
        </div>
      </div>

      <!-- Phần tìm kiếm xuống dưới -->
      <div class="d-flex my-3" style="height: 70px;">
        <input type="text" id="filterName" placeholder="Tìm theo tên giảng viên" class="form-control m-2 search"
          style="width: 200px;" />
        <input type="text" id="filterClass" placeholder="Tìm theo tên học phần" class="form-control m-2 search"
          style="width: 200px;" />
      </div>
      <script>
        function filterTable() {
          const nameFilter = document.getElementById('filterName').value.toLowerCase();
          const classFilter = document.getElementById('filterClass').value.toLowerCase();
          const tableRows = document.querySelectorAll('#tableBody tr');

          tableRows.forEach(row => {
            const nameCell = row.querySelector('td:nth-child(3)'); // Cột tên giảng viên
            const classCell = row.querySelector('td:nth-child(1)'); // Cột học phần

            const name = nameCell ? nameCell.textContent.toLowerCase() : '';
            const className = classCell ? classCell.textContent.toLowerCase() : '';

            // Kiểm tra điều kiện lọc
            const matchesName = name.includes(nameFilter);
            const matchesClass = className.includes(classFilter);

            // Hiện hoặc ẩn hàng dựa trên điều kiện lọc
            if (matchesName && matchesClass) {
              row.style.display = ''; // Hiện hàng nếu tất cả các điều kiện đều khớp
            } else {
              row.style.display = 'none'; // Ẩn hàng nếu không khớp
            }
          });
          calculateTotals();
        }

        // Gán sự kiện cho các input filter
        document.getElementById('filterName').addEventListener('input', filterTable);
        document.getElementById('filterClass').addEventListener('input', filterTable);
      </script>

      <div id="renderInfo">
        <table class=" text-center" style="width: 100%;">
          <thead>
            <tr>
              <th style="width: 200px;">Học phần</th>
              <th style="width: 50px;">Số TC</th>
              <th style="width: 200px;">GV giảng dạy</th>
              <th style="width: 50px;">Mã lớp</th>
              <th style="width: 100px;">Số SV</th>
              <th style="width: 50px;">Hình thức thi giữa kỳ</th>
              <th style="width: 100px;">Hệ số T7CN</th>
              <th style="width: 50px;">Số tiết QC</th>
              <th style="width: 50px;">Ghi chú</th>
              <th style="width: 80px; " id="select">
                <div class="form-check d-flex justify-content-center" style="padding: 0px;">
                  <input class="check" type="checkbox" id="checkAllSelect" onclick="checkAll('select')">
                  <label class="form-check-label" for="checkAllSelect"
                    style="margin-left: 0px; margin-right: 0px;">Chọn</label>
                </div>
              </th>
            </tr>
          </thead>
          <tbody id="tableBody">
            <!-- Dữ liệu sẽ được chèn vào đây -->
          </tbody>
        </table>
      </div>
      <!-- Label tổng số tiết tách riêng với bảng -->
      <div class="total-label">
        <label>Tổng số tiết Quy Chuẩn: <span class="value" id="totalQC">0</span></label>
      </div>
    </div>
  </div>
  <!-- Modal form -->
  <div id="modalBackdrop" style="display: none;"></div> <!-- Nền tối -->
  <div id="noteForm" style="display: none;">
    <h3>Ghi chú</h3>
    <label for="noteInput">Nội dung:</label>
    <textarea id="noteInput"></textarea> <!-- Sử dụng textarea cho ghi chú dài -->
    <br />
    <!-- <label for="deadlineInput">Hạn:</label>
    <input type="date" id="deadlineInput"
      style="width: 100%; padding: 5px; border: 1px solid #ccc; border-radius: 4px;" />
    <br /> -->
    <div class="d-flex text-nowrap" style="text-align: right;">
      <button onclick="saveNote()">Lưu</button>
      <button onclick="doneNote()">Hoàn Thành</button>
      <button class="cancel" onclick="closeNoteForm()">Đóng</button>
    </div>
  </div>
</body>

</html>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- auto fill  -->

<script>
  $(document).ready(function () {
    const isKhoa = localStorage.getItem("isKhoa");
    hideButton();
    const role = localStorage.getItem("userRole");
    console.log('Giá trị QUyền từ localStorage: ', role);
  });

  function hideButton() {
    const isKhoa = localStorage.getItem("isKhoa");
    const role = localStorage.getItem("userRole");

    if (isKhoa === null) {
      console.log('Không tìm thấy giá trị isKhoa trong localStorage');
    } else {
      console.log('Giá trị isKhoa: ', isKhoa);

      const actionButton = document.getElementById('actionButton');
      const actionButton1 = document.getElementById('actionButton1');
      const actionButton2 = document.getElementById('actionButton2');
      const actionButton3 = document.getElementById('actionButton3');

      // Ẩn button import đồ án
      const importDoAn = document.getElementById('importDoAn');
      const suaHD = document.getElementById('suaHD');

      if (isKhoa == 0 && role == 'Duyệt'){
        importDoAn.style.display = 'block';
        suaHD.style.display = 'block';
      }

      if (actionButton1 && actionButton2) {
        if (isKhoa === "0") {
          actionButton1.style.display = 'none'; // Ẩn actionButton1 nếu isKhoa = 0
          actionButton2.style.display = 'inline-block'; // Hiện actionButton2
          console.log('Nút actionButton1 đã được ẩn, actionButton2 đã được hiển thị');
        } else {
          actionButton1.style.display = 'inline-block'; // Hiện actionButton1 nếu isKhoa khác 0
          actionButton2.style.display = 'none'; // Ẩn actionButton2
          console.log('Nút actionButton1 đã được hiển thị, actionButton2 đã được ẩn');
        }
      } else {
        console.log('Không tìm thấy các nút actionButton1 hoặc actionButton2');
      }
      //Ẩn site duyệt lớp gk
      if (role === "Lãnh đạo khoa" || role === "Duyệt") {
        actionButton3.style.display = '';
      } else {
        actionButton3.style.display = 'none';
      }
    }
  }
</script>


<!-- Phần phân quyền -->
<script>
  document.addEventListener('DOMContentLoaded', () => {

    // Thêm sự kiện click cho phần tử có id="ThongTinGD"
    const ThongTinGD = document.getElementById("ThongTinGD");

    ThongTinGD.addEventListener("click", function (event) {
      event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

      const isKhoa = localStorage.getItem("isKhoa"); // Lấy role từ localStorage

      if (isKhoa == 0) { // Nếu là đào tạo hoặc tài chính
        window.location.href = "/info2";
      } else {
        window.location.href = "/info";
      }
    });

    // Thêm sự kiện click cho phần tử có id="Home"

    const Home = document.getElementById("Home");

    Home.addEventListener("click", function (event) {
      event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

      const isKhoa = localStorage.getItem("isKhoa")

      if (isKhoa == 0) { // Nếu là đào tạo hoặc tài chính
        window.location.href = "/maindt";
      } else {
        window.location.href = "/mainkhoa";
      }
    });

    /// 
    const role = localStorage.getItem("userRole")
    const MaPhongBan = localStorage.getItem("MaPhongBan")
    const isKhoa = localStorage.getItem("isKhoa");

    // Nếu là phòng ban thì hiện lọc theo khoa
    if (isKhoa == 0) {
      document.getElementById('filterKhoa').style.display = 'block';
    }
  });

</script>

<script>
  window.onload = function () {
    const TenNhanVien = localStorage.getItem("TenNhanVien"); // Lấy tên người dùng từ localStorage
    let Role = localStorage.getItem("userRole");
    if (Role.toUpperCase() == 'LÃNH ĐẠO KHOA') {
      Role = 'LĐK';
    }

    if (TenNhanVien) {
      // Hiển thị tên người dùng trên phần tử HTML
      document.querySelector('.fullname').innerText = `${TenNhanVien} - ${Role}`;
    } else {
      document.querySelector('.fullname').innerText = 'Hi, Guest'; // Hiển thị nếu không có tên người dùng
    }

    //document.querySelector('.role').innerText = `${Role}`;

  };
</script>

<script>
  document.getElementById("changePasswordLink").addEventListener("click", function (event) {
    event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
    const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage

    if (tenDangNhap) {
      // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
      window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(tenDangNhap)}`;
    } else {
      alert("Không tìm thấy TenDangNhap trong localStorage.");
    }
  });
</script>
<script>
  $(document).ready(function () {
    $('#NamHoc option[value=""]').remove();
    $('#comboboxki option[value=""]').remove();
    $('#combobox-dot option[value=""]').remove();

    $.ajax({
      url: '/getNamHoc',
      method: 'GET',
      success: function (response) {
        if (response.success) {

          response.NamHoc.forEach(function (item) {
            console.log(item.NamHoc);
            $('#NamHoc').append(
              `<option value="${item.NamHoc}">${item.NamHoc}</option>`
            );
          });

          response.Ki.forEach(function (item) {
            console.log(item.Ki);
            $('#comboboxki').append(
              `<option value="${item.value}">${item.Ki}</option>`
            );
          });
          response.Dot.forEach(function (item) {
            console.log(item.Dot);
            $('#combobox-dot').append(
              `<option value="${item.value}">${item.Dot}</option>`
            );
          });
        } else {
          console.error("Không lấy được dữ liệu năm học:", response.message);
        }
      },
      error: function (error) {
        console.error("Lỗi khi lấy dữ liệu năm học:", error);
      }
    });
  });
</script>
<script>
  document.getElementById('infoGvm').addEventListener('click', loadLopMoiData);

  async function loadLopMoiData() {
    const MaPhongBan = localStorage.getItem('MaPhongBan'); // Lấy mã phòng ban từ localStorage
    const Dot = document.getElementById('combobox-dot').value;
    const Ki = document.getElementById('comboboxki').value;
    const Nam = document.getElementById('NamHoc').value;
    if (!MaPhongBan) {
      alert("Mã phòng ban không tồn tại!");
      return;
    }

    try {
      const response = await fetch(`/getLopGiuaKi/${MaPhongBan}/${Dot}/${Ki}/${Nam}`, {
        method: 'GET', // Gửi yêu cầu GET
      });

      if (!response.ok) {
        throw new Error(`Error: ${response.status} - ${response.statusText}`);
      }

      const data = await response.json(); // Lấy dữ liệu từ server

      if (data.success) {
        if (data.maBoMon && data.maBoMon.length > 0) {
          console.log('Dữ liệu bộ môn:', data);
          renderTable(data);
        } else {
          alert("Dữ liệu trống!");
        }
      } else {
        alert("Không tìm thấy dữ liệu!");
      }
    } catch (error) {
      console.error('Có lỗi xảy ra khi lấy dữ liệu:', error);
    }
  }

</script>
<script>
  function renderTable(data) {
    const role = localStorage.getItem("userRole");
    const MaPhongBan = localStorage.getItem("MaPhongBan");
    const isKhoa = localStorage.getItem("isKhoa");
    const TenNhanVien = localStorage.getItem("TenNhanVien");
    console.log(TenNhanVien);
    let tableRowData = [];
    console.log(data);


    const tableBody = document.getElementById('tableBody');
    tableBody.innerHTML = ''; // Xóa nội dung cũ
    //let index = -1;
    const filteredData = data.maBoMon.filter(row => 
      row.GiangVien.trim() === TenNhanVien.trim() || row.id_Gvm !== 1
    );

    filteredData.forEach((row, index) => {

      const tableRow = document.createElement('tr');

      // Thêm id vào dữ liệu row để lưu trữ
      let rowWithId = {
        id: index,
        ...row
      };
      tableRowData.push(rowWithId);

      tableRow.setAttribute("data-id", row.MaGiangDay);

      // Lớp học phần
      const tenHocPhanTd = document.createElement('td');
      tenHocPhanTd.textContent = `${row.TenHocPhan}`;
      tableRow.appendChild(tenHocPhanTd);

      // Số tín chỉ
      const soTcTd = document.createElement('td');
      soTcTd.textContent = row.SoTC;
      tableRow.appendChild(soTcTd);

      // Giảng viên giảng dạy
      const giangVienTd = document.createElement('td');
      giangVienTd.textContent = row.GiangVien;
      tableRow.appendChild(giangVienTd);

      // Mã lớp
      const maLopTd = document.createElement('td');
      maLopTd.textContent = row.Lop;
      tableRow.appendChild(maLopTd);

      // Số sinh viên
      const soSVTd = document.createElement('td');
      soSVTd.textContent = row.SoSV;
      tableRow.appendChild(soSVTd);


      //Thẻ select hình thức thi giữa kỳ
      let hinhThucKTGiuaKyTd;
      let hinhThucKTGiuaKySelect;
      hinhThucKTGiuaKyTd = document.createElement('td');
      hinhThucKTGiuaKySelect = document.createElement('select');
      hinhThucKTGiuaKySelect.name = 'hinhThucKTGiuaKy';

      // Tạo các tùy chọn cho select (có thể thay đổi tùy theo yêu cầu)
      const options = [
        { value: 'none', text: 'None' },
        { value: 'Coi, chấm TN', text: 'Coi, chấm trắc nghiệm trên giấy' },
        { value: 'Coi, chấm viết', text: 'Coi, chấm tự luận' },
        { value: 'Coi, chấm VĐ', text: 'Coi, chấm vấn đáp' },
        { value: 'Coi, chấm TH', text: 'Coi, chấm thực hành' }
      ];

      // Thêm các tùy chọn vào select
      options.forEach(optionData => {
        const option = document.createElement('option');
        option.value = optionData.value;
        option.textContent = optionData.text;
        if (row.HinhThucKTGiuaKy === optionData.value) {
          option.selected = true;
        }
        hinhThucKTGiuaKySelect.appendChild(option);
      });

      hinhThucKTGiuaKyTd.appendChild(hinhThucKTGiuaKySelect);
      // Thêm id để lấy dữ liệu 
      hinhThucKTGiuaKySelect.id = `hinhThucKTGiuaKy_${index}`;
      tableRow.appendChild(hinhThucKTGiuaKyTd);

      // thẻ select hệ số t7CN
      let heSoT7CNTd;
      let heSoT7CNSelect;
      heSoT7CNTd = document.createElement('td');
      heSoT7CNSelect = document.createElement('select');
      heSoT7CNSelect.name = 'heSoT7CN';

      // Tạo các tùy chọn cho select (có thể thay đổi tùy theo yêu cầu)
      const options1 = [
        { value: '1.0', text: '1.0' },
        { value: '1.5', text: '1.5' },
        { value: '2.0', text: '2.0' },
        { value: '2.25', text: '2.25' },
        { value: '3.0', text: '3.0' },
        { value: '4.0', text: '4.0' },
        { value: '4.5', text: '4.5' },
        { value: '6.0', text: '6.0' }
      ];

      // Thêm các tùy chọn vào select
      options1.forEach(optionData => {
        const option = document.createElement('option');
        option.value = optionData.value;
        option.textContent = optionData.text;
        if (row.HeSoT7CN == optionData.value) {
          option.selected = true;
        }
        heSoT7CNSelect.appendChild(option);
      });

      heSoT7CNTd.appendChild(heSoT7CNSelect);
      // Thêm id để lấy dữ liệu 
      heSoT7CNSelect.id = `heSoT7CN_${index}`;
      tableRow.appendChild(heSoT7CNTd);

      //Số tiết kiểm tra
      // const soTietKTTd = document.createElement('td');
      // soTietKTTd.textContent = row.SoTietKT;
      // tableRow.appendChild(soTietKTTd);


      // Số tiết qc
      const soTietQCTd = document.createElement('td');
      soTietQCTd.textContent = row.QuyChuan;
      tableRow.appendChild(soTietQCTd);

      // Ghi chú
      const ghiChuTd = document.createElement("td");
      const ghiChuValue = row.GhiChu && row.GhiChu.trim() !== "" ? row.GhiChu : false;
      const hoanThanh = row.HoanThanh;
      if (role === 'GV' || role === 'Thường') {
        ghiChuTd.innerHTML = "📜"; // Hiển thị biểu tượng ghi chú nếu role là GV hoặc Thường
        ghiChuTd.style.cursor = "not-allowed"; // Thay đổi con trỏ chuột thành 'not-allowed' để báo hiệu không thể tương tác
        ghiChuTd.title = "Bạn không có quyền truy cập"; // Thêm tooltip để giải thích lý do không thể nhấn
      } else {

        if (ghiChuValue) {
          if (hoanThanh) {
            ghiChuTd.innerHTML = `📜 <span class="bi bi-check2-circle" style="color: green;"></span>`; // Hiển thị biểu tượng ghi chú và chấm đỏ
          } else {
            ghiChuTd.innerHTML = `📜 <span class="bi bi-circle" style="color: red;"></span>`; // Hiển thị biểu tượng ghi chú và chấm đỏ
          }

        } else {
          ghiChuTd.innerHTML = "📜"; // Hiển thị biểu tượng ghi chú nếu không có ghi chú
        }
        ghiChuTd.style.cursor = "pointer"; // Thay đổi con trỏ chuột khi di chuột qua biểu tượng
        ghiChuTd.onclick = () => openNoteForm(tableRow, ghiChuValue); // Gọi hàm mở form khi nhấn vào biểu tượng


      }
      tableRow.appendChild(ghiChuTd); // Thêm ô ghi chú vào hàng
      tableBody.appendChild(tableRow);

      //Check box chọn lớp 
      let selectCheckboxTd, selectCheckbox;
      selectCheckboxTd = document.createElement('td');
      selectCheckbox = document.createElement('input');
      selectCheckbox.type = 'checkbox';
      selectCheckbox.style.marginLeft = '30px';
      selectCheckbox.name = 'select'; // Thêm thuộc tính name
      selectCheckbox.checked = row.DaChon || false; // Dùng một trường cho checkbox
      selectCheckbox.onchange = () => updateCheckAll('select'); // Gọi hàm khi checkbox thay đổi
      selectCheckboxTd.appendChild(selectCheckbox);
      tableRow.appendChild(selectCheckboxTd);


      if (row.DaChon) {
        if (row.GiangVienCoiGK.trim() === TenNhanVien.trim()) {
          hinhThucKTGiuaKySelect.disabled = false;
          heSoT7CNSelect.disabled = false;
          selectCheckbox.disabled = false;
        } else {
          hinhThucKTGiuaKySelect.disabled = true;
          heSoT7CNSelect.disabled = true;
          selectCheckbox.disabled = true;
        }
      }
      if (row.KhoaDuyet) {
        hinhThucKTGiuaKySelect.disabled = true;
        heSoT7CNSelect.disabled = true;
        selectCheckbox.disabled = true;
      }
    });
    // Lưu dữ liệu với id vào localStorage
    localStorage.setItem('tableData', JSON.stringify(tableRowData));
    calculateTotals();
  }

  function checkAll(type) {
    const checkboxes = document.querySelectorAll(
      `input[type="checkbox"][name="${type}"]`
    );
    const checkAllCheckbox = document.getElementById(
      `checkAll${type.charAt(0).toUpperCase() + type.slice(1)}`
    );

    for (const checkbox of checkboxes) {
      if (checkbox.disabled || !checkbox.offsetParent) {
        continue; // Bỏ qua checkbox bị vô hiệu hóa
      }

      const row = checkbox.closest('tr');
      if (row.style.display == 'none') { // Kiểm tra nếu dòng hiện trên màn hình
        continue; // Gán trạng thái checkbox "Check All" cho checkbox hiển thị
      }

      checkbox.checked = checkAllCheckbox.checked; // Gán giá trị checked cho checkbox không bị vô hiệu hóa
    }
  }

  // Hàm để cập nhật trạng thái của checkbox "Check All" khi checkbox cá nhân được chọn
  function updateCheckAll(type) {
    const checkboxes = document.querySelectorAll(`input[type="checkbox"][name="${type}"]`);
    const checkAllCheckbox = document.getElementById(`checkAll${type.charAt(0).toUpperCase() + type.slice(1)}`);

    // Kiểm tra nếu tất cả checkbox cá nhân đều được chọn
    const allChecked = Array.from(checkboxes).every(checkbox => checkbox.checked);
    checkAllCheckbox.checked = allChecked; // Cập nhật trạng thái của checkbox "Check All"
  }


  function calculateTotals() {
    let totalQC = 0; // Reset tổng số tiết QC

    const rows = document.querySelectorAll('#tableBody tr'); // Lấy tất cả các hàng trong bảng

    rows.forEach((row) => {
      // Bỏ qua các hàng đang bị ẩn
      if (row.style.display === 'none') {
        return;
      }

      // Giả sử cột LL là cột thứ 2 và cột QuyChuan là cột thứ 3
      const QuyChuanCell = row.querySelector('td:nth-last-child(3)'); // Lấy ô của cột QuyChuan

      // Chuyển đổi giá trị của các ô thành số và cộng dồn
      const QuyChuan = parseFloat(QuyChuanCell.textContent) || 0;

      totalQC += QuyChuan; // Cộng dồn số tiết QC
    });

    // Cập nhật tổng số tiết vào HTML với 2 số sau dấu phẩy
    document.getElementById('totalQC').textContent = totalQC.toFixed(2);
  }
</script>
<script>
  async function submitData() {
    const isKhoa = localStorage.getItem("isKhoa");
    const role = localStorage.getItem("userRole");
    const MaPhongBan = localStorage.getItem("MaPhongBan");
    const GiangVien = localStorage.getItem("TenNhanVien");
    const rows = document.querySelectorAll('#tableBody tr'); // Lấy tất cả các hàng trong bảng
    const rowCount = rows.length;
    const globalData = [];

    rows.forEach((row, index) => {
      // Lấy checkbox "select"
      const selectCheckbox = row.querySelector('input[type="checkbox"][name="select"]');

      // Kiểm tra nếu checkbox bị disable, bỏ qua dòng này
      if (selectCheckbox && selectCheckbox.disabled) {
        return; // Bỏ qua dòng này nếu checkbox bị disable
      }

      const hinhThucKTGiuaKyInput = document.getElementById(`hinhThucKTGiuaKy_${index}`);
      const hinhThucKTGiuaKy = hinhThucKTGiuaKyInput ? hinhThucKTGiuaKyInput.value : '';

      const heSoT7CNInput = document.getElementById(`heSoT7CN_${index}`);
      const heSoT7CN = heSoT7CNInput ? heSoT7CNInput.value : '';


      console.log(hinhThucKTGiuaKy);
      console.log(heSoT7CN);

      // Lấy trạng thái của checkbox "select"
      const select = selectCheckbox ? selectCheckbox.checked : false;

      // Đẩy dữ liệu vào globalData
      globalData.push({
        hinhThucKTGiuaKy,
        heSoT7CN,
        select,
        MaGiangDay: row.dataset.id, // Thêm thông tin index vào để theo dõi
        GiangVien,
      });
      console.log(globalData);
    });

    // Gọi hàm update() sau khi đã thu thập tất cả dữ liệu
    update(globalData);
  }

  // Gửi dữ liệu lên server
  function update(globalData) {
    console.log('Dữ liệu gửi lên:', globalData);  // Kiểm tra dữ liệu trước khi gửi
    console.log("Hàm updateLopThiGk được gọi");
    fetch('/updatelopthigk', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(globalData) // Chuyển đổi globalData thành chuỗi JSON
    })
      .then(response => {
        if (!response.ok) {
          return response.json().then(err => {
            throw new Error(err.message || 'Lỗi khi gửi dữ liệu');
          });
        }
        return response.json(); // Chuyển đổi phản hồi thành JSON
      })
      .then(data => {
        console.log(data.message); // Thông báo khi dữ liệu gửi thành công
      })
      .catch(error => {
        console.error('Có lỗi xảy ra:', error);
        console.log(error.message);
      });
  }
</script>
<script>
  let currentRow; // Biến toàn cục để lưu hàng hiện tại

  function openNoteForm(row, GhiChu) {
    console.log(row, GhiChu);
    currentRow = row; // Lưu hàng hiện tại
    document.getElementById("noteForm").style.display = "block"; // Hiển thị form
    document.getElementById("modalBackdrop").style.display = "block"; // Hiển thị nền tối

    // Hiển thị giá trị ghi chú và hạn
    document.getElementById("noteInput").value = GhiChu || ""; // Hiển thị ghi chú
  }


  function closeNoteForm() {
    document.getElementById("noteForm").style.display = "none"; // Ẩn form
    document.getElementById("modalBackdrop").style.display = "none"; // Ẩn nền tối
  }
  window.onclick = function (event) {
    const modal = document.getElementById("noteForm");
    const modalBackdrop = document.getElementById("modalBackdrop");
    if (event.target === modalBackdrop) {
      closeNoteForm();
    }
  }
  async function saveNote() {
    const note = document.getElementById("noteInput").value;
    // const deadline = document.getElementById("deadlineInput").value;

    if (currentRow) {
      const id = currentRow.getAttribute("data-id"); // Lấy ID từ thuộc tính `data-id` của hàng

      // Kiểm tra ID có tồn tại
      if (id) {

        // Gửi dữ liệu đến API để lưu vào CSDL
        try {
          const response = await fetch('/savenotegk', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ id, ghiChu: note }),
          });
          const result = await response.json();
          if (!result.success) {
            alert("Lỗi khi lưu ghi chú vào CSDL: " + result.message);
          } else {
            alert("Cập nhật thành công");
          }
        } catch (error) {
          alert("Lỗi khi gửi yêu cầu đến server: " + error);
        }
      } else {
        alert("ID của hàng hiện tại không tồn tại.");
      }
    } else {
      alert("currentRow không được xác định.");
    }

    closeNoteForm();
  }
  async function doneNote() {
    const note = document.getElementById("noteInput").value;
    // const deadline = document.getElementById("deadlineInput").value;

    if (currentRow) {
      const id = currentRow.getAttribute("data-id"); // Lấy ID từ thuộc tính `data-id` của hàng

      // Kiểm tra ID có tồn tại
      if (id) {


        // Gửi dữ liệu đến API để lưu vào CSDL
        try {
          const response = await fetch('/donenotegk', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ id, ghiChu: note }),
          });
          const result = await response.json();
          if (!result.success) {
            alert("Lỗi khi lưu ghi chú vào CSDL: " + result.message);
          } else {
            alert("Cập nhật thành công");
          }
        } catch (error) {
          alert("Lỗi khi gửi yêu cầu đến server: " + error);
        }
      } else {
        alert("ID của hàng hiện tại không tồn tại.");
      }
    } else {
      alert("currentRow không được xác định.");
    }

    closeNoteForm();
  }


  // // Hàm để chuyển đổi định dạng ngày
  // function formatInputDate(dateString) {
  //   const date = new Date(dateString);
  //   const year = date.getFullYear();
  //   const month = String(date.getMonth() + 1).padStart(2, '0'); // Lấy tháng (0-11) và đảm bảo có 2 chữ số
  //   const day = String(date.getDate()).padStart(2, '0'); // Lấy ngày và đảm bảo có 2 chữ số

  //   return `${year}-${month}-${day}`; // Trả về định dạng yyyy-mm-dd cho input
  // }



  // Sự kiện click ngoài modal để đóng modal
  window.onclick = function (event) {
    const modal = document.getElementById("noteForm");
    const modalBackdrop = document.getElementById("modalBackdrop");
    if (event.target === modalBackdrop) {
      closeNoteForm();
    }
  }
</script>
<script>
  document.getElementById("infome").addEventListener("click", function (event) {
    event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
    const id_User = localStorage.getItem("id_User"); // Lấy id_User từ localStorage\
    if (id_User) {
      // Chuyển hướng đến trang infome và truyền id_User trong URL
      window.location.href = `/infome/${id_User}`;
    } else {
      alert("Không tìm thấy id_User trong localStorage.");
    }
  });
</script>


<script>
      document.addEventListener("DOMContentLoaded", () => {
        const role = localStorage.getItem("userRole");

        // Ẩn button ngay khi trang được tải
        const actionButton = document.getElementById('changeMessage');
        //Ẩn site thêm thông báo
        if (role === "Duyệt") {
          actionButton.style.display = '';
        } else {
          actionButton.style.display = 'none';
        }
      });
    </script>
  <script>
      document.getElementById("changeMessage").addEventListener("click", function(event) {
        event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
        const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

        if (MaPhongBan) {
            // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
            window.location.href = `/changeMessage/${MaPhongBan}`;
        } else {
            alert("Không tìm thấy MaPhongBan trong localStorage.");
        }
      });
    </script>
  </body>

</html>