<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link rel="stylesheet" href="/css/gvmList.css" />
    <link rel="stylesheet" href="/css/table.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />

    <style>
      /* Tùy chỉnh danh sách gợi ý */
      .ui-autocomplete {
        background: white;
        border: 1px solid #ccc;
        max-height: 200px;
        overflow-y: auto;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        font-size: 14px;
        padding: 5px;
        width: 200px;
        /* Giảm độ rộng */
        font-size: 12px !important;
      }

      /* Hiển thị đẹp hơn, không cần hover */
      .ui-menu-item {
        padding: 8px;
        cursor: default;
      }

      .ui-helper-hidden-accessible {
        display: none !important;
      }
    </style>
  </head>

  <body>
    <!-- Phần header -->
    <%- include('header') %>

    <!-- Phần nội dung -->

    <div class="container-fluid m-4 no-shadow-page">
      <div class="d-flex">
        <!-- Main content -->
        <div class="gvmList hd_du_kien_css">
          <div class="m-3 reCss">
            <h1>DANH SÁCH ĐÃ DUYỆT</h1>

            <div class="controls-container">
              <select
                class="form-select mx-1 selectop"
                style="width: max-content"
                id="MaPhongBan"
              >
                <option value="">Chọn khoa</option>
              </select>

              <button id="viewDataBtnDetail" class="btn mx-3">
                Xem dữ liệu
              </button>

              <input
                type="text"
                placeholder="Tìm kiếm theo Tên..."
                class="search"
                id="searchInput"
              />
              <input
                type="text"
                placeholder="Tìm kiếm theo Bộ môn"
                class="search"
                id="searchBoMon"
              />

              <button id="update-checked-list" class="btn mx-3 luu">
                Cập nhật
              </button>
            </div>

            <div id="tableContainer" style="display: none">
              <table
                id="dataTable"
                class="table table-striped table-hover table-bordered table-css"
              >
                <thead class="table-dark">
                  <tr>
                    <th>STT</th>
                    <th>Danh xưng</th>
                    <th>Họ tên</th>
                    <th>Ngày sinh</th>
                    <th>CCCD</th>
                    <th>Ngày cấp CCCD</th>
                    <th style="min-width: 150px">Địa chỉ</th>
                    <th>Học vị</th>
                    <th>Chức vụ</th>
                    <th style="display: none">Khoa</th>
                    <th style="min-width: 150px">Nơi công tác</th>
                    <th>Bộ môn</th>
                    <th>Xem</th>
                    <th id="tinhTrangGiangDayColumn">
                      <div class="form-check">
                        Giảng dạy
                        <input
                          class="form-check-input"
                          type="checkbox"
                          id="checkAllKhoa"
                          onclick="checkAll()"
                        />
                      </div>
                    </th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Dữ liệu sẽ được thêm vào đây bằng JavaScript -->
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Link script Sweet alert 2 -->
    <!-- SweetAlert2 CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css"
      rel="stylesheet"
    />

    <!-- SweetAlert2 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>

    <!-- auto complete -->
    <!-- Thêm jQuery và jQuery UI -->
    <link
      rel="stylesheet"
      href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"
    />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <!-- jQuery UI CSS -->
    <link
      rel="stylesheet"
      href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"
    />

    <script>
      // Hàm lọc chung
      function filterTable() {
        let nameInput = document
          .getElementById("searchInput")
          .value.toLowerCase();
        let boMonInput = document
          .getElementById("searchBoMon")
          .value.toLowerCase();

        let table = document.getElementById("dataTable");
        let tr = table.getElementsByTagName("tr");

        for (let i = 1; i < tr.length; i++) {
          // Bỏ qua hàng tiêu đề
          let nameCell = tr[i].getElementsByTagName("td")[3]; // Tên giảng viên
          let boMonCell = tr[i].getElementsByTagName("td")[11]; // Bộ môn

          // Lấy giá trị từ các ô
          let nameValue = nameCell ? nameCell.textContent.toLowerCase() : "";
          let boMonValue = boMonCell ? boMonCell.textContent.toLowerCase() : "";

          // Kiểm tra điều kiện lọc
          let nameMatch = nameValue.includes(nameInput);
          let boMonMatch = boMonValue.includes(boMonInput);

          // Hiện hoặc ẩn hàng dựa trên các điều kiện
          if (nameMatch && boMonMatch) {
            tr[i].style.display = ""; // Hiện hàng nếu tất cả các điều kiện đều khớp
          } else {
            tr[i].style.display = "none"; // Ẩn hàng nếu không khớp
          }
        }
      }

      // Gọi hàm lọc khi có thay đổi trong các ô tìm kiếm
      document
        .getElementById("searchInput")
        .addEventListener("keyup", filterTable);
      document
        .getElementById("searchBoMon")
        .addEventListener("keyup", filterTable);

      $(document).ready(function () {
        // Kiểm tra xem jQuery UI có được load không
        if (!$.fn.autocomplete) {
          console.error("jQuery UI Autocomplete chưa được load!");
          return;
        }

        // Cấu hình autocomplete
        $("#searchBoMon").autocomplete({
          source: function (request, response) {
            const value = request.term.toLowerCase();
            const khoaValue = $("#MaPhongBan").val() || "ALL";
            let boMon = JSON.parse(localStorage.getItem("boMon")) || [];

            let suggestions = boMon
              .filter(
                (item) => khoaValue === "ALL" || item.MaPhongBan === khoaValue
              )
              .map((item) => ({
                label: `${item.MaPhongBan} - ${item.TenBoMon} - ${item.MaBoMon}`,
                value: item.MaBoMon, // Chỉ lấy mã bộ môn khi chọn
              }));

            // Nếu có giá trị nhập vào thì lọc
            if (value) {
              suggestions = suggestions.filter((item) =>
                item.label.toLowerCase().includes(value)
              );
            }

            response(suggestions);
          },
          minLength: 0, // Hiển thị ngay khi nhấn vào ô input
          select: function (event, ui) {
            $("#searchBoMon").val(ui.item.value); // Chỉ lấy mã bộ môn
            filterTable();
            return false;
          },
          /*
          focus: function (event, ui) {
            $("#searchBoMon").val(ui.item.value); // Khi hover cũng hiển thị mã bộ môn
            return false;
          }, */
        });

        // Khi click vào ô input, hiển thị danh sách gợi ý ngay lập tức
        $("#searchBoMon").on("focus", function () {
          $(this).autocomplete("search", ""); // Gọi autocomplete với chuỗi rỗng để hiển thị toàn bộ
        });
      });
    </script>
    <script>
      function checkAll() {
        const checkboxes = document.querySelectorAll(
          `input[type="checkbox"][name="tinhTrangGiangDay"]`
        );
        const checkAllCheckbox = document.getElementById(`checkAllKhoa`);

        if (!checkAllCheckbox) return; // Kiểm tra nếu checkbox "Chọn tất cả" không tồn tại

        for (const checkbox of checkboxes) {
          if (checkbox.disabled || !checkbox.offsetParent) {
            continue; // Bỏ qua checkbox bị vô hiệu hóa hoặc bị ẩn hoàn toàn
          }

          checkbox.checked = checkAllCheckbox.checked; // Gán trạng thái checked cho checkbox hiển thị và không bị vô hiệu hóa
        }
      }

      // hàm xử lí check all
      function updateCheckAll() {
        const checkboxes = document.querySelectorAll(
          `input[type="checkbox"][name="tinhTrangGiangDay"]`
        );

        const checkAllCheckbox = document.getElementById(`checkAllKhoa`);

        if (!checkAllCheckbox) return; // Kiểm tra nếu checkbox "Chọn tất cả" không tồn tại
        if (checkboxes.length === 0) {
          checkAllCheckbox.checked = false;
          return;
        }

        // Kiểm tra nếu tất cả checkbox cá nhân đều được chọn
        const allChecked = Array.from(checkboxes).every(
          (checkbox) => checkbox.checked
        );
        checkAllCheckbox.checked = allChecked; // Cập nhật trạng thái của checkbox "Check All"
      }
    </script>
    <!-- phần dữ liệu để hiển thị trên bảng -->
    <script>
      // Biến toàn cục
      let globalData = {};

      // Lấy dữ liệu từ localStorage
      const role = localStorage.getItem("userRole");
      const MaPhongBan = localStorage.getItem("MaPhongBan");
      const isKhoa = localStorage.getItem("isKhoa");
      document.addEventListener("DOMContentLoaded", async function () {
        // Ẩn cột duyệt

        if (role !== APP_ROLES.lanhDao_khoa && role !== APP_ROLES.gv_cnbm) {
          const tinhTrangGiangDayColumn = document.getElementById(
            "tinhTrangGiangDayColumn"
          );

          tinhTrangGiangDayColumn.style.display = "none";
        }

        await fetchData();

        const viewDataBtnDetail = document.getElementById("viewDataBtnDetail");

        // Kích hoạt sự kiện click ngay khi trang load nếu là khoa
        requestAnimationFrame(() => {
          if (isKhoa == 1 && viewDataBtnDetail) {
            console.log("Tự động click nút viewDataBtnDetail");
            viewDataBtnDetail.click();
          }
        });

        viewDataBtnDetail.addEventListener("click", async function () {
          await getStoppedTeachingData();
        });
      });

      // Lấy dữ liệu
      const fetchData = async () => {
        try {
          const MaPhongBan = localStorage.getItem("MaPhongBan");

          try {
            const response = await fetch("/bo-mon", {
              method: "POST", // Thay đổi thành POST
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ MaPhongBan }), // Gửi MaPhongBan trong thân yêu cầu
            });

            if (!response.ok) {
              throw new Error(
                `Error: ${response.status} - ${response.statusText}`
              );
            }

            const data = await response.json(); // Chuyển đổi dữ liệu JSON
            localStorage.setItem("boMon", JSON.stringify(data));
            // Thêm vào bảng hoặc xử lý dữ liệu theo nhu cầu của bạn
          } catch (error) {
            console.error("Có lỗi xảy ra khi lấy dữ liệu bộ môn:", error);
          }
        } catch (error) {
          console.error("Error:", error);
          alert("Đã xảy ra lỗi khi tải dữ liệu");
        }
      };

      async function getStoppedTeachingData() {
        try {
          const khoa = document.getElementById("MaPhongBan").value;

          const response = await fetch(
            `/api/gvm/stopped-teaching-list/data?khoa=${encodeURIComponent(
              khoa
            )}`,
            {
              method: "GET",
              headers: { "Content-Type": "application/json" },
            }
          );

          if (!response.ok) throw new Error("Network response was not ok");

          const data = await response.json();
          await renderTable(data);
        } catch (error) {
          console.error("Error:", error);
          alert("Đã xảy ra lỗi khi tải dữ liệu");
        }
      }

      const renderTable = async (data) => {
        const tableContainer = document.getElementById("tableContainer");
        const dataTable = document.getElementById("dataTable");
        if (!dataTable) {
          console.error("Không tìm thấy bảng dataTable!");
          return;
        }

        const tbody = dataTable.querySelector("tbody");
        if (!tbody) {
          console.error("Không tìm thấy tbody trong bảng!");
          return;
        }

        if (data.length == 0) {
          tbody.innerHTML = `
              <tr>
                <td colspan="10" style="text-align: center;">Không có dữ liệu để hiển thị</td>
              </tr>`;
          return;
        }

        // Xóa dữ liệu cũ trong bảng
        tbody.innerHTML = "";

        document.querySelectorAll(".reCss").forEach((el) => {
          el.style.setProperty("margin-left", "0px", "important");
        });

        data.forEach((item, index) => {
          // Lưu dữ liệu để so sánh khi cập nhật (chỉ gửi những dòng có thay đổi)
          globalData[`${item.id_Gvm}`] = {
            TinhTrangGiangDay: item.TinhTrangGiangDay,
          };

          // Hiển thị dữ liệu
          const row = tbody.insertRow();
          let colIndex = 0; // Biến đếm cột

          const idCell = row.insertCell(colIndex++);
          idCell.textContent = item.id_Gvm;
          idCell.style.display = "none"; // Ẩn cột

          row.insertCell(colIndex++).textContent = index + 1; // STT
          row.insertCell(colIndex++).textContent =
            item.GioiTinh.toLowerCase() == "nam" ? "Ông" : "Bà";
          row.insertCell(colIndex++).textContent = item.HoTen;
          row.insertCell(colIndex++).textContent = item.NgaySinh
            ? new Date(item.NgaySinh).toLocaleDateString("vi-VN", {
                day: "2-digit",
                month: "2-digit",
                year: "numeric",
              })
            : "";
          row.insertCell(colIndex++).textContent = item.CCCD;
          row.insertCell(colIndex++).textContent = item.NgayCapCCCD
            ? new Date(item.NgayCapCCCD).toLocaleDateString("vi-VN", {
                day: "2-digit",
                month: "2-digit",
                year: "numeric",
              })
            : "";

          row.insertCell(colIndex++).textContent = item.DiaChi;
          row.insertCell(colIndex++).textContent = item.HocVi;
          row.insertCell(colIndex++).textContent = item.ChucVu;
          row.insertCell(colIndex++).textContent = item.NoiCongTac;
          row.insertCell(colIndex++).textContent = item.MonGiangDayChinh;

          // Cột hành động
          const cellActionView = row.insertCell(colIndex++);
          cellActionView.innerHTML = `
            <td>
                <button class="action-button view" onclick="viewClass(this, '${
                  parseInt(item.id_Gvm) - 1
                }')">👁️</button>
            </td>
            `;

          // Cột checkbox Học viện
          if (role === APP_ROLES.lanhDao_khoa || role === APP_ROLES.gv_cnbm_khoa) {
            const tinhTrangGiangDayTd = row.insertCell(colIndex++); // Thêm cột mới
            const tinhTrangGiangDay = document.createElement("input");
            tinhTrangGiangDay.type = "checkbox";
            tinhTrangGiangDay.name = "tinhTrangGiangDay";
            tinhTrangGiangDay.checked = item.hoc_vien_duyet; // Kiểm tra trạng thái duyệt
            tinhTrangGiangDay.onchange = () => updateCheckAll(); // Gọi hàm khi checkbox thay đổi

            tinhTrangGiangDayTd.appendChild(tinhTrangGiangDay);
          }
        });

        // Hiển thị bảng
        tableContainer.style.display = "block";
      };

      // Gắn sự kiện click cho nút
      document
        .getElementById("update-checked-list")
        .addEventListener("click", submitData);

      function submitData() {
        // Lấy dữ liệu để tiến hành cập nhật
        const updatedData = getUpdatedData();

        if (updatedData.length === 0) {
          Swal.fire({
            title: "Cảnh báo",
            text: "Không có dữ liệu thay đổi",
            icon: "warning",
            confirmButtonText: "OK",
            width: "auto", // Tự đ��ng điều chỉnh chiều rộng
            padding: "20px", // Giữ khoảng cách cho nội dung
          });
          return;
        }

        // Gửi dữ liệu lên server
        fetch("/api/gvm/stopped-teaching-list/update", {
          method: "PUT", // Phương thức PUT
          headers: {
            "Content-Type": "application/json", // Định dạng gửi là JSON
          },
          body: JSON.stringify(updatedData), // Chuyển đổi globalData thành chuỗi JSON
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Lỗi khi gửi dữ liệu");
            }
            return response.json(); // Chuyển đổi phản hồi thành JSON
          })
          .then((data) => {
            // Hiển thị thông báo từ server
            const messageWithLineBreaks = data.message.replace(/\n/g, "<br>");

            Swal.fire({
              title: "Thông báo",
              html: messageWithLineBreaks,
              icon: "success",
              confirmButtonText: "OK",
              width: "auto", // Tự động điều chỉnh chiều rộng
              padding: "20px", // Giữ khoảng cách cho nội dung
            });
          })
          .catch((error) => {
            console.error("Có lỗi xảy ra:", error);
            alert("Có lỗi xảy ra khi cập nhật dữ liệu.");
          });
      }

      function getUpdatedData() {
        const rows = document.querySelectorAll("#dataTable tbody tr");
        const updatedData = [];

        rows.forEach((row) => {
          const id_Gvm = row.cells[0].textContent;

          const TinhTrangGiangDay = row.querySelector(
            'input[name="tinhTrangGiangDay"]'
          ).checked
            ? 1
            : 0;

          // So sánh với trạng thái ban đầu
          if (globalData[id_Gvm].TinhTrangGiangDay !== TinhTrangGiangDay) {
            updatedData.push({
              id_Gvm,
              TinhTrangGiangDay: TinhTrangGiangDay,
            });
          }
        });

        return updatedData;
      }
    </script>

    <!-- <script src="/bootstrap/dist/js/jquery-3.7.1.min.js"></script> -->
    <script src="/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <script>
      // Chỉnh sửa gvm
      function editClass(button, index) {
        var hre = "/updateGvm/" + index;
        window.location.href = hre;
      }
      function viewClass(button, index) {
        var hre = "/viewGvm/" + index;
        window.location.href = hre;
      }
    </script>

    <script>
      $(document).ready(function () {
        const isKhoa = localStorage.getItem("isKhoa");
        if (isKhoa == 1) {
          document.getElementById("MaPhongBan").style.display = "none"; // JavaScript thuần
          return;
        }

        $('#MaPhongBan option[value=""]').remove();
        // Gọi AJAX để lấy dữ liệu JSON từ API
        $.ajax({
          url: "/api/TKB/getKhoaList", // Đường dẫn tới API getPhongBan
          method: "GET",
          success: function (response) {
            // Kiểm tra nếu response thành công
            const MaPhongBan = response.MaPhongBan;
            if (response.success) {
              $("#MaPhongBan").prepend(
                '<option value="ALL">Tất cả khoa</option>'
              );
              // Lặp qua từng mục trong mảng MaPhongBan
              response.MaPhongBan.forEach(function (item) {
                // Nếu item.MaPhongBan bằng boMon.MaPhongBan, hiển thị trước
                $("#MaPhongBan").append(
                  `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                );
              });

              // Nếu không có phòng ban nào tương ứng, bạn có thể thêm tùy chọn mặc định ở đây
              if (!$("#MaPhongBan option:selected").length) {
                $("#MaPhongBan").prepend(
                  '<option value="">Chọn Phòng Ban</option>'
                );
              }
            } else {
              console.error(
                "Không lấy được dữ liệu phongBan:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu phongBan:", error);
          },
        });
      });
    </script>
  </body>
</html>
