<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="/css/admin.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
  <link rel="stylesheet" href="/css/nckh.css" />
</head>

<body>
  <!-- Phần header -->
  <%- include('header') %>

    <div class="my-3 box formNckh">
      <h2 class="titleNckh">Đề tài, dự án</h2>

      <div class="tabs">
        <ul class="tabs-nav">
          <li class="tab-item">
            <a href="#formTab" class="tab-link" id="tab-form" onclick="toggleTabs(event, 'formTab', 'tab-form')">Nhập
            </a>
          </li>
          <li class="tab-item">
            <a href="#viewTab" class="tab-link" id="tab-view" onclick="toggleTabs(event, 'viewTab', 'tab-view')">Xem số
              giờ quy đổi</a>
          </li>
        </ul>
      </div>

      <!-- form tab -->
      <div id="formTab" class="tab-content py-4">
        <form id="formData" class="">
          <!-- Cấp đề tài và Năm học (cùng trên 1 dòng) -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="capDeTai">Cấp đề tài, dự án</label>
              <select id="capDeTai" name="capDeTai" required></select>
            </div>
            <div class="flex-item">
              <label for="namHocForm">Năm học</label>
              <select class="namHoc" id="namHocForm" name="namHoc" required>
                <!-- Các năm học sẽ được thêm vào đây bằng JavaScript -->
              </select>
            </div>
            <div class="flex-item">
              <label for="MaPhongBanForm">Khoa</label>
              <select id="MaPhongBanForm" class="MaPhongBan" style="width: 100% !important;" required>
              </select>
            </div>
          </div>

          <!-- Tên đề tài -->
          <div class="form-group">
            <label for="tenDeTai">Tên đề tài, dự án</label>
            <input type="text" id="tenDeTai" name="tenDeTai" placeholder="Nhập tên đề tài" required />
          </div>

          <!-- Mã đề tài -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="maDeTai">Mã số đề tài, dự án</label>
              <input type="text" id="maDeTai" name="maDeTai" placeholder="VD: 06/2022/CB" required />
            </div>
            <div class="flex-item">
              <label for="ngayNghiemThu">Ngày nghiệm thu</label>
              <input type="date" id="ngayNghiemThu" name="ngayNghiemThu" required />
            </div>
          </div>

          <!-- Chủ nhiệm -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="chuNhiem">
                Chủ nhiệm
                <input type="checkbox" id="chuNhiemCheckbox" name="chuNhiemCheckbox" />
                <span class="faded-text">(Check nếu là giảng viên ngoài viện và điền đơn vị công tác)</span>
              </label>
              <div id="chuNhiem-suggestions" class="suggestions-container"></div>
              <input type="text" id="chuNhiem" name="chuNhiem" placeholder="Nhập tên chủ nhiệm" required />
            </div>
            <div class="flex-item combo-box-wrapper">
              <label for="chuNhiemComboBox">Đơn vị</label>
              <input type="text" id="chuNhiemComboBox" name="chuNhiemComboBox" class="combo-box"
                placeholder="Nhập đơn vị" required />
            </div>
          </div>

          <!-- Thư ký -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="thuKy">
                Thư ký
                <input type="checkbox" id="thuKyCheckbox" name="thuKyCheckbox" />
              </label>
              <div id="thuKy-suggestions" class="suggestions-container"></div>
              <input type="text" id="thuKy" name="thuKy" placeholder="Nhập tên thư ký" required />
            </div>
            <div class="flex-item combo-box-wrapper">
              <label for="thuKyComboBox">Đơn vị</label>
              <input type="text" id="thuKyComboBox" name="thuKyComboBox" class="combo-box" placeholder="Nhập đơn vị"
                required />
            </div>
          </div>

          <!-- Thành viên -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="thanhVien">
                Thành viên
                <input type="checkbox" id="thanhVienCheckbox" name="thanhVienCheckbox" />
              </label>
              <div id="themThanhVien-suggestions" class="suggestions-container-dstv"></div>
              <input type="text" id="thanhVien" name="thanhVien" placeholder="Nhập tên thành viên" class="input-field"
                required />
            </div>
            <div class="flex-item combo-box-wrapper">
              <label for="thanhVienComboBox">Đơn vị</label>
              <input type="text" id="thanhVienComboBox" name="thanhVienComboBox" class="combo-box"
                placeholder="Nhập đơn vị" required />
            </div>
          </div>

          <div id="memberListDisplay" class="member-list-display form-group"></div>

          <button type="button" class="btn" id="submitBtn">Gửi</button>
        </form>
      </div>

      <!-- view tab  -->
      <div id="viewTab" class="tab-content py-4 hidden">
        <h2 class="titleNckh"></h2>
        <div class="flex-container-view">
          <div class="flex-item">
            <label for="namHocXem">Chọn Năm Học:</label>
            <select id="namHocXem" class="namHoc"></select>
          </div>
          <div class="flex-item">
            <label for="MaPhongBanView">Khoa</label>
            <select id="MaPhongBanView" class="MaPhongBan" style="width: 150px; height: 35px;"></select>
          </div>
          <div class="flex-item-view">
            <button onclick="getData()" class="btn text-nowrap" id="render">Hiển thị</button>
          </div>
        </div>

        <div class="table-container">
          <table border="1" class="table table-bordered">
            <thead id="table-header">
              <tr>
                <th>Cấp đề tài</th>
                <th>Tên đề tài</th>
                <th>Mã số đề tài</th>
                <th>Chủ nhiệm</th>
                <th>Thư ký</th>
                <th>Thành viên</th>
                <th>Ngày nghiệm thu</th>
                <th>Thao tác</th>
              </tr>
            </thead>
            <tbody id="table-body"></tbody>
          </table>
        </div>
      </div>
    </div>
    <!-- SweetAlert2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css" rel="stylesheet" />
    <!-- SweetAlert2 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- nckh view -->
    <script>
      // Hàm format để định dạng ngày từ ISO 8601
      function formatDate(dateString) {
        const date = new Date(dateString); // Tạo đối tượng Date từ chuỗi ISO 8601

        // Lấy ngày, tháng, năm từ đối tượng Date
        const day = String(date.getDate()).padStart(2, "0"); // Đảm bảo ngày có 2 chữ số
        const month = String(date.getMonth() + 1).padStart(2, "0"); // Tháng (0-indexed)
        const year = date.getFullYear(); // Lấy năm

        return `${day}/${month}/${year}`; // Trả về định dạng ngày/tháng/năm
      }

      function fixNumberFormat(text) {
        console.log(text)
        if (typeof text !== "string") return text; // Nếu không phải chuỗi, giữ nguyên
        return text.replace(/(\d),(\d{2})/g, "$1.$2"); // Chuyển "125,00" -> "125.00"
      }
      // render table
      function renderTable(data) {
        console.log("Dữ liệu trước khi render:", data);

        const tbody = document.getElementById("table-body");
        window.currentData = data; // Lưu dữ liệu hiện tại để sử dụng khi hủy

        // Xóa dữ liệu cũ
        tbody.innerHTML = "";

        // Duyệt qua dữ liệu và thêm từng hàng vào tbody
        data.forEach((item) => {
          const newItem = { ...item }; // Tạo bản sao để không sửa trực tiếp dữ liệu gốc

          // Sửa lỗi dấu phẩy trong các chuỗi chứa số giờ
          newItem.DanhSachThanhVien = fixNumberFormat(newItem.DanhSachThanhVien);
          newItem.ChuNhiem = fixNumberFormat(newItem.ChuNhiem);
          newItem.ThuKy = fixNumberFormat(newItem.ThuKy);

          const row = createTableRow(newItem);
          tbody.appendChild(row);
        });

        console.log("Dữ liệu sau khi sửa:", window.currentData);
      }

      function cancelEditMode(row, item) {
        row.replaceWith(createTableRow(item)); // Thay thế hàng đang chỉnh sửa bằng hàng gốc
      }

      function createTableRow(item) {
        const row = document.createElement("tr");
        row.setAttribute("data-id", item.ID);

        function createCell(value) {
          const cell = document.createElement("td");
          cell.textContent = value;
          return cell;
        }

        row.appendChild(createCell(item.CapDeTai));
        row.appendChild(createCell(item.TenDeTai));
        row.appendChild(createCell(item.MaSoDeTai));
        row.appendChild(createCell(fixNumberFormat(item.ChuNhiem)));
        row.appendChild(createCell(fixNumberFormat(item.ThuKy)));
        row.appendChild(createCell(item.DanhSachThanhVien.split(",").map(member => fixNumberFormat(member.trim())).join(", ")));
        row.appendChild(createCell(formatDate(item.NgayNghiemThu)));

        // Tạo nút sửa
        const editButton = document.createElement("button");
        editButton.classList.add("btn", "btn-edit"); // Thêm class
        editButton.textContent = "Sửa";
        editButton.addEventListener("click", () => enableEditMode(row, item));

        // Thêm nút sửa vào cuối hàng
        const actionCell = document.createElement("td");
        actionCell.appendChild(editButton);
        row.appendChild(actionCell);

        return row;
      }

      function enableEditMode(row, item) {
        const id = row.getAttribute("data-id");
        const originalRow = row.cloneNode(true); // Lưu lại dòng gốc để khôi phục khi hủy
        row.innerHTML = "";

        function createEditableCell(value, className) {
          const cell = document.createElement("td");
          const input = document.createElement("input");
          input.type = "text";
          input.value = value;
          input.className = className;
          cell.appendChild(input);
          return cell;
        }

        row.appendChild(createEditableCell(item.CapDeTai, `cap-detai-${id}`));
        row.appendChild(createEditableCell(item.TenDeTai, `ten-detai-${id}`));
        row.appendChild(createEditableCell(item.MaSoDeTai, `ma-so-detai-${id}`));
        row.appendChild(createEditableCell(fixNumberFormat(item.ChuNhiem), `chu-nhiem-${id}`));
        row.appendChild(createEditableCell(fixNumberFormat(item.ThuKy), `thu-ky-${id}`));
        row.appendChild(createEditableCell(item.DanhSachThanhVien.split(",").map(member => fixNumberFormat(member.trim())).join(", "), `danh-sach-thanh-vien-${id}`));
        row.appendChild(createEditableCell(formatDate(item.NgayNghiemThu), `ngay-nghiem-thu-${id}`));

        // Tạo nút lưu
        const saveButton = document.createElement("button");
        saveButton.textContent = "Lưu";
        saveButton.classList.add("btn", "btn-save"); // Thêm class
        saveButton.addEventListener("click", () => saveData(id));

        // Tạo nút hủy
        const cancelButton = document.createElement("button");
        cancelButton.textContent = "Hủy";
        cancelButton.classList.add("btn", "btn-cancel"); // Thêm class
        cancelButton.addEventListener("click", () => {
          row.replaceWith(createTableRow(item)); // Khôi phục lại dòng gốc với sự kiện đầy đủ
        });


        // Thêm nút lưu và hủy vào cuối hàng
        const actionCell = document.createElement("td");
        actionCell.appendChild(saveButton);
        actionCell.appendChild(cancelButton);
        row.appendChild(actionCell);
      }

      function convertDMYtoISO(dateString) {
        const parts = dateString.split("/");
        if (parts.length !== 3) return null;

        const [day, month, year] = parts.map(Number);
        if (isNaN(day) || isNaN(month) || isNaN(year)) return null;

        // Chuyển sang đối tượng Date (UTC để tránh lệch múi giờ)
        const date = new Date(Date.UTC(year, month - 1, day, 0, 0, 0));

        return date.toISOString(); // Output: YYYY-MM-DDTHH:mm:ss.sssZ
      }

      function cancelEditMode(row, item) {
        row.replaceWith(createTableRow(item)); // Thay thế hàng đang chỉnh sửa bằng hàng gốc
      }

      function saveData(id) {
        const MaBang = 'detaiduan'


        const updatedData = {
          CapDeTai: document.querySelector(`.cap-detai-${id}`).value,
          TenDeTai: document.querySelector(`.ten-detai-${id}`).value,
          MaSoDeTai: document.querySelector(`.ma-so-detai-${id}`).value,
          ChuNhiem: document.querySelector(`.chu-nhiem-${id}`).value,
          ThuKy: document.querySelector(`.thu-ky-${id}`).value,
          DanhSachThanhVien: document.querySelector(`.danh-sach-thanh-vien-${id}`).value,
          NgayNghiemThu: document.querySelector(`.ngay-nghiem-thu-${id}`).value
        };
        console.log(updatedData)

        // Gọi API cập nhật dữ liệu
        fetch(`/nckh/edit/${id}/${MaBang}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(updatedData),
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire({
                title: 'Thông báo',
                html: `${data.message}`,
                icon: 'success',
                confirmButtonText: 'OK',
                width: 'auto',
                padding: '20px',
                timer: 3000, // Tự động đóng sau 3 giây
                timerProgressBar: true, // Hiển thị thanh đếm thời gian
                didClose: () => {
                  cancelEditMode(document.querySelector(`[data-id='${id}']`), updatedData);
                }
              })
            }
          })
          .catch(error => console.error("Lỗi khi cập nhật dữ liệu:", error));
      }

      // Hàm để gửi yêu cầu đến server và hiển thị dữ liệu
      async function getData() {
        const year = document.getElementById("namHocXem").value; // Lấy năm học từ select
        const department = document.getElementById("MaPhongBanView").value; // Lấy năm học từ select
        const url = `/tabledetaiduan/${year}/${department}`; // Tạo URL với URL parameter 'NamHoc'

        try {
          fetch(url) // Thay URL bằng endpoint của bạn
            .then((response) => response.json())
            .then((data) => {
              renderTable(data); // Gọi hàm renderTable với dữ liệu từ server
            })
            .catch((error) => {
              console.error("Lỗi khi lấy dữ liệu:", error);
            });
        } catch (error) {
          console.error("Lỗi trong quá trình gửi yêu cầu:", error);
        }
      }
    </script>
    <!-- nckh form -->
    <script>
      // giảng viên cơ hữu của trường, để gợi ý tên
      var giangVienCoHuu = [];

      // check thì mới cho nhập đơn vị
      document.addEventListener("DOMContentLoaded", function () {
        // Lấy các checkbox và ô nhập đơn vị
        const chuNhiemCheckbox = document.getElementById("chuNhiemCheckbox");
        const thuKyCheckbox = document.getElementById("thuKyCheckbox");
        const thanhVienCheckbox = document.getElementById("thanhVienCheckbox");

        const chuNhiemComboBox = document.getElementById("chuNhiemComboBox");
        const thuKyComboBox = document.getElementById("thuKyComboBox");
        const thanhVienComboBox = document.getElementById("thanhVienComboBox");

        // Hàm disable hoặc enable ô nhập đơn vị
        function toggleComboBoxDisabled() {
          // Chủ nhiệm
          if (chuNhiemCheckbox.checked) {
            chuNhiemComboBox.disabled = false;
          } else {
            chuNhiemComboBox.disabled = true;
            chuNhiemComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }

          // Thư ký
          if (thuKyCheckbox.checked) {
            thuKyComboBox.disabled = false;
          } else {
            thuKyComboBox.disabled = true;
            thuKyComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }

          // Thành viên
          if (thanhVienCheckbox.checked) {
            thanhVienComboBox.disabled = false;
          } else {
            thanhVienComboBox.disabled = true;
            thanhVienComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }
        }

        // Disable các ô nhập đơn vị khi tải trang
        toggleComboBoxDisabled();

        // Thêm sự kiện thay đổi (change) cho các checkbox
        chuNhiemCheckbox.addEventListener("change", toggleComboBoxDisabled);
        thuKyCheckbox.addEventListener("change", toggleComboBoxDisabled);
        thanhVienCheckbox.addEventListener("change", toggleComboBoxDisabled);
      });

      // =================================================================

      // check thì tắt gợi ý
      document.addEventListener("DOMContentLoaded", function () {
        // Lấy các phần tử
        const chuNhiemInput = document.getElementById("chuNhiem");
        const chuNhiemSuggestions = document.getElementById(
          "chuNhiem-suggestions"
        );
        const chuNhiemCheckbox = document.getElementById("chuNhiemCheckbox");
        const thuKyCheckbox = document.getElementById("thuKyCheckbox");
        const thuKyInput = document.getElementById("thuKy");
        const thuKySuggestions = document.getElementById("thuKy-suggestions");
        const thanhVienCheckbox = document.getElementById("thanhVienCheckbox"); // Thành viên checkbox
        const thanhVienInput = document.getElementById("thanhVien"); // Thành viên input text
        const thanhVienSuggestions = document.getElementById(
          "themThanhVien-suggestions"
        ); // Thành viên gợi ý

        // Thêm sự kiện lắng nghe khi chuNhiemCheckbox thay đổi
        chuNhiemCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox chủ nhiệm được đánh dấu, ẩn phần gợi ý chủ nhiệm
            chuNhiemSuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý chủ nhiệm
            chuNhiemSuggestions.style.display = "block";
          }
        });

        // Thêm sự kiện lắng nghe khi thuKyCheckbox thay đổi
        thuKyCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox thư ký được đánh dấu, ẩn phần gợi ý thư ký
            thuKySuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý thư ký
            thuKySuggestions.style.display = "block";
          }
        });

        // Thêm sự kiện lắng nghe khi thanhVienCheckbox thay đổi
        thanhVienCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox thành viên được đánh dấu, ẩn phần gợi ý thành viên
            thanhVienSuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý thành viên
            thanhVienSuggestions.style.display = "block";
          }
        });
      });

      // =================================================================
      // thực hiện gắn hàm gợi ý khi load trang
      document.addEventListener("DOMContentLoaded", () => {
        // Hàm xử lý sự kiện nhập liệu
        function handleInput(inputId, suggestionId, comboBoxId, checkboxId) {
          const inputElement = document.getElementById(inputId);
          const suggestionContainer = document.getElementById(suggestionId);
          const comboBoxElement = document.getElementById(comboBoxId);
          const checkboxElement = document.getElementById(checkboxId); // Lấy checkbox
          const errorMessage = document.createElement("div");

          let isSuggestionSelected = false; // Biến theo dõi việc chọn gợi ý

          // Gợi ý khi người dùng nhập
          inputElement.addEventListener("input", () => {
            const query = inputElement.value.trim(); // Trim đầu và cuối chuỗi của input
            suggestionContainer.innerHTML = ""; // Xóa gợi ý cũ

            if (!checkboxElement.checked && query) {
              // Nếu checkbox không được chọn và có nhập liệu
              const suggestions = giangVienCoHuu.filter(
                (item) =>
                  item.HoTen.toLowerCase().trim().includes(query.toLowerCase()) // So sánh không phân biệt hoa thường
              );

              suggestions.forEach((item) => {
                const suggestionItem = document.createElement("div");
                suggestionItem.textContent = item.HoTen;
                suggestionItem.className = "suggestion-item";

                suggestionItem.addEventListener("click", () => {
                  // Điền tên và đơn vị vào input theo định dạng "Tên - Đơn vị"
                  const unit = comboBoxElement.value; // Lấy giá trị từ combo box
                  inputElement.value = `${item.HoTen.trim()} - KMA`; // Điền giá trị vào ô input
                  suggestionContainer.innerHTML = ""; // Xóa gợi ý sau khi chọn
                  isSuggestionSelected = true; // Đánh dấu là gợi ý đã được chọn
                  if (inputId == "thanhVien") {
                    addMember(inputElement.value);
                  }
                });

                suggestionContainer.appendChild(suggestionItem);
              });
            }
          });

          // Kiểm tra giá trị khi người dùng nhấn Enter hoặc click ra ngoài (blur)
          inputElement.addEventListener("blur", () => {
            // Nếu gợi ý đã được chọn, ngừng xử lý sự kiện blur
            if (isSuggestionSelected) {
              isSuggestionSelected = false; // Reset lại trạng thái
              return; // Không thực hiện cảnh báo
            }

            // Nếu checkbox được đánh dấu, cho phép nhấn Enter để nhập trực tiếp
            if (checkboxElement.checked) {
              const value = inputElement.value.trim(); // Trim input value (không chuyển thành lowercase)
              const isValid = giangVienCoHuu.some(
                (item) =>
                  item.HoTen.trim().toLowerCase() === value.toLowerCase() // So sánh không phân biệt hoa thường và trim cả hai đầu
              );
              // Không hiển thị cảnh báo nếu nhập không đúng nữa
            }
          });

          // Xử lý khi nhấn Enter
          inputElement.addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
              event.preventDefault(); // Ngừng hành động mặc định của phím Enter
              // Nếu checkbox được đánh dấu, tự động điền giá trị vào input và gọi addMember
              if (checkboxElement.checked) {
                const query = inputElement.value.trim();
                // Kiểm tra xem người dùng đã nhập tên hay chưa
                if (query) {
                  const unit = comboBoxElement.value; // Lấy giá trị từ combo box
                  inputElement.value = `${query} - ${unit}`; // Điền giá trị vào ô input theo định dạng "Tên - Đơn vị"
                  suggestionContainer.innerHTML = ""; // Xóa gợi ý sau khi nhấn Enter

                  if (inputId == "thanhVien") {
                    addMember(inputElement.value);
                  }
                }
              }
            }
          });

          // Ngăn chặn sự kiện blur khi đang hiển thị gợi ý
          inputElement.addEventListener("focus", () => {
            suggestionContainer.innerHTML = ""; // Dọn gọn gợi ý cũ khi focus lại vào input
          });

          // Ẩn gợi ý nếu checkbox được chọn
          checkboxElement.addEventListener("change", () => {
            if (checkboxElement.checked) {
              suggestionContainer.innerHTML = ""; // Ẩn gợi ý
            }
          });
        }

        // Gọi hàm cho từng cặp ô nhập liệu và container gợi ý, truyền thêm combo box và checkbox
        handleInput(
          "chuNhiem",
          "chuNhiem-suggestions",
          "chuNhiemComboBox",
          "chuNhiemCheckbox"
        );
        handleInput(
          "thuKy",
          "thuKy-suggestions",
          "thuKyComboBox",
          "thuKyCheckbox"
        );
        handleInput(
          "thanhVien",
          "themThanhVien-suggestions",
          "thanhVienComboBox",
          "thanhVienCheckbox"
        );
      });
      // =================================================================

      // lấy dữ liệu giảng viên cơ hữu
      document.addEventListener("DOMContentLoaded", async () => {
        try {
          const response = await fetch("/giangviencohuu"); // Gọi API
          if (!response.ok) {
            throw new Error("Không thể lấy dữ liệu từ API.");
          }

          // Thông báo nếu cần (chỉnh sửa alert nếu cần)
          // alert("Dữ liệu đã được tải thành công!");

          // Chuyển đổi dữ liệu sang JSON
          const data = await response.json();
          console.log(data);

          // Gán dữ liệu vào mảng giangVienCoHuu
          giangVienCoHuu = data;
        } catch (error) {
          console.error("Lỗi khi gọi API:", error);
        }
      });

      // gửi form lên sv
      document
        .getElementById("submitBtn")
        .addEventListener("click", function () {
          // Lấy dữ liệu từ form
          const formData = {
            capDeTai: document.getElementById("capDeTai").value,
            namHoc: document.getElementById("namHocForm").value,
            tenDeTai: document.getElementById("tenDeTai").value,
            maDeTai: document.getElementById("maDeTai").value,
            chuNhiem: document.getElementById("chuNhiem").value,
            thuKy: document.getElementById("thuKy").value,
            ngayNghiemThu: document.getElementById("ngayNghiemThu").value,
            khoa: document.getElementById("MaPhongBanForm").value,
            thanhVien: Array.from(
              document.querySelectorAll("#memberListDisplay span")
            ).map((member) => member.textContent),
          };

          let missing = 0;

          for (let key of Object.keys(formData)) {
            if (!formData[key]) {
              missing++;
            }
          }

          if (missing > 0) {
            alert("Vui lòng nhập đủ thông tin");
            return;
          }


          // Gửi dữ liệu lên server
          fetch("/detaiduan", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Gửi dữ liệu thất bại!");
              }
              return response.json();
            })
            .then((data) => {
              if (data.success) {
                Swal.fire({
                  title: 'Thông báo',
                  html: `${data.message}`,
                  icon: 'success',
                  confirmButtonText: 'OK',
                  width: 'auto',
                  padding: '20px',
                  timer: 3000, // Tự động đóng sau 3 giây
                  timerProgressBar: true, // Hiển thị thanh đếm thời gian
                  didClose: () => {
                    document.getElementById("formData").reset();
                    document.getElementById("memberListDisplay").innerHTML = "";
                    members = [];
                    location.reload();
                  }
                })
              }
            })
            .catch((error) => {
              console.error("Lỗi:", error);
              alert("Có lỗi xảy ra: " + error.message);
            });
        });

      // Xử lý ô nhập thư ký và combobox
      document
        .getElementById("capDeTai")
        .addEventListener("change", function () {
          const capDeTai = this.value; // Lấy giá trị cấp đề tài đã chọn
          const thukiInput = document.getElementById("thuKy"); // Lấy ô nhập thư ký
          const thuKyComboBox = document.getElementById("thuKyComboBox"); // Lấy combobox đơn vị

          // Kiểm tra nếu cấp đề tài là "Cơ sở, Học viện"
          if (capDeTai === "Cơ sở, Học viện") {
            // Vô hiệu hóa ô nhập thư ký và combobox
            thukiInput.disabled = true;
            thukiInput.value = ""; // Xóa giá trị đã nhập trong ô nhập thư ký
            thuKyComboBox.disabled = true; // Vô hiệu hóa combobox
          } else {
            // Kích hoạt lại ô nhập thư ký và combobox
            thukiInput.disabled = false;
            thuKyComboBox.disabled = false;
          }
        });

      // =================================================================
      let members = [];
      // Hàm thêm thành viên vào mảng member để hiển thị
      function addMember(memberName) {
        if (memberName) {
          // Thêm thành viên vào mảng members
          console.log(memberName);
          members.push(memberName);
          // Cập nhật danh sách thành viên hiển thị trên form
          updateFormMemberList();
          // Xóa nội dung ô input sau khi thêm thành viên
          document.getElementById("thanhVien").value = "";
        }
      }
      // Hàm cập nhật danh sách thành viên và hiển thị lên form
      function updateFormMemberList() {
        const memberListDisplay = document.getElementById("memberListDisplay");
        memberListDisplay.innerHTML = ""; // Xóa danh sách cũ
        // Duyệt qua mảng members để hiển thị từng thành viên
        members.forEach((member, index) => {
          const memberContainer = document.createElement("div");
          memberContainer.style.display = "flex"; // Đảm bảo các phần tử được hiển thị trên cùng một dòng
          memberContainer.style.alignItems = "center"; // Căn giữa tên và nút xóa
          memberContainer.style.justifyContent = "space-between"; // Đảm bảo tên thành viên và nút xóa được căn lề
          // Tạo phần tử hiển thị tên thành viên
          const span = document.createElement("span");
          span.textContent = member;
          span.style.flexGrow = 1; // Cho phép tên thành viên chiếm hết không gian còn lại trong div
          // Thêm nút xóa cho từng thành viên
          const removeButton = document.createElement("button");
          removeButton.innerHTML = '<i class="fa fa-times"></i>';
          removeButton.onclick = () => removeMember(index); // Gắn sự kiện xóa
          // Thêm tên thành viên và nút xóa vào giao diện
          memberContainer.appendChild(span);
          memberContainer.appendChild(removeButton);
          // Thêm container chứa thành viên vào danh sách hiển thị
          memberListDisplay.appendChild(memberContainer);
        });
      }
      // Hàm xóa thành viên
      function removeMember(index) {
        console.log("xóa");
        members.splice(index, 1); // Xóa thành viên khỏi mảng
        updateFormMemberList(); // Cập nhật lại danh sách hiển thị
      }
      // =================================================================
    </script>
    <!-- lấy dữ liệu vào thẻ cấp đề tài dự án -->
    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        try {
          const response = await fetch("/data/detaiduan"); // Gọi API
          if (!response.ok) {
            throw new Error("Không thể lấy dữ liệu từ API.");
          }

          // Chuyển đổi dữ liệu sang JSON
          const data = await response.json();
          console.log(data);

          // Lấy thẻ select
          const selectElement = document.getElementById("capDeTai");

          // Xóa các option cũ (nếu có)
          selectElement.innerHTML = "";

          // Thêm option mới từ dữ liệu API
          data.forEach(item => {
            const option = document.createElement("option");
            option.value = item.CapDeTaiDuAn; // Giá trị option
            option.textContent = item.CapDeTaiDuAn; // Nội dung hiển thị
            selectElement.appendChild(option);
          });

        } catch (error) {
          console.error("Lỗi khi gọi API:", error);
        }
      });
    </script>

    <!-- nckh tab chuyển tab -->
    <script src="/js/nckh/nckh.js"></script>
    <!-- link href -->
    <script src="/js/nckh/href.js"></script>
    <!-- srcipt năm học, khoa -->
    <script src="/js/nckh/getdata.js"></script>

</body>

</html>