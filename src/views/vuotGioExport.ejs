<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/forminput.css">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
  <!-- <link rel="stylesheet" href="public/css/styles.css"> -->
  <style>
    .teacher-group {
      border: 2px solid black;
      /* Viền đen xung quanh nhóm giảng viên */
      border-collapse: separate;
      margin-bottom: 10px;
    }

    .teacher-group td,
    .teacher-group th {
      padding: 8px;
      text-align: left;
      border: 2px solid black;
      /* Viền đen xung quanh nhóm giảng viên */

    }

    .suggestions {
      position: absolute;
      /* Đảm bảo gợi ý nằm bên trên các thành phần khác */
      top: calc(100% + 5px);
      /* Đặt gợi ý phía trên input với một khoảng cách */
      font-size: 12px;
      left: 0;
      background-color: #f0f0f0;
      color: #000;
      border: 1px solid #ccc;
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      /* Đảm bảo gợi ý nằm trên các thành phần khác */
      border-radius: 4px;
      max-height: 300px;
      overflow-y: auto;
    }

    /* Hiệu ứng lung linh khi hover */
    .suggestions:hover {
      background-color: #e0e0e0;
      /* Thay đổi màu nền khi hover */
      box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
      /* Tăng độ bóng khi hover */
    }


    /* CSS cho từng mục gợi ý */
    .suggestion-item {
      padding: 8px 12px;
      /* Khoảng cách bên trong từng mục */
      cursor: pointer;
      /* Con trỏ chuột thay đổi khi hover */
      transition: background-color 0.2s ease;
      /* Tạo hiệu ứng chuyển đổi mượt mà khi hover */
    }

    /* Hiệu ứng khi người dùng di chuột vào mục gợi ý */
    .suggestion-item:hover {
      background-color: #f0f0f0;
      /* Màu nền khi hover */
    }

    /* Đặt lại một số thuộc tính khi input mất focus */
    input:focus+.suggestions {
      display: block;
      /* Đảm bảo khung hiển thị khi input được focus */
    }

    /* Đảm bảo container gợi ý không bị tràn ra ngoài khung nếu có */
    .suggestions {
      overflow: hidden;
    }

    #search-teacher {
      margin-top: 20px;
      /* Hạ thấp ô tìm kiếm giảng viên xuống 1 pixel */
    }

    #exportButton {
      margin-top: 35px;
      /* Hạ thấp nút xuất xuống 2 pixel */
    }
  </style>
</head>

<body>

  <!-- Phần header -->
  <%- include('header') %>

  <!-- Phần nội dung -->
  <div class="container mt-4">
    <div class="col-12">
      <!-- Tiêu đề -->
      <h2 class="text-center mb-4">Thông tin vượt giờ</h2>

      <!-- Container chính -->
      <div class="controls-container d-flex align-items-center">
        <!-- <select class="form-select w-100px mx-2 selectop" id="combobox-dot">
          <option value="1">Đợt 1</option>
          <option value="2">Đợt 2</option>
        </select>

        <select class="form-select w-100px mx-2 selectop" id="combobox-ki">
          <option value="1">Kỳ 1</option>
          <option value="2">Kỳ 2</option>
        </select> -->

        <select class="form-select w-100px mx-2 selectop" style="width: max-content !important;" id="NamHoc">
          <option value="">Năm học</option>
        </select>
        <select class="form-select w-100px mx-1 selectop" style="width: max-content !important;" id="MaPhongBan">
          <option value="">Chọn khoa</option>
        </select>

        <input type="text" class="form-control w-200px mx-2" id="search-teacher" oninput="showSuggestionsGvm(this)"
          onclick="showSuggestionsGvm(this)" placeholder="Tìm kiếm giảng viên" style="height: 45px;">

        <div class="d-flex justify-content-center">
          <!-- Nút xuất dữ liệu với style được cải thiện -->
          <button id="exportButton" class="btn btn-primary btn-lg hover-shadow">
            <i class="fas fa-file-export me-2"></i>
            Xuất dữ liệu
          </button>
        </div>


        <script>
          // Nhấn nút Xuất dữ liệu
          document.getElementById('exportButton').addEventListener('click', function () {
            // Thu thập giá trị từ các trường input
            const namHoc = document.getElementById("NamHoc").value.trim();
            const khoa = document.getElementById("MaPhongBan").value.trim();
            const teacherName = document.getElementById("search-teacher").value.trim();
        
            // Kiểm tra thông tin bắt buộc: Năm học
            if (!namHoc) {
              alert("Vui lòng chọn năm học.");
              return;
            }
        
            // Khởi tạo URL cơ bản với thông tin năm học
            let url = `/api/export-vuot-gio?namHoc=${encodeURIComponent(namHoc)}`;
        
            // Thêm tham số khoa nếu được chọn
            if (khoa) {
              url += `&khoa=${encodeURIComponent(khoa)}`;
            }
        
            // Thêm tham số tên giảng viên nếu có
            if (teacherName) {
              url += `&teacherName=${encodeURIComponent(teacherName)}`;
            }
        
            // Chuyển hướng tới URL để tải file
            window.location.href = url;
          });
        </script>





        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

        <script>
          const Home = document.getElementById("Home");
          Home.addEventListener("click", function (event) {
            event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

            const isKhoa = localStorage.getItem("isKhoa")

            if (isKhoa == 0) { // Nếu là đào tạo hoặc tài chính
              window.location.href = "/maindt";
            } else {
              window.location.href = "/mainkhoa";
            }
          });
        </script>

        <script>
          document.getElementById("infome").addEventListener("click", function (event) {
            event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
            const id_User = localStorage.getItem("id_User"); // Lấy id_User từ localStorage\
            if (id_User) {
              // Chuyển hướng đến trang infome và truyền id_User trong URL
              window.location.href = `/infome/${id_User}`;
            } else {
              alert("Không tìm thấy id_User trong localStorage.");
            }
          });
        </script>
        <script>
          $(document).ready(function () {
            $('#NamHoc option[value=""]').remove();
            $('#combobox-ki option[value=""]').remove();
            $('#combobox-dot option[value=""]').remove();

            $.ajax({
              url: '/getNamHoc',
              method: 'GET',
              success: function (response) {
                if (response.success) {

                  response.NamHoc.forEach(function (item) {
                    console.log(item.NamHoc);
                    $('#NamHoc').append(
                      `<option value="${item.NamHoc}">${item.NamHoc}</option>`
                    );
                  });

                  response.Ki.forEach(function (item) {
                    console.log(item.Ki);
                    $('#combobox-ki').append(
                      `<option value="${item.value}">${item.Ki}</option>`
                    );
                  });
                  response.Dot.forEach(function (item) {
                    console.log(item.Dot);
                    $('#combobox-dot').append(
                      `<option value="${item.value}">${item.Dot}</option>`
                    );
                  });
                } else {
                  console.error("Không lấy được dữ liệu năm học:", response.message);
                }
              },
              error: function (error) {
                console.error("Lỗi khi lấy dữ liệu năm học:", error);
              }
            });
          });
        </script>
        
        <script>
          $(document).ready(function () {
            $('#MaPhongBan option[value=""]').remove();
        
            // Lấy thông tin role và MaPhongBan từ localStorage
            const userRole = localStorage.getItem("userRole");
            const userMaPhongBan = localStorage.getItem("MaPhongBan");
        
      
            // Gọi AJAX để lấy dữ liệu JSON từ API
            $.ajax({
              url: '/getPhongBan', // Đường dẫn tới API getPhongBan
              method: 'GET',
              success: function (response) {
                // Kiểm tra nếu response thành công
                if (response.success) {
                  // Nếu role không phải là GV, GV_CNBM, hoặc Lãnh đạo khoa, thêm tùy chọn "Tất cả khoa"
                  if (!["GV", "GV_CNBM", "Lãnh đạo khoa"].includes(userRole)) {
                    $('#MaPhongBan').prepend('<option value="ALL">Tất cả khoa</option>');
                  }
        
                  // Lặp qua từng mục trong mảng MaPhongBan
                  response.MaPhongBan.forEach(function (item) {
                    const displayMaPhongBan = transformMaPhongBan(item.MaPhongBan);
        
                    // Nếu role là GV, GV_CNBM, hoặc Lãnh đạo khoa, chỉ hiển thị khoa của giảng viên
                    if (["GV", "GV_CNBM", "Lãnh đạo khoa"].includes(userRole)) {
                      if (item.MaPhongBan === userMaPhongBan) {
                        $('#MaPhongBan').append(
                          `<option value="${item.MaPhongBan}">${displayMaPhongBan}</option>`
                        );
                      }
                    } else {
                      // Nếu không, hiển thị tất cả các khoa
                      $('#MaPhongBan').append(
                        `<option value="${item.MaPhongBan}">${displayMaPhongBan}</option>`
                      );
                    }
                  });
        
                  // Nếu không có phòng ban nào tương ứng, bạn có thể thêm tùy chọn mặc định ở đây
                  if (!$('#MaPhongBan option:selected').length) {
                    $('#MaPhongBan').prepend('<option value="">Chọn Phòng Ban</option>');
                  }
                } else {
                  console.error("Không lấy được dữ liệu phongBan:", response.message);
                }
              },
              error: function (error) {
                console.error("Lỗi khi lấy dữ liệu phongBan:", error);
              }
            });
          });
        </script>
        <script>
          // Hàm để lấy danh sách giảng viên từ API
          async function fetchGiangVienList() {
              try {
                  const response = await fetch('/api/giangvien'); // Gọi API
                  if (!response.ok) {
                      throw new Error('Network response was not ok');
                  }
                  const gvmList = await response.json(); // Chuyển đổi dữ liệu thành JSON
                  return gvmList;
              } catch (error) {
                  console.error("Error fetching giang vien list:", error);
                  return []; // Trả về mảng rỗng nếu có lỗi
              }
          }
      
          async function showSuggestionsGvm(input) {
    const value = input.value.toLowerCase(); // Lấy giá trị nhập vào và chuyển thành chữ thường
    hideSuggestionsGvm(); // Ẩn gợi ý cũ trước khi hiển thị gợi ý mới

    // Tạo thẻ div chứa gợi ý
    const suggestionsContainer = document.createElement('div');
    suggestionsContainer.className = 'suggestions'; // Đặt class cho khung gợi ý

    // Đặt vị trí cho suggestionsContainer
    const { bottom, left, width } = input.getBoundingClientRect();
    suggestionsContainer.style.position = 'absolute';
    suggestionsContainer.style.top = `${bottom + window.scrollY}px`;
    suggestionsContainer.style.left = `${left + window.scrollX}px`;
    suggestionsContainer.style.width = `${width}px`;
    suggestionsContainer.style.zIndex = '1000';
    suggestionsContainer.style.maxHeight = '200px';
    suggestionsContainer.style.overflowY = 'auto';

    // Thêm suggestionsContainer vào DOM
    document.body.appendChild(suggestionsContainer);

    let suggestions = []; // Khởi tạo mảng gợi ý

    // Lấy danh sách giảng viên từ API
    const gvmList = await fetchGiangVienList();
    console.log("Danh sách =", gvmList);
    suggestions = gvmList.map(item => `${item.TenNhanVien} - ${item.MaPhongBan}`);

    console.log("value=", value);

    // Nếu người dùng nhập dữ liệu, lọc kết quả theo tên giảng viên
    if (value) {
        suggestions = suggestions.filter(name => name.toLowerCase().includes(value));
    }

    // Nếu không có gợi ý, ẩn container
    if (suggestions.length === 0) {
        suggestionsContainer.remove();
        return;
    }

    // Tạo gợi ý dưới dạng danh sách
    suggestions.forEach(name => {
        const suggestionItem = document.createElement('div');
        suggestionItem.className = 'suggestion-item';
        suggestionItem.textContent = name;

        // Thêm sự kiện click để điền tên vào ô input
        suggestionItem.onclick = function () {
            const name = suggestionItem.innerText;
            const dashIndex = name.indexOf("-");
            let processedName = name;

            if (dashIndex !== -1) {
                processedName = name.slice(0, dashIndex).trim();
            }

            input.value = processedName;
            hideSuggestionsGvm(); // Ẩn gợi ý sau khi chọn
        };

        suggestionsContainer.appendChild(suggestionItem);
    });

    // Ẩn gợi ý khi input không còn focus
    input.onblur = function () {
        setTimeout(() => {
            hideSuggestionsGvm();
        }, 100);
    };
}

// Hàm ẩn gợi ý
function hideSuggestionsGvm() {
    const existingSuggestions = document.querySelectorAll('.suggestions');
    existingSuggestions.forEach(suggestion => suggestion.remove());
}

</script>

<script>
      document.addEventListener("DOMContentLoaded", () => {
        const role = localStorage.getItem("userRole");

        // Ẩn button ngay khi trang được tải
        const actionButton = document.getElementById('changeMessage');
        //Ẩn site thêm thông báo
        if (role === "Duyệt") {
          actionButton.style.display = '';
        } else {
          actionButton.style.display = 'none';
        }
      });
    </script>
  <script>
      document.getElementById("changeMessage").addEventListener("click", function(event) {
        event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
        const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

        if (MaPhongBan) {
            // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
            window.location.href = `/changeMessage/${MaPhongBan}`;
        } else {
            alert("Không tìm thấy MaPhongBan trong localStorage.");
        }
      });
    </script>
  </body>

</html>