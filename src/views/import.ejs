<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="/css/table.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="/css/import.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
</head>
<style>
  .btn {
    height: 45px;
    margin-bottom: 0px;
    text-wrap: nowrap;
  }
</style>

<body>
  <!-- Phần header -->
  <%- include('header') %>

    <!-- Phần nội dung -->

    <div class="container-fluid m-4 box d-flex justify-content-start">
      <div class="mx-2">
        <div class="d-flex align-items-center mb-3">
          <button class="btn mx-2" id="chooseFile">Chọn file</button>
          <!-- Combo box Đợt -->
          <!-- Combo box Đợt -->
          <select class="selectop mx-1" id="combobox-dot">
            <option value="">Đợt</option>
          </select>

          <!-- Combo box kì -->
          <select class="selectop mx-1" id="comboboxki">
            <option value="">Kỳ</option>
          </select>

          <!-- Combo box Năm -->
          <select class="selectop mx-1" id="NamHoc">
            <option value="">Chọn năm học</option>
          </select>

          <!-- Combo box với các giá trị CNTT, ATTT, DTVT -->
          <select class="selectop" id="MaPhongBan">
            <option value="ALL">Tất cả khoa</option>
          </select>
          <button class="btn mx-2" id="import">Thêm</button>
          <button class="btn mx-2" id="viewtam">Bảng qc dự kiến</button>
        </div>

        <div id="action-modal" style="display: none">
          <div style="
              position: fixed;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: rgba(0, 0, 0, 0.6);
              display: flex;
              justify-content: center;
              align-items: center;
              z-index: 10000000000;
            ">
            <div style="
                background: #ffffff;
                padding: 25px;
                border-radius: 12px;
                max-width: 450px;
                width: 90%;
                text-align: center;
                box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.2);
              ">
              <p id="modal-message" style="font-size: 16px; color: #333; margin-bottom: 20px">
                Đây là nội dung của modal.
              </p>
              <button id="btn-delete" style="
                  background-color: #e74c3c;
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  margin: 5px;
                  border-radius: 6px;
                  cursor: pointer;
                  font-size: 14px;
                  transition: background-color 0.3s;
                " onmouseover="this.style.backgroundColor='#c0392b'" onmouseout="this.style.backgroundColor='#e74c3c'">
                Xóa
              </button>
              <button id="btn-append" style="
                  background-color: #3498db;
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  margin: 5px;
                  border-radius: 6px;
                  cursor: pointer;
                  font-size: 14px;
                  transition: background-color 0.3s;
                " onmouseover="this.style.backgroundColor='#2980b9'" onmouseout="this.style.backgroundColor='#3498db'">
                Chèn
              </button>
              <button id="btn-cancel" style="
                  background-color: #95a5a6;
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  margin: 5px;
                  border-radius: 6px;
                  cursor: pointer;
                  font-size: 14px;
                  transition: background-color 0.3s;
                " onmouseover="this.style.backgroundColor='#7f8c8d'" onmouseout="this.style.backgroundColor='#95a5a6'">
                Hủy
              </button>
            </div>
          </div>
        </div>

        <div id="dataTableContainer" class="h-75"></div>
      </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Link script Sweet alert 2 -->
    <!-- SweetAlert2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css" rel="stylesheet" />

    <!-- SweetAlert2 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>

    <script>
      document.getElementById("viewtam").onclick = function () {
        window.location.href = "/tableTam"; // Thay URL bằng trang bạn muốn chuyển hướng đến
      };
    </script>
    <!-- phần chọn file -->
    <script>
      let dataTam = [];

      function renderTable(data) {
        // Nếu không có dữ liệu, hiển thị thông báo
        if (!data || data.length === 0) {
          document.getElementById("dataTableContainer").innerHTML = "Không có dữ liệu để hiển thị.";
          return;
        }

        // Lấy tiêu đề từ đối tượng JSON đầu tiên (bỏ qua cột "Ghi chú")
        const headers = Object.keys(data[0]);

        // Tạo phần tử <table> và thêm các class cần thiết
        const table = document.createElement("table");
        table.className = "table table-bordered";

        // Tạo phần thead và thêm tiêu đề cột
        const thead = document.createElement("thead");
        const headerRow = document.createElement("tr");
        headers.forEach(header => {
          const th = document.createElement("th");
          th.textContent = header;
          headerRow.appendChild(th);
        });
        thead.appendChild(headerRow);
        table.appendChild(thead);

        // Tạo phần tbody và thêm các hàng dữ liệu
        const tbody = document.createElement("tbody");
        data.forEach(item => {
          const row = document.createElement("tr");
          headers.forEach(key => {
            const td = document.createElement("td");
            // Kiểm tra nếu giá trị không phải là null thì hiển thị, ngược lại hiển thị chuỗi rỗng
            td.textContent = item[key] !== null ? item[key] : "";
            row.appendChild(td);
          });
          tbody.appendChild(row);
        });
        table.appendChild(tbody);

        // Render bảng vào phần tử container, xóa nội dung cũ nếu có
        const container = document.getElementById("dataTableContainer");
        container.innerHTML = ""; // Xóa nội dung cũ
        container.appendChild(table);
      }

      document
        .getElementById("chooseFile")
        .addEventListener("click", function () {
          // Tạo một input để chọn file
          const fileInput = document.createElement("input");
          fileInput.type = "file";
          fileInput.accept = ".xlsx,.docx,.pdf"; // Cho phép chọn file Excel và Word

          // Khi có file được chọn
          fileInput.addEventListener("change", function () {
            const selectedFile = fileInput.files[0];

            // if (!selectedFile) {
            //   alert("Bạn chưa chọn tệp nào.");
            //   return;
            // }

            const formData = new FormData();
            formData.append("file", selectedFile); // Đặt tên chung là "file"

            // Gửi yêu cầu POST đến server
            fetch("/import", {
              method: "POST",
              body: formData,
            })
              .then((response) => {
                if (!response.ok) {
                  throw new Error("Import thất bại");
                }
                return response.json(); // Chuyển đổi phản hồi sang JSON
              })
              .then((data) => {
                if (!data || data.length === 0) {
                  throw new Error("Dữ liệu trả về trống");
                }
                console.log("Dữ liệu thô từ server:", data);

                renderTable(data)
                // Lưu dữ liệu JSON để sử dụng sau
                dataTam = data; // Lưu vào biến toàn cục
              })
              .catch((error) => {
                console.error(error);
              });
          });

          // Tự động mở dialog chọn file
          fileInput.click();
        });
    </script>

    <!-- phần xử lí thêm vào bảng tam -->
    <script>
      // Hàm kiểm tra dữ liệu tồn tại trên server
      function checkDataExistence(
        khoaValue,
        dotValue,
        kiValue,
        namValue,
        dataTam
      ) {
        const body = {
          Khoa: khoaValue,
          Dot: dotValue,
          Ki: kiValue,
          Nam: namValue,
        };
        fetch("/kiem-tra-file", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(body),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Kiểm tra dữ liệu thất bại");
            }
            return response.json();
          })
          .then((data) => {
            if (data.exists) {
              showModal(khoaValue, dotValue, kiValue, namValue, dataTam);
            } else {
              saveData(dataTam, khoaValue, dotValue, kiValue, namValue);
            }
          })
          .catch((error) => {
            alert("Kiểm tra dữ liệu file quy chuẩn thất bại!");
            console.error("Error:", error);
          });
      }

      // Hàm hiển thị modal và xử lý sự kiện "Xóa" và "Chèn"
      function showModal(khoaValue, dotValue, kiValue, namValue, dataTam) {
        const modal = document.getElementById("action-modal");
        const message = `Đã tồn tại dữ liệu của Khoa ${khoaValue}, Đợt ${dotValue}, Kì ${kiValue}, Năm ${namValue}. Thực hiện XÓA file cũ hay CHÈN thêm file mới?
      Lưu ý : XÓA sẽ loại bỏ file cũ và chèn thêm, CHÈN sẽ không loại bỏ file cũ và chèn thêm`;
        document.getElementById("modal-message").innerText = message;
        modal.style.display = "block";

        // Xử lý sự kiện "Xóa"
        const deleteButton = document.getElementById("btn-delete");
        deleteButton.onclick = function handleDeleteClick() {
          modal.style.display = "none";
          deleteFile(khoaValue, dotValue, kiValue, namValue);
        };

        // Xử lý sự kiện "Chèn"
        const appendButton = document.getElementById("btn-append");
        appendButton.onclick = function handleAppendClick() {
          modal.style.display = "none";
          appendData(khoaValue, dotValue, kiValue, namValue, dataTam);
        };

        // Xử lý sự kiện "Hủy"
        document.getElementById("btn-cancel").onclick = function () {
          modal.style.display = "none";
        };
      }

      // Hàm gửi yêu cầu xóa dữ liệu
      function deleteFile(khoaValue, dotValue, kiValue, namValue) {
        const body = {
          Khoa: khoaValue,
          Dot: dotValue,
          Ki: kiValue,
          Nam: namValue,
        };

        fetch("/xoa-file", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(body),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Xóa dữ liệu thất bại");
            }
            appendData(khoaValue, dotValue, kiValue, namValue, dataTam);
            // alert("Xóa thành công!");
            location.reload();
          })
          .catch((error) => {
            Swal.fire({
              title: "Thông báo",
              html: "Xóa dữ liệu thất bại",
              icon: "error",
              confirmButtonText: "OK",
              width: "auto", // Tự động điều chỉnh chiều rộng
              padding: "20px", // Giữ khoảng cách cho nội dung
            });
            console.error("Error:", error);
          });
      }

      // Hàm gửi dữ liệu và chèn thêm
      function appendData(khoaValue, dotValue, kiValue, namValue, dataTam) {
        const updatedData = dataTam.map((item) => ({
          ...item,
          Khoa: khoaValue,
          Dot: dotValue,
          Ki: kiValue,
          Nam: namValue,
        }));

        fetch("/save-data", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(updatedData),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Gửi dữ liệu thất bại");
            }
            return response.json();
          })
          .then((data) => {
            if (data.success) {
              Swal.fire({
                title: "Thông báo",
                html: "Chèn thành công",
                icon: "success",
                confirmButtonText: "OK",
                width: "auto", // Tự động điều chỉnh chiều rộng
                padding: "20px", // Giữ khoảng cách cho nội dung
              });
              location.reload();
            } else {
              Swal.fire({
                title: "Thông báo",
                html: "Chèn thêm thất bại",
                icon: "success",
                confirmButtonText: "OK",
                width: "auto", // Tự động điều chỉnh chiều rộng
                padding: "20px", // Giữ khoảng cách cho nội dung
              });
            }
          })
          .catch((error) => {
            console.error("Error:", error);
          });
      }

      // Hàm gửi dữ liệu khi dữ liệu không tồn tại
      function saveData(dataTam, khoaValue, dotValue, kiValue, namValue) {
        const updatedData = dataTam.map((item) => ({
          ...item,
          Khoa: khoaValue,
          Dot: dotValue,
          Ki: kiValue,
          Nam: namValue,
        }));

        fetch("/save-data", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(updatedData),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Gửi dữ liệu thất bại");
            }
            return response.json();
          })
          .then((data) => {
            if (data.success) {
              Swal.fire({
                title: "Thông báo",
                html: "Thêm file thành công",
                icon: "success",
                confirmButtonText: "OK",
                width: "auto", // Tự động điều chỉnh chiều rộng
                padding: "20px", // Giữ khoảng cách cho nội dung
              });
            } else {
              Swal.fire({
                title: "Thông báo",
                html: "Thêm file thất bại",
                icon: "success",
                confirmButtonText: "OK",
                width: "auto", // Tự động điều chỉnh chiều rộng
                padding: "20px", // Giữ khoảng cách cho nội dung
              });
            }
          })
          .catch((error) => {
            Swal.fire({
              title: "Thông báo",
              html: "Gửi dữ liệu thất bại",
              icon: "success",
              confirmButtonText: "OK",
              width: "auto", // Tự động điều chỉnh chiều rộng
              padding: "20px", // Giữ khoảng cách cho nội dung
            });
          });
      }

      function saveDataAll(dataTam, dotValue, kiValue, namValue) {
        console.log(dataTam)
        const updatedData = dataTam.map((item) => ({
          ...item,
          Dot: dotValue,
          Ki: kiValue,
          Nam: namValue,
        }));

        fetch("/save-data", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(updatedData),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Gửi dữ liệu thất bại");
            }
            return response.json();
          })
          .then((data) => {
            if (data.success) {
              Swal.fire({
                title: "Thông báo",
                html: "Thêm file thành công",
                icon: "success",
                confirmButtonText: "OK",
                width: "auto", // Tự động điều chỉnh chiều rộng
                padding: "20px", // Giữ khoảng cách cho nội dung
              });
            } else {
              Swal.fire({
                title: "Thông báo",
                html: "Thêm file thất bại",
                icon: "error",
                confirmButtonText: "OK",
                width: "auto", // Tự động điều chỉnh chiều rộng
                padding: "20px", // Giữ khoảng cách cho nội dung
              });
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            Swal.fire({
              title: "Thông báo",
              html: "Gửi dữ liệu thất bại",
              icon: "error",
              confirmButtonText: "OK",
              width: "auto", // Tự động điều chỉnh chiều rộng
              padding: "20px", // Giữ khoảng cách cho nội dung
            });
          });
      }

      // Gắn sự kiện cho nút "import"
      document.getElementById("import").addEventListener("click", function () {
        const khoaValue = document.getElementById("MaPhongBan").value;
        const dotValue = document.getElementById("combobox-dot").value;
        const kiValue = document.getElementById("comboboxki").value;
        const namValue = document.getElementById("NamHoc").value;

        if (khoaValue !== "ALL") {
          checkDataExistence(khoaValue, dotValue, kiValue, namValue, dataTam);
        } else {
          console.log("Import All");
          saveDataAll(dataTam, dotValue, kiValue, namValue);
        }
      });

    </script>

    <!-- link các site -->
    <script src="/js/moigiang/href.js"></script>
    <!-- năm học, khoa -->
    <script src="/js/moigiang/getdata.js"></script>
    <!-- ẩn các nút theo role -->
    <script src="/js/moigiang/hideBtn.js"></script>
</body>

</html>
