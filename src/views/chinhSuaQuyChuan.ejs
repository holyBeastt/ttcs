<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/css/tabulator.min.css"
      rel="stylesheet"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/js/tabulator.min.js"></script>
    <style>
      /* fixed header nhưng chưa được */
      .tabulator > .tabulator-header > .tabulator-col {
        position: sticky !important;
        top: 0 !important;
        z-index: 10000 !important;
      }

      /* phần header */
      .tabulator
        .tabulator-header
        .tabulator-col
        .tabulator-col-content
        .tabulator-col-title {
        /* Ghi đè với thư viện cho đẹp */
        padding: 10px 5px 0px 5px !important;

        text-align: center !important;
        /* Canh giữa văn bản */
        white-space: normal !important;
        /* Cho phép nội dung xuống dòng */
        word-wrap: break-word !important;
        /* Ngắt từ nếu cần */
        overflow: visible !important;
        /* Hiển thị hết nội dung, không cắt */
        word-break: break-word !important;
        /* Ngắt từ dài thành dòng mới */
      }

      /* Đảm bảo bảng có chiều rộng 100% */
      #table-container {
        width: 100% !important;
        font-size: 12px !important;
        /* Thêm style cho bảng nếu cần */
      }

      /* Thay đổi chiều rộng của tiêu đề cột nếu cần */
      .tabulator-col .tabulator-sortable .tabulator-col-sorter-element {
        display: flex !important;
        flex-wrap: wrap !important;
      }

      .wrap-cell {
        white-space: normal;
        word-wrap: break-word;
      }

      /* Đảm bảo menu con không hiển thị mặc định */
      .dropdown-submenu .dropdown-menu {
        display: none;
        position: absolute;
        left: 100%;
        top: 0;
      }

      /* Hiển thị menu con khi hover */
      .dropdown-submenu:hover .dropdown-menu {
        display: block;
      }

      /* nút xuất file */
      /* Định dạng cho dropdown */
      #file-format-menu {
        background-color: white;
        border: 1px solid #ddd;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        padding: 10px;
        transform: translateX(365%) translateY(100%);
      }

      .dropdown-item {
        padding: 8px 12px;
        cursor: pointer;
      }

      .dropdown-item:hover {
        background-color: #f8f9fa;
      }
    </style>
    <style>
      /* CSS cho bảng */
      .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }

      .table th,
      .table td {
        padding: 10px;
        text-align: left;
        border: 1px solid #dee2e6;
      }

      .table th {
        background-color: #007bff;
        color: white;
        font-weight: bold;
      }

      .table tbody tr:nth-child(even) {
        background-color: #f8f9fa;
      }

      .table tbody tr:hover {
        background-color: #e2e6ea;
      }

      .table td {
        vertical-align: middle;
      }

      .bg-custom {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      .spinner-border {
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
      }
    </style>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  </head>

  <body>
    <!-- Phần header -->
    <%- include('header') %>

    <!-- Phần nội dung -->

    <div class="container-fluid box m-4">
      <div class="mx-5 flex-grow-1">
        <div class="d-flex justify-content-start align-items-end mb-3">
          <!-- Combo box Đợt -->
          <select class="form-select w-100px mx-1 selectop" id="combobox-dot">
            <option value="">Đợt</option>
          </select>

          <!-- Combo box kì -->
          <select class="form-select w-100px mx-1 selectop" id="comboboxki">
            <option value="">Kì</option>
          </select>

          <!-- Combo box Năm -->
          <select
            class="form-select mx-1 selectop"
            id="NamHoc"
            style="width: max-content"
          >
            <option value="">Chọn năm học</option>
          </select>

          <!-- Combo box với các giá trị CNTT, ATTT, DTVT -->
          <select class="form-select w-100px mx-1 selectop" id="MaPhongBan">
            <option value="">Chọn khoa</option>
          </select>

          <button
            class="btn mx-1"
            id="render"
            style="margin-bottom: 0px; height: 45px"
          >
            Hiển thị
          </button>

          <button
            class="btn btn-primary mx-1"
            id="update-btn"
            style="margin-bottom: 0px; height: 45px; display: none;"
          >
            Cập nhật chỉnh sửa
          </button>
        </div>
        <div id="loading" style="display: none">Loading...</div>
        <div class="overflow-auto">
          <table class="table table-bordered">
            <thead>
              <tr id="table-header"></tr>
            </thead>
            <tbody id="data-table-body"></tbody>
          </table>
        </div>
      </div>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Link script Sweet alert 2 -->
    <!-- SweetAlert2 CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css"
      rel="stylesheet"
    />

    <!-- SweetAlert2 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>

    <!-- link thư viện excel  -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>
    <!-- phần xuất file -->
    <script>
      // renderData là biến var
      document
        .getElementById("export-file-btn")
        .addEventListener("click", function (event) {
          // Toggle menu hiển thị
          const menu = document.getElementById("file-format-menu");
          menu.style.display = menu.style.display === "none" ? "block" : "none";

          // Đảm bảo menu không bị ẩn khi click ra ngoài
          window.addEventListener("click", function (event) {
            if (
              !event.target.closest("#file-format-menu") &&
              !event.target.closest("#export-file-btn")
            ) {
              menu.style.display = "none";
            }
          });
        });

      const titleMap = {
        SoTinChi: "Số TC",
        LopHocPhan: "Lớp học phần",
        GiaoVien: "Giáo viên",
        SoTietCTDT: "Số tiết CTĐT",
        SoSinhVien: "Số SV",
        LL: "Số tiết lên lớp được tính QC",
        HeSoT7CN: "Hệ số lên lớp ngoài giờ HC/ Thạc sĩ/ Tiến sĩ",
        HeSoLopDong: "Hệ số lớp đông",
        QuyChuan: "Quy chuẩn",
      };

      async function exportToExcel() {
        const formattedData = renderData.map((item, index) => {
          // Cập nhật LopHocPhan với giá trị mới từ generateGroupCode
          item.LopHocPhan = generateGroupCode(item);

          // Đổi key KiHoc -> Ki, NamHoc -> Nam
          const { KiHoc, NamHoc, ...rest } = item;
          return { Ki: KiHoc, Nam: NamHoc, ...rest };
        });

        // console.log(formattedData)

        try {
          const response = await fetch("/qcdk-export-excel", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ renderData: formattedData }),
          });

          if (!response.ok) {
            throw new Error(`Failed to export: ${response.statusText}`);
          }

          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = `file_quy_chuan_chinh_thuc_hoc_ki_${renderData[0].KiHoc}_nam_hoc_${renderData[0].NamHoc}.xlsx`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);
        } catch (error) {
          console.error("Error exporting data:", error);
        }
      }

      function exportToWord() {
        console.log(renderData);

        // Mảng tiêu đề theo thứ tự mong muốn
        const orderedKeys = [
          "TT",
          "SoTinChi",
          "LopHocPhan",
          "GiaoVien",
          "SoTietCTDT",
          "SoSinhVien",
          "LL",
          "HeSoT7CN",
          "HeSoLopDong",
          "QuyChuan",
          "Khoa",
        ];

        // Map tiêu đề hiển thị
        const titleMap = {
          TT: "TT",
          SoTinChi: "Số TC",
          LopHocPhan: "Lớp học phần",
          GiaoVien: "Giáo Viên",
          SoTietCTDT: "Số tiết theo CTĐT",
          SoSinhVien: "Số SV",
          LL: "Số tiết lên lớp được tính QC",
          HeSoT7CN: "Hệ số lên lớp ngoài giờ HC/ Thạc sĩ/ Tiến sĩ",
          HeSoLopDong: "Hệ số lớp đông",
          QuyChuan: "QC",
          Khoa: "Khoa",
        };

        // Thêm STT, Format LopHocPhan = Lop + MaHocPhan + LopHocPhan đảm bảo đủ dữ liệu file
        const formattedData = renderData.map((item, index) => {
          const row = { TT: index + 1 }; // Thêm số thứ tự (STT)

          // Cập nhật LopHocPhan với giá trị mới từ generateGroupCode
          item.LopHocPhan = generateGroupCode(item);

          orderedKeys.forEach((key) => {
            if (key !== "TT") {
              row[key] = item[key] || ""; // Gán giá trị, nếu không có thì để trống
            }
          });

          return row;
        });

        // Gửi dữ liệu đến server
        fetch("/qcdk-export-word", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ data: formattedData, titleMap, orderedKeys }),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Lỗi xuất file");
            }
            return response.blob();
          })
          .then((blob) => {
            // Tải xuống file
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement("a");
            link.href = url;
            link.download = `file_quy_chuan_chinh_thuc_hoc_ki_${renderData[0].KiHoc}_nam_hoc_${renderData[0].NamHoc}.docx`;
            link.click();
          })
          .catch((error) => {
            console.error("Lỗi khi tải file:", error);
          });
      }

      // Sửa lại key LopHocPhan
      function generateGroupCode(data) {
        const lopHocPhan = data.LopHocPhan || "";
        const kiHoc = data.KiHoc || "";
        const namHoc = data.NamHoc || "";
        const tenLop = data.TenLop || "";

        // Tách năm đầu tiên, loại bỏ khoảng trắng, rồi lấy 2 chữ số cuối
        const namRutGon = namHoc.split("-")[0].trim().slice(-2);

        // Tạo mã nhóm
        return `${lopHocPhan}-${kiHoc}-${namRutGon} (${tenLop})`;
      }
    </script>
    <!-- hiện các chức năng theo role -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const isKhoa = localStorage.getItem("isKhoa");
        const role = localStorage.getItem("userRole");
        const MaPhongBan = localStorage.getItem("MaPhongBan");

        // hideButton2 ẩn các chức năng thêm sửa xóa
        unhideButton2(role, MaPhongBan);
      });

      function unhideButton2(role, MaPhongBan) {
        if (role == "Duyệt" && MaPhongBan == "DAOTAO") {
          const exportBtn = document.getElementById("export-file-btn");
          exportBtn.style.display = "block"; // Hiện actionButton1 nếu isKhoa khác 0
        }
      }
    </script>
    <!-- phần render bảng -->
    <script>
      var renderData = [];
      var editedData = new Map(); // Store edited data

      // Lắng nghe sự kiện click vào button
      document.getElementById("render").addEventListener("click", function () {
        loadData(); // Gọi hàm loadData khi button được click
      });

      // Add event listener for update button
      document.getElementById("update-btn").addEventListener("click", async function() {
        if (editedData.size === 0) {
          Swal.fire({
            title: "Thông báo",
            text: "Không có thay đổi nào để cập nhật!",
            icon: "info"
          });
          return;
        }

        try {
          const response = await fetch("/update-quy-chuan", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              updates: Array.from(editedData.values())
            }),
          });

          if (!response.ok) {
            throw new Error("Lỗi khi cập nhật dữ liệu");
          }

          const result = await response.json();
          
          if (result.success) {
            Swal.fire({
              title: "Thành công",
              text: "Dữ liệu đã được cập nhật!",
              icon: "success"
            });
            editedData.clear();
            loadData(); // Reload data after successful update
          } else {
            throw new Error(result.message || "Lỗi khi cập nhật dữ liệu");
          }
        } catch (error) {
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      });

      async function loadData() {
        try {
          // Lấy giá trị từ các combobox khi người dùng nhấn nút
          let dotValue = document.getElementById("combobox-dot").value;
          let kiValue = document.getElementById("comboboxki").value;
          let namValue = document.getElementById("NamHoc").value;
          let khoaValue = document.getElementById("MaPhongBan").value;

          // Đối tượng dữ liệu gửi đi
          const requestData = {
            Khoa: khoaValue,
            Dot: dotValue,
            Ki: kiValue,
            Nam: namValue,
          };

          console.log("Dữ liệu gửi đi:", requestData);

          // Gửi request đến server
          const teachingResponse = await fetch("/quy-chuan-chinh-thuc", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(requestData),
          });

          if (!teachingResponse.ok) {
            const errorData = await teachingResponse.json();
            Swal.fire({
              title: "Thông báo",
              html: errorData.message || "Đã có lỗi xảy ra!",
              icon: "error",
              confirmButtonText: "OK",
              width: "auto",
              padding: "20px",
            });
            return;
          }

          // Xử lý dữ liệu nhận được từ server
          renderData = await teachingResponse.json();
          console.log("Tổng hợp bảng dữ liệu:", renderData);

          // Hiển thị dữ liệu lên bảng
          renderTable(renderData);
        } catch (error) {
          console.error("Đã có lỗi xảy ra:", error);
        }
      }

      function renderTable(data) {
        // Thêm spinner loading nếu chưa tồn tại
        let loadingSpinner = document.getElementById("loading-spinner");
        if (!loadingSpinner) {
          loadingSpinner = document.createElement("div");
          loadingSpinner.id = "loading-spinner";
          loadingSpinner.innerHTML = "Loading...";
          document.body.appendChild(loadingSpinner);
        }

        // Danh sách cột cần hiển thị
        const columnsToDisplay = [
          "Khoa",
          "Dot",
          "KiHoc",
          "NamHoc",
          "LopHocPhan",
          "GiaoVien",
          "GiaoVienGiangDay",
          "MoiGiang",
          "SoTinChi",
          "TenLop",
          "LL",
          "QuyChuan",
        ];

        // Mapping định nghĩa width theo yêu cầu
        const customWidths = {
          Khoa: "5%",
          Dot: "5%",
          KiHoc: "5%",
          NamHoc: "10%",
          LopHocPhan: "22.5%",
          GiaoVien: "25%",
          GiaoVienGiangDay: "22.5%",
        };

        const columnsWithWidth = columnsToDisplay.map((col) => ({
          name: col,
          width: customWidths[col] || "auto",
        }));

        let tableHtml = "";

        const headersMap = {
          Khoa: "Khoa",
          Dot: "Đợt",
          KiHoc: "Kì",
          NamHoc: "Năm",
          LopHocPhan: "Lớp học phần",
          GiaoVien: "Giảng viên theo TKB",
          GiaoVienGiangDay: "Giảng viên giảng dạy",
          MoiGiang: "Mời giảng?",
          SoTinChi: "Số tín chỉ",
          TenLop: "Tên lớp",
          LL: "Số tiết lên lớp",
          QuyChuan: "Số tiết quy chuẩn",
        };

        // Tạo header với width được chỉ định
        columnsWithWidth.forEach((col) => {
          const newHeaderName = headersMap[col.name] || col.name;
          tableHtml += `<th style="width: ${col.width};">${newHeaderName}</th>`;
        });
        document.getElementById("table-header").innerHTML = tableHtml;

        // Xóa dữ liệu bảng cũ
        document.getElementById("data-table-body").innerHTML = "";

        // Render các dòng dữ liệu vào bảng
        const tableRows = data
          .map((item, rowIndex) => {
            let rowHtml = columnsToDisplay
              .map((key, colIndex) => {
                let cellValue = item[key] !== null ? item[key] : "";

                // Chuyển đổi 0 và 1 thành 'Có' hoặc 'Không' cho cột MoiGiang
                if (key === "MoiGiang") {
                  cellValue = cellValue === 1 ? "Có" : "Không";
                }

                // Make cells editable except for certain columns
                const nonEditableColumns = ["Khoa", "Dot", "KiHoc", "NamHoc", "LopHocPhan", "MoiGiang", "SoTinChi", "TenLop", "LL", "QuyChuan"];
                const isEditable = !nonEditableColumns.includes(key);
                
                if (isEditable) {
                  return `<td contenteditable="true" data-row="${rowIndex}" data-col="${key}" onblur="handleCellEdit(this)" style="cursor: pointer;">${cellValue}</td>`;
                } else {
                  return `<td>${cellValue}</td>`;
                }
              })
              .join("");
            return `<tr>${rowHtml}</tr>`;
          })
          .join("");

        document.getElementById("data-table-body").innerHTML = tableRows;

        // Show update button
        document.getElementById("update-btn").style.display = "block";

        // Remove spinner
        loadingSpinner.remove();
      }

      // Handle cell edit
      function handleCellEdit(cell) {
        const rowIndex = cell.getAttribute("data-row");
        const colName = cell.getAttribute("data-col");
        const newValue = cell.textContent.trim();
        const originalValue = renderData[rowIndex][colName];

        // Don't track if value hasn't changed
        if (newValue === originalValue) {
          return;
        }

        // Store the edit
        const editKey = `${rowIndex}-${colName}`;
        editedData.set(editKey, {
          rowIndex: parseInt(rowIndex),
          colName: colName,
          newValue: newValue,
          originalValue: originalValue,
          data: renderData[rowIndex]
        });

        // Highlight edited cell
        cell.style.backgroundColor = "#fff3cd";
      }
    </script>
    <!-- Phần phân quyền -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Thêm sự kiện click cho phần tử có id="ThongTinGD"
        const ThongTinGD = document.getElementById("ThongTinGD");

        ThongTinGD.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa"); // Lấy role từ localStorage

          if (isKhoa == 0) {
            // Nếu là đào tạo hoặc tài chính
            window.location.href = "/info2";
          } else {
            window.location.href = "/info";
          }
        });

        // Thêm sự kiện click cho phần tử có id="Home"

        const Home = document.getElementById("Home");

        Home.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa");

          if (isKhoa == 0) {
            // Nếu là đào tạo hoặc tài chính
            window.location.href = "/maindt";
          } else {
            window.location.href = "/mainkhoa";
          }
        });
      });
    </script>

    <script>
      document
        .getElementById("changePasswordLink")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage

          if (tenDangNhap) {
            // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
            window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(
              tenDangNhap
            )}`;
          } else {
            alert("Không tìm thấy TenDangNhap trong localStorage.");
          }
        });
    </script>
    <script>
      $(document).ready(function () {
        $('#NamHoc option[value=""]').remove();
        $('#comboboxki option[value=""]').remove();
        $('#combobox-dot option[value=""]').remove();

        $.ajax({
          url: "/getNamHoc",
          method: "GET",
          success: function (response) {
            if (response.success) {
              response.NamHoc.forEach(function (item) {
                console.log(item.NamHoc);
                $("#NamHoc").append(
                  `<option value="${item.NamHoc}">${item.NamHoc}</option>`
                );
              });

              response.Ki.forEach(function (item) {
                console.log(item.Ki);
                $("#comboboxki").append(
                  `<option value="${item.value}">${item.Ki}</option>`
                );
              });
              response.Dot.forEach(function (item) {
                console.log(item.Dot);
                $("#combobox-dot").append(
                  `<option value="${item.value}">${item.Dot}</option>`
                );
              });
            } else {
              console.error(
                "Không lấy được dữ liệu năm học:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu năm học:", error);
          },
        });
      });
    </script>
    <script>
      $(document).ready(function () {
        $('#MaPhongBan option[value=""]').remove();
        // Gọi AJAX để lấy dữ liệu JSON từ API
        $.ajax({
          url: "/api/shared/faculty-code-list", // Đường dẫn tới API getPhongBan
          method: "GET",
          success: function (response) {
            // Kiểm tra nếu response thành công
            const MaPhongBan = response.MaPhongBan;
            if (response.success) {
              $("#MaPhongBan").prepend('<option value="ALL">ALL</option>');
              // Lặp qua từng mục trong mảng MaPhongBan
              response.MaPhongBan.forEach(function (item) {
                // Nếu item.MaPhongBan bằng boMon.MaPhongBan, hiển thị trước
                console.log(item);
                $("#MaPhongBan").append(
                  `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                );
              });

              // Nếu không có phòng ban nào tương ứng, bạn có thể thêm tùy chọn mặc định ở đây
              if (!$("#MaPhongBan option:selected").length) {
                $("#MaPhongBan").prepend(
                  '<option value="">Chọn Phòng Ban</option>'
                );
              }
            } else {
              console.error(
                "Không lấy được dữ liệu phongBan:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu phongBan:", error);
          },
        });
      });
    </script>
    <script>
      document
        .getElementById("infome")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const id_User = localStorage.getItem("id_User"); // Lấy id_User từ localStorage\
          if (id_User) {
            // Chuyển hướng đến trang infome và truyền id_User trong URL
            window.location.href = `/infome/${id_User}`;
          } else {
            alert("Không tìm thấy id_User trong localStorage.");
          }
        });
    </script>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const role = localStorage.getItem("userRole");
        const isKhoa = localStorage.getItem("isKhoa");

        // Ẩn button import đồ án
        const importDoAn = document.getElementById("importDoAn");
        const suaHD = document.getElementById("suaHD");

        if (isKhoa == 0 && role == "Duyệt") {
          importDoAn.style.display = "block";
          suaHD.style.display = "block";
        }

        // Ẩn button ngay khi trang được tải
        const actionButton = document.getElementById("changeMessage");
        //Ẩn site thêm thông báo
        if (role === "Duyệt") {
          actionButton.style.display = "";
        } else {
          actionButton.style.display = "none";
        }
      });
    </script>
    <script>
      document
        .getElementById("changeMessage")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

          if (MaPhongBan) {
            // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
            window.location.href = `/changeMessage/${MaPhongBan}`;
          } else {
            alert("Không tìm thấy MaPhongBan trong localStorage.");
          }
        });
    </script>
  </body>
</html>
