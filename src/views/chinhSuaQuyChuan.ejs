<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/css/tabulator.min.css"
      rel="stylesheet"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/js/tabulator.min.js"></script>
    <style>
      /* fixed header nhưng chưa được */
      .tabulator > .tabulator-header > .tabulator-col {
        position: sticky !important;
        top: 0 !important;
        z-index: 10000 !important;
      }

      /* phần header */
      .tabulator
        .tabulator-header
        .tabulator-col
        .tabulator-col-content
        .tabulator-col-title {
        /* Ghi đè với thư viện cho đẹp */
        padding: 10px 5px 0px 5px !important;

        text-align: center !important;
        /* Canh giữa văn bản */
        white-space: normal !important;
        /* Cho phép nội dung xuống dòng */
        word-wrap: break-word !important;
        /* Ngắt từ nếu cần */
        overflow: visible !important;
        /* Hiển thị hết nội dung, không cắt */
        word-break: break-word !important;
        /* Ngắt từ dài thành dòng mới */
      }

      /* Đảm bảo bảng có chiều rộng 100% */
      #table-container {
        width: 100% !important;
        font-size: 12px !important;
        /* Thêm style cho bảng nếu cần */
      }

      /* Thay đổi chiều rộng của tiêu đề cột nếu cần */
      .tabulator-col .tabulator-sortable .tabulator-col-sorter-element {
        display: flex !important;
        flex-wrap: wrap !important;
      }

      .wrap-cell {
        white-space: normal;
        word-wrap: break-word;
      }

      /* Đảm bảo menu con không hiển thị mặc định */
      .dropdown-submenu .dropdown-menu {
        display: none;
        position: absolute;
        left: 100%;
        top: 0;
      }

      /* Hiển thị menu con khi hover */
      .dropdown-submenu:hover .dropdown-menu {
        display: block;
      }

      /* nút xuất file */
      /* Định dạng cho dropdown */
      #file-format-menu {
        background-color: white;
        border: 1px solid #ddd;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        padding: 10px;
        transform: translateX(365%) translateY(100%);
      }

      .dropdown-item {
        padding: 8px 12px;
        cursor: pointer;
      }

      .dropdown-item:hover {
        background-color: #f8f9fa;
      }
    </style>
    <style>
      /* CSS cho bảng */
      .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }

      .table th,
      .table td {
        padding: 10px;
        text-align: left;
        border: 1px solid #dee2e6;
      }

      .table th {
        background-color: #007bff;
        color: white;
        font-weight: bold;
      }

      .table tbody tr:nth-child(even) {
        background-color: #f8f9fa;
      }

      .table tbody tr:hover {
        background-color: #e2e6ea;
      }

      .table td {
        vertical-align: middle;
      }

      .bg-custom {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      .spinner-border {
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
      }
    </style>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <style>
      .ui-autocomplete {
        background: white;
        border: 1px solid #ccc;
        max-height: 200px;
        overflow-y: auto;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        font-size: 14px;
        padding: 5px;
        width: 200px;
        font-size: 12px !important;
      }
      .ui-menu-item {
        padding: 8px;
        cursor: default;
      }
    </style>
  </head>

  <body>
    <!-- Phần header -->
    <%- include('header') %>

    <!-- Phần nội dung -->

    <div class="container-fluid box m-4">
      <div class="mx-5 flex-grow-1">
        <!-- Filter section -->
        <div class="d-flex justify-content-start align-items-end mb-3">
          <!-- Combo box Đợt -->
          <select class="form-select w-100px mx-1 selectop" id="filter-dot">
            <option value="">Đợt</option>
          </select>

          <!-- Combo box kì -->
          <select class="form-select w-100px mx-1 selectop" id="filter-ki">
            <option value="">Kì</option>
          </select>

          <!-- Combo box Năm -->
          <select class="form-select mx-1 selectop" id="filter-nam" style="width: max-content">
            <option value="">Chọn năm học</option>
          </select>

          <!-- Combo box với các giá trị CNTT, ATTT, DTVT -->
          <select class="form-select w-100px mx-1 selectop" id="filter-khoa">
            <option value="">Chọn khoa</option>
          </select>

          <button class="btn btn-primary mx-1" id="filter-btn" style="margin-bottom: 0px; height: 45px">
            Hiển thị
          </button>

          <button class="btn btn-success mx-1" id="export-adjusted-btn" style="margin-bottom: 0px; height: 45px;">
            Xuất dữ liệu chỉnh sửa
          </button>

          <button class="btn btn-warning mx-1" id="show-edit-form-btn" style="margin-bottom: 0px; height: 45px;">
            Chỉnh sửa quy chuẩn
          </button>
        </div>

        <!-- Edit requests list container -->
        <div id="edit-requests-container">
          <div class="table-responsive">
            <table class="table table-bordered">
              <thead>
                <tr>
                  <th>Khoa</th>
                  <th>Đợt</th>
                  <th>Kì</th>
                  <th>Năm</th>
                  <th>Lớp học phần</th>
                  <th>Giảng viên theo TKB</th>
                  <th>Giảng viên điều chỉnh</th>
                  <th>Khoa duyệt</th>
                  <th>Đào tạo duyệt</th>
                  <th>BGD duyệt</th>
                  <th>Trạng thái</th>
                  <th>Thao tác</th>
                </tr>
              </thead>
              <tbody id="edit-requests-body"></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Add this modal for editing quy chuan -->
    <div class="modal fade" id="editQuyChuanModal" tabindex="-1" aria-labelledby="editQuyChuanModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="editQuyChuanModalLabel">Chỉnh sửa quy chuẩn</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="d-flex justify-content-start align-items-end mb-3">
              <!-- Combo box Đợt -->
              <select class="form-select w-100px mx-1 selectop" id="modal-dot">
                <option value="">Đợt</option>
              </select>

              <!-- Combo box kì -->
              <select class="form-select w-100px mx-1 selectop" id="modal-ki">
                <option value="">Kì</option>
              </select>

              <!-- Combo box Năm -->
              <select class="form-select mx-1 selectop" id="modal-nam" style="width: max-content">
                <option value="">Chọn năm học</option>
              </select>

              <!-- Combo box với các giá trị CNTT, ATTT, DTVT -->
              <select class="form-select w-100px mx-1 selectop" id="modal-khoa">
                <option value="">Chọn khoa</option>
              </select>

              <button class="btn mx-1" id="modal-render" style="margin-bottom: 0px; height: 45px">
                Hiển thị
              </button>

              <button class="btn btn-warning mx-1" id="modal-request-edit" style="margin-bottom: 0px; height: 45px;">
                Yêu cầu chỉnh sửa
              </button>
            </div>

            <div id="modal-loading" style="display: none">Loading...</div>
            <div class="overflow-auto">
              <table class="table table-bordered">
                <thead>
                  <tr id="modal-table-header"></tr>
                </thead>
                <tbody id="modal-data-table-body"></tbody>
              </table>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Link script Sweet alert 2 -->
    <!-- SweetAlert2 CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css"
      rel="stylesheet"
    />

    <!-- SweetAlert2 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>

    <!-- link thư viện excel  -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>
    <!-- phần xuất file -->
    <script>
      // renderData là biến var
      document
        .getElementById("export-file-btn")
        .addEventListener("click", function (event) {
          // Toggle menu hiển thị
          const menu = document.getElementById("file-format-menu");
          menu.style.display = menu.style.display === "none" ? "block" : "none";

          // Đảm bảo menu không bị ẩn khi click ra ngoài
          window.addEventListener("click", function (event) {
            if (
              !event.target.closest("#file-format-menu") &&
              !event.target.closest("#export-file-btn")
            ) {
              menu.style.display = "none";
            }
          });
        });

      const titleMap = {
        SoTinChi: "Số TC",
        LopHocPhan: "Lớp học phần",
        GiaoVien: "Giáo viên",
        SoTietCTDT: "Số tiết CTĐT",
        SoSinhVien: "Số SV",
        LL: "Số tiết lên lớp được tính QC",
        HeSoT7CN: "Hệ số lên lớp ngoài giờ HC/ Thạc sĩ/ Tiến sĩ",
        HeSoLopDong: "Hệ số lớp đông",
        QuyChuan: "Quy chuẩn",
      };

      async function exportToExcel() {
        const formattedData = renderData.map((item, index) => {
          // Cập nhật LopHocPhan với giá trị mới từ generateGroupCode
          item.LopHocPhan = generateGroupCode(item);

          // Đổi key KiHoc -> Ki, NamHoc -> Nam
          const { KiHoc, NamHoc, ...rest } = item;
          return { Ki: KiHoc, Nam: NamHoc, ...rest };
        });

        // console.log(formattedData)

        try {
          const response = await fetch("/qcdk-export-excel", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ renderData: formattedData }),
          });

          if (!response.ok) {
            throw new Error(`Failed to export: ${response.statusText}`);
          }

          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = `file_quy_chuan_chinh_thuc_hoc_ki_${renderData[0].KiHoc}_nam_hoc_${renderData[0].NamHoc}.xlsx`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);
        } catch (error) {
          console.error("Error exporting data:", error);
        }
      }

      function exportToWord() {
        console.log(renderData);

        // Mảng tiêu đề theo thứ tự mong muốn
        const orderedKeys = [
          "TT",
          "SoTinChi",
          "LopHocPhan",
          "GiaoVien",
          "SoTietCTDT",
          "SoSinhVien",
          "LL",
          "HeSoT7CN",
          "HeSoLopDong",
          "QuyChuan",
          "Khoa",
        ];

        // Map tiêu đề hiển thị
        const titleMap = {
          TT: "TT",
          SoTinChi: "Số TC",
          LopHocPhan: "Lớp học phần",
          GiaoVien: "Giáo Viên",
          SoTietCTDT: "Số tiết theo CTĐT",
          SoSinhVien: "Số SV",
          LL: "Số tiết lên lớp được tính QC",
          HeSoT7CN: "Hệ số lên lớp ngoài giờ HC/ Thạc sĩ/ Tiến sĩ",
          HeSoLopDong: "Hệ số lớp đông",
          QuyChuan: "QC",
          Khoa: "Khoa",
        };

        // Thêm STT, Format LopHocPhan = Lop + MaHocPhan + LopHocPhan đảm bảo đủ dữ liệu file
        const formattedData = renderData.map((item, index) => {
          const row = { TT: index + 1 }; // Thêm số thứ tự (STT)

          // Cập nhật LopHocPhan với giá trị mới từ generateGroupCode
          item.LopHocPhan = generateGroupCode(item);

          orderedKeys.forEach((key) => {
            if (key !== "TT") {
              row[key] = item[key] || ""; // Gán giá trị, nếu không có thì để trống
            }
          });

          return row;
        });

        // Gửi dữ liệu đến server
        fetch("/qcdk-export-word", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ data: formattedData, titleMap, orderedKeys }),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Lỗi xuất file");
            }
            return response.blob();
          })
          .then((blob) => {
            // Tải xuống file
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement("a");
            link.href = url;
            link.download = `file_quy_chuan_chinh_thuc_hoc_ki_${renderData[0].KiHoc}_nam_hoc_${renderData[0].NamHoc}.docx`;
            link.click();
          })
          .catch((error) => {
            console.error("Lỗi khi tải file:", error);
          });
      }

      // Sửa lại key LopHocPhan
      function generateGroupCode(data) {
        const lopHocPhan = data.LopHocPhan || "";
        const kiHoc = data.KiHoc || "";
        const namHoc = data.NamHoc || "";
        const tenLop = data.TenLop || "";

        // Tách năm đầu tiên, loại bỏ khoảng trắng, rồi lấy 2 chữ số cuối
        const namRutGon = namHoc.split("-")[0].trim().slice(-2);

        // Tạo mã nhóm
        return `${lopHocPhan}-${kiHoc}-${namRutGon} (${tenLop})`;
      }
    </script>
    <!-- hiện các chức năng theo role -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const isKhoa = localStorage.getItem("isKhoa");
        const role = localStorage.getItem("userRole");
        const MaPhongBan = localStorage.getItem("MaPhongBan");

        // hideButton2 ẩn các chức năng thêm sửa xóa
        unhideButton2(role, MaPhongBan);
      });

      function unhideButton2(role, MaPhongBan) {
        if (role == "Duyệt" && MaPhongBan == "DAOTAO") {
          const exportBtn = document.getElementById("export-file-btn");
          exportBtn.style.display = "block"; // Hiện actionButton1 nếu isKhoa khác 0
        }
      }
    </script>
    <!-- phần render bảng -->
    <script>
      var renderData = [];
      var editedData = new Map(); // Store edited data

      // Lắng nghe sự kiện click vào button
      document.getElementById("render").addEventListener("click", function () {
        loadData(); // Gọi hàm loadData khi button được click
      });

      // Add event listener for update button
      document.getElementById("request-edit-btn").addEventListener("click", async function() {
        if (editedData.size === 0) {
          Swal.fire({
            title: "Thông báo",
            text: "Không có thay đổi nào để yêu cầu chỉnh sửa!",
            icon: "info"
          });
          return;
        }

        try {
          const response = await fetch("/request-quy-chuan-edit", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              updates: Array.from(editedData.values())
            }),
          });

          if (!response.ok) {
            throw new Error("Lỗi khi gửi yêu cầu chỉnh sửa");
          }

          const result = await response.json();
          
          if (result.success) {
            Swal.fire({
              title: "Thành công",
              text: "Yêu cầu chỉnh sửa đã được gửi!",
              icon: "success"
            });
            editedData.clear();
            loadData(); // Reload data after successful request
          } else {
            throw new Error(result.message || "Lỗi khi gửi yêu cầu chỉnh sửa");
          }
        } catch (error) {
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      });

      async function loadData() {
        try {
          // Lấy giá trị từ các combobox khi người dùng nhấn nút
          let dotValue = document.getElementById("filter-dot").value;
          let kiValue = document.getElementById("filter-ki").value;
          let namValue = document.getElementById("filter-nam").value;
          let khoaValue = document.getElementById("filter-khoa").value;

          // Đối tượng dữ liệu gửi đi
          const requestData = {
            Khoa: khoaValue,
            Dot: dotValue,
            Ki: kiValue,
            Nam: namValue,
          };

          console.log("Dữ liệu gửi đi:", requestData);

          // Gửi request đến server
          const teachingResponse = await fetch("/quy-chuan-chinh-thuc", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(requestData),
          });

          if (!teachingResponse.ok) {
            const errorData = await teachingResponse.json();
            Swal.fire({
              title: "Thông báo",
              html: errorData.message || "Đã có lỗi xảy ra!",
              icon: "error",
              confirmButtonText: "OK",
              width: "auto",
              padding: "20px",
            });
            return;
          }

          // Xử lý dữ liệu nhận được từ server
          renderData = await teachingResponse.json();
          console.log("Tổng hợp bảng dữ liệu:", renderData);

          // Hiển thị dữ liệu lên bảng
          renderTable(renderData);
        } catch (error) {
          console.error("Đã có lỗi xảy ra:", error);
        }
      }

      function renderTable(data) {
        // Thêm spinner loading nếu chưa tồn tại
        let loadingSpinner = document.getElementById("loading-spinner");
        if (!loadingSpinner) {
          loadingSpinner = document.createElement("div");
          loadingSpinner.id = "loading-spinner";
          loadingSpinner.innerHTML = "Loading...";
          document.body.appendChild(loadingSpinner);
        }

        // Danh sách cột cần hiển thị
        const columnsToDisplay = [
          "Khoa",
          "Dot",
          "KiHoc",
          "NamHoc",
          "LopHocPhan",
          "GiaoVien",
          "GiaoVienGiangDay",
          "MoiGiang",
          "SoTinChi",
          "TenLop",
          "LL",
          "QuyChuan",
        ];

        // Mapping định nghĩa width theo yêu cầu
        const customWidths = {
          Khoa: "5%",
          Dot: "5%",
          KiHoc: "5%",
          NamHoc: "10%",
          LopHocPhan: "22.5%",
          GiaoVien: "25%",
          GiaoVienGiangDay: "22.5%",
        };

        const columnsWithWidth = columnsToDisplay.map((col) => ({
          name: col,
          width: customWidths[col] || "auto",
        }));

        let tableHtml = "";

        const headersMap = {
          Khoa: "Khoa",
          Dot: "Đợt",
          KiHoc: "Kì",
          NamHoc: "Năm",
          LopHocPhan: "Lớp học phần",
          GiaoVien: "Giảng viên theo TKB",
          GiaoVienGiangDay: "Giảng viên giảng dạy",
          MoiGiang: "Mời giảng?",
          SoTinChi: "Số tín chỉ",
          TenLop: "Tên lớp",
          LL: "Số tiết lên lớp",
          QuyChuan: "Số tiết quy chuẩn",
        };

        // Tạo header với width được chỉ định
        columnsWithWidth.forEach((col) => {
          const newHeaderName = headersMap[col.name] || col.name;
          tableHtml += `<th style="width: ${col.width};">${newHeaderName}</th>`;
        });
        document.getElementById("table-header").innerHTML = tableHtml;

        // Xóa dữ liệu bảng cũ
        document.getElementById("data-table-body").innerHTML = "";

        // Render các dòng dữ liệu vào bảng
        const tableRows = data
          .map((item, rowIndex) => {
            let rowHtml = columnsToDisplay
              .map((key, colIndex) => {
                let cellValue = item[key] !== null ? item[key] : "";

                // Chuyển đổi 0 và 1 thành 'Có' hoặc 'Không' cho cột MoiGiang
                if (key === "MoiGiang") {
                  cellValue = cellValue === 1 ? "Có" : "Không";
                }

                // Make cells editable except for certain columns
                const nonEditableColumns = [
                  "Khoa", 
                  "Dot", 
                  "KiHoc", 
                  "NamHoc", 
                  "LopHocPhan", 
                  "MoiGiang", 
                  "SoTinChi", 
                  "TenLop", 
                  "LL", 
                  "QuyChuan",
                  "GiaoVienGiangDay" // Add this to make GiaoVienGiangDay non-editable
                ];
                const isEditable = !nonEditableColumns.includes(key);
                
                if (isEditable) {
                  if (key === "GiaoVienDieuChinh") {
                    return `<td>
                      <input type="text" 
                             class="input-gv-dieuchinh" 
                             data-row="${rowIndex}" 
                             value="${cellValue || ""}" 
                             placeholder="Nhập hoặc chọn giảng viên..."
                             autocomplete="off"
                             style="width: 100%;"/>
                    </td>`;
                  } else {
                    return `<td contenteditable="true" data-row="${rowIndex}" data-col="${key}" onblur="handleCellEdit(this)" style="cursor: pointer;">${cellValue}</td>`;
                  }
                } else {
                  return `<td>${cellValue}</td>`;
                }
              })
              .join("");
            return `<tr>${rowHtml}</tr>`;
          })
          .join("");

        document.getElementById("data-table-body").innerHTML = tableRows;

        // Remove spinner
        loadingSpinner.remove();

        // Add this section to apply autocomplete
        $(".input-gv-dieuchinh").each(function () {
          $(this).autocomplete({
            source: function (request, response) {
              const value = request.term.toLowerCase();
              const gvmList = JSON.parse(localStorage.getItem("gvmList")) || [];
              let suggestions = gvmList.map(
                (item) => `${item.TenNhanVien} - ${item.MaPhongBan}`
              );
              if (value) {
                suggestions = suggestions.filter((name) =>
                  name.toLowerCase().includes(value)
                );
              }
              response(suggestions);
            },
            minLength: 0,
            select: function (event, ui) {
              let parts = ui.item.value.split("-");
              let processedName = parts[0].trim();
              $(this).val(processedName);
              // Cập nhật editedData như logic cũ
              const rowIndex = $(this).data("row");
              const originalValue = renderData[rowIndex]["GiaoVienDieuChinh"];
              if (processedName !== originalValue) {
                const editKey = `${rowIndex}-GiaoVienDieuChinh`;
                editedData.set(editKey, {
                  rowIndex: parseInt(rowIndex),
                  colName: "GiaoVien",
                  newValue: processedName,
                  originalValue: renderData[rowIndex].GiaoVien,
                  data: renderData[rowIndex]
                });
                $(this).css("background-color", "#fff3cd");
              }
              return false;
            },
          });
          // Hiển thị toàn bộ gợi ý khi focus
          $(this).on("focus", function () {
            $(this).autocomplete("search", "");
          });
          // Sự kiện cập nhật dữ liệu chỉnh sửa
          $(this).on("change blur", function () {
            const rowIndex = $(this).data("row");
            const newValue = $(this).val().trim();
            const originalValue = renderData[rowIndex]["GiaoVienDieuChinh"];
            if (newValue !== originalValue) {
              const editKey = `${rowIndex}-GiaoVienDieuChinh`;
              editedData.set(editKey, {
                rowIndex: parseInt(rowIndex),
                colName: "GiaoVien",
                newValue: newValue,
                originalValue: renderData[rowIndex].GiaoVien,
                data: renderData[rowIndex]
              });
              $(this).css("background-color", "#fff3cd");
            }
          });
        });
      }

      // Handle cell edit
      function handleCellEdit(cell) {
        const rowIndex = cell.getAttribute("data-row");
        const colName = cell.getAttribute("data-col");
        const newValue = cell.textContent.trim();
        const originalValue = renderData[rowIndex][colName];

        // Chỉ cho phép chỉnh sửa cột GiaoVienDieuChinh
        if (colName !== "GiaoVienDieuChinh") {
          cell.textContent = originalValue; // Khôi phục giá trị cũ
          return;
        }

        // Don't track if value hasn't changed
        if (newValue === originalValue) {
          return;
        }

        // Store the edit
        const editKey = `${rowIndex}-${colName}`;
        editedData.set(editKey, {
          rowIndex: parseInt(rowIndex),
          colName: "GiaoVien", // Sửa lại tên cột để lưu vào database
          newValue: newValue,
          originalValue: renderData[rowIndex].GiaoVien, // Lấy giá trị từ cột GiaoVien
          data: renderData[rowIndex]
        });

        // Highlight edited cell
        cell.style.backgroundColor = "#fff3cd";
      }
    </script>
    <!-- Phần phân quyền -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Thêm sự kiện click cho phần tử có id="ThongTinGD"
        const ThongTinGD = document.getElementById("ThongTinGD");

        ThongTinGD.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa"); // Lấy role từ localStorage

          if (isKhoa == 0) {
            // Nếu là đào tạo hoặc tài chính
            window.location.href = "/info2";
          } else {
            window.location.href = "/info";
          }
        });

        // Thêm sự kiện click cho phần tử có id="Home"

        const Home = document.getElementById("Home");

        Home.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa");

          if (isKhoa == 0) {
            // Nếu là đào tạo hoặc tài chính
            window.location.href = "/maindt";
          } else {
            window.location.href = "/mainkhoa";
          }
        });
      });
    </script>

    <script>
      document
        .getElementById("changePasswordLink")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage

          if (tenDangNhap) {
            // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
            window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(
              tenDangNhap
            )}`;
          } else {
            alert("Không tìm thấy TenDangNhap trong localStorage.");
          }
        });
    </script>
    <!-- <script>
      $(document).ready(function () {
        $('#filter-nam option[value=""]').remove();
        $('#filter-ki option[value=""]').remove();
        $('#filter-dot option[value=""]').remove();

        $.ajax({
          url: "/getNamHoc",
          method: "GET",
          success: function (response) {
            if (response.success) {
              response.NamHoc.forEach(function (item) {
                console.log(item.NamHoc);
                $("#filter-nam").append(
                  `<option value="${item.NamHoc}">${item.NamHoc}</option>`
                );
              });

              response.Ki.forEach(function (item) {
                console.log(item.Ki);
                $("#filter-ki").append(
                  `<option value="${item.value}">${item.Ki}</option>`
                );
              });
              response.Dot.forEach(function (item) {
                console.log(item.Dot);
                $("#filter-dot").append(
                  `<option value="${item.value}">${item.Dot}</option>`
                );
              });
            } else {
              console.error(
                "Không lấy được dữ liệu năm học:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu năm học:", error);
          },
        });
      });
    </script> -->
    <!-- <script>
      $(document).ready(function () {
        $('#filter-khoa option[value=""]').remove();
        // Gọi AJAX để lấy dữ liệu JSON từ API
        $.ajax({
          url: "/api/shared/faculty-code-list", // Đường dẫn tới API getPhongBan
          method: "GET",
          success: function (response) {
            // Kiểm tra nếu response thành công
            const MaPhongBan = response.MaPhongBan;
            if (response.success) {
              $("#filter-khoa").prepend('<option value="ALL">ALL</option>');
              // Lặp qua từng mục trong mảng MaPhongBan
              response.MaPhongBan.forEach(function (item) {
                // Nếu item.MaPhongBan bằng boMon.MaPhongBan, hiển thị trước
                console.log(item);
                $("#filter-khoa").append(
                  `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                );
              });

              // Nếu không có phòng ban nào tương ứng, bạn có thể thêm tùy chọn mặc định ở đây
              if (!$("#filter-khoa option:selected").length) {
                $("#filter-khoa").prepend(
                  '<option value="">Chọn Phòng Ban</option>'
                );
              }
            } else {
              console.error(
                "Không lấy được dữ liệu phongBan:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu phongBan:", error);
          },
        });
      });
    </script> -->
    <script>
      document
        .getElementById("infome")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const id_User = localStorage.getItem("id_User"); // Lấy id_User từ localStorage\
          if (id_User) {
            // Chuyển hướng đến trang infome và truyền id_User trong URL
            window.location.href = `/infome/${id_User}`;
          } else {
            alert("Không tìm thấy id_User trong localStorage.");
          }
        });
    </script>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const role = localStorage.getItem("userRole");
        const isKhoa = localStorage.getItem("isKhoa");

        // Ẩn button import đồ án
        const importDoAn = document.getElementById("importDoAn");
        const suaHD = document.getElementById("suaHD");

        if (isKhoa == 0 && role == "Duyệt") {
          importDoAn.style.display = "block";
          suaHD.style.display = "block";
        }

        // Ẩn button ngay khi trang được tải
        const actionButton = document.getElementById("changeMessage");
        //Ẩn site thêm thông báo
        if (role === "Duyệt") {
          actionButton.style.display = "";
        } else {
          actionButton.style.display = "none";
        }
      });
    </script>
    <script>
      document
        .getElementById("changeMessage")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

          if (MaPhongBan) {
            // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
            window.location.href = `/changeMessage/${MaPhongBan}`;
          } else {
            alert("Không tìm thấy MaPhongBan trong localStorage.");
          }
        });
    </script>

    <!-- Add this function to show edit requests -->
    <script>
      async function showEditRequests() {
        try {
          const response = await fetch("/get-quy-chuan-edit-requests");
          if (!response.ok) {
            throw new Error("Lỗi khi lấy danh sách yêu cầu chỉnh sửa");
          }

          const requests = await response.json();
          const userRole = localStorage.getItem("userRole");
          const isKhoa = localStorage.getItem("isKhoa");
          const MaPhongBan = localStorage.getItem("MaPhongBan");
          
          // Lọc requests dựa trên quyền
          let filteredRequests = requests;
          if (userRole !== "Thường" && userRole !== "Duyệt") {
            filteredRequests = requests.filter(request => request.khoa === MaPhongBan);
          }
          
          // Create modal content
          let modalContent = `
            <div class="table-responsive">
              <table class="table table-bordered">
                <thead>
                  <tr>
                    <th>Khoa</th>
                    <th>Đợt</th>
                    <th>Kì</th>
                    <th>Năm</th>
                    <th>Lớp học phần</th>
                    <th>Giảng viên theo TKB</th>
                    <th>Giảng viên điều chỉnh</th>
                    <th>Khoa duyệt</th>
                    <th>Đào tạo duyệt</th>
                    <th>BGD duyệt</th>
                    <th>Trạng thái</th>
                    <th>Thao tác</th>
                  </tr>
                </thead>
                <tbody>
              `;

          filteredRequests.forEach(request => {
            const canApproveKhoa = userRole === "Lãnh đạo khoa" && isKhoa === "1";
            const canApproveDaoTao = userRole === "Duyệt" && isKhoa === "0";
            const canApproveBGD = userRole === "Thường";
            const canUpdate = userRole === "Thường";
            const status = request.status === 'Cập nhật thành công' ? 'Đã ban hành' : 'Chưa ban hành';
            const isPublished = request.status === 'Cập nhật thành công';

            modalContent += `
              <tr>
                <td>${request.khoa || ''}</td>
                <td>${request.dot || ''}</td>
                <td>${request.ki_hoc || ''}</td>
                <td>${request.nam_hoc || ''}</td>
                <td>${request.lop_hoc_phan || ''}</td>
                <td>${request.old_value || ''}</td>
                <td>${request.new_value || ''}</td>
                <td>
                  <input type="checkbox" 
                    class="approval-checkbox" 
                    data-request-id="${request.id}" 
                    data-type="khoa"
                    ${request.khoa_duyet ? 'checked' : ''}
                    ${(canApproveKhoa && !isPublished) ? '' : 'disabled'}
                    onchange="handleApproval(this)">
                </td>
                <td>
                  <input type="checkbox" 
                    class="approval-checkbox" 
                    data-request-id="${request.id}" 
                    data-type="daotao"
                    ${request.daotao_duyet ? 'checked' : ''}
                    ${(canApproveDaoTao && !isPublished) ? '' : 'disabled'}
                    onchange="handleApproval(this)">
                </td>
                <td>
                  <input type="checkbox" 
                    class="approval-checkbox" 
                    data-request-id="${request.id}" 
                    data-type="bgd"
                    ${request.bgd_duyet ? 'checked' : ''}
                    ${(canApproveBGD && !isPublished) ? '' : 'disabled'}
                    onchange="handleApproval(this)">
                </td>
                <td>${status}</td>
                <td>
                  ${canUpdate ? `
                    <button 
                      class="btn btn-primary btn-sm update-request-btn" 
                      data-request-id="${request.id}"
                      onclick="updateRequest(${request.id})"
                      ${(!allApproved || isPublished) ? 'disabled' : ''}
                      style="padding: 2px 5px; font-size: 12px; line-height: 1.2;"
                    >
                      Ban Hành
                    </button>
                  ` : ''}
                </td>
              </tr>
            `;
          });

          modalContent += `
                </tbody>
              </table>
            </div>
          `;

          // Show modal
          Swal.fire({
            title: 'Danh sách yêu cầu chỉnh sửa',
            html: modalContent,
            width: '90%',
            showCloseButton: true,
            showConfirmButton: false
          });

        } catch (error) {
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      }

      // Add function to handle approval changes
      async function handleApproval(checkbox) {
        const requestId = checkbox.dataset.requestId;
        const approvalType = checkbox.dataset.type;
        const isChecked = checkbox.checked;

        try {
          const response = await fetch("/update-quy-chuan-approval", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              requestId,
              approvalType,
              isApproved: isChecked
            }),
          });

          if (!response.ok) {
            throw new Error("Lỗi khi cập nhật trạng thái duyệt");
          }

          const result = await response.json();
          
          if (result.success) {
            // Get all checkboxes for this request
            const checkboxes = document.querySelectorAll(`.approval-checkbox[data-request-id="${requestId}"]`);
            const allChecked = Array.from(checkboxes).every(cb => cb.checked);
            
            // Find the update button for this request
            const updateButton = document.querySelector(`.update-request-btn[data-request-id="${requestId}"]`);
            if (updateButton) {
              updateButton.disabled = !allChecked;
            }
          } else {
            throw new Error(result.message || "Lỗi khi cập nhật trạng thái duyệt");
          }
        } catch (error) {
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
          // Revert checkbox state on error
          checkbox.checked = !isChecked;
        }
      }

      // Function to update the actual data when all approvals are granted
      async function updateQuyChuanData(requestId) {
        try {
          const response = await fetch("/apply-quy-chuan-edit", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ requestId }),
          });

          if (!response.ok) {
            throw new Error("Lỗi khi áp dụng chỉnh sửa");
          }

          const result = await response.json();
          
          if (result.success) {
            Swal.fire({
              title: "Thành công",
              text: "Chỉnh sửa đã được áp dụng!",
              icon: "success"
            });
            // Refresh the data
            loadData();
          } else {
            throw new Error(result.message || "Lỗi khi áp dụng chỉnh sửa");
          }
        } catch (error) {
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      }

      // Add function to handle request update
      async function updateRequest(requestId) {
        try {
          // Hiển thị loading
          Swal.fire({
            title: 'Đang xử lý...',
            text: 'Vui lòng chờ trong giây lát',
            allowOutsideClick: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });

          const response = await fetch("/apply-quy-chuan-edit", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ requestId }),
          });

          if (!response.ok) {
            throw new Error("Lỗi khi cập nhật chỉnh sửa");
          }

          const result = await response.json();
          
          if (result.success) {
            // Đóng loading
            Swal.close();

            // Hiển thị thông báo thành công
            await Swal.fire({
              title: "Thành công",
              text: "Chỉnh sửa đã được ban hành thành công!",
              icon: "success",
              confirmButtonText: "OK"
            });

            // Đóng modal nếu đang mở
            const modal = Swal.getPopup();
            if (modal) {
              Swal.close();
            }

            // Load lại danh sách yêu cầu chỉnh sửa mà không hiển thị thông báo lỗi
            try {
              const dot = document.getElementById("filter-dot").value;
              const ki = document.getElementById("filter-ki").value;
              const namHoc = document.getElementById("filter-nam").value;
              const khoa = document.getElementById("filter-khoa").value;

              const loadResponse = await fetch("/get-quy-chuan-edit-requests", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  dot,
                  ki_hoc: ki,
                  nam_hoc: namHoc,
                  khoa
                })
              });

              if (loadResponse.ok) {
                const loadResult = await loadResponse.json();
                if (loadResult.success) {
                  // Cập nhật bảng với dữ liệu mới
                  const tbody = document.getElementById("edit-requests-body");
                  tbody.innerHTML = "";

                  if (!loadResult.data || loadResult.data.length === 0) {
                    tbody.innerHTML = `
                      <tr>
                        <td colspan="12" class="text-center">Không có yêu cầu chỉnh sửa nào</td>
                      </tr>
                    `;
                    return;
                  }

                  // Render lại bảng với dữ liệu mới
                  loadResult.data.forEach(request => {
                    const userRole = localStorage.getItem("userRole");
                    const isKhoa = localStorage.getItem("isKhoa");
                    
                    const canApproveKhoa = userRole === "Lãnh đạo khoa" && isKhoa === "1";
                    const canApproveDaoTao = userRole === "Duyệt" && isKhoa === "0";
                    const canApproveBGD = userRole === "Thường";
                    const canUpdate = userRole === "Thường";
                    const status = request.status === 'Cập nhật thành công' ? 'Đã ban hành' : 'Chưa ban hành';
                    const isPublished = request.status === 'Cập nhật thành công';

                    const row = document.createElement("tr");
                    row.innerHTML = `
                      <td>${request.khoa || ''}</td>
                      <td>${request.dot || ''}</td>
                      <td>${request.ki_hoc || ''}</td>
                      <td>${request.nam_hoc || ''}</td>
                      <td>${request.lop_hoc_phan || ''}</td>
                      <td>${request.old_value || ''}</td>
                      <td>${request.new_value || ''}</td>
                      <td>
                        <input type="checkbox" 
                          class="approval-checkbox" 
                          data-request-id="${request.id}" 
                          data-type="khoa"
                          ${request.khoa_duyet ? 'checked' : ''}
                          ${(canApproveKhoa && !isPublished) ? '' : 'disabled'}
                          onchange="handleApproval(this)">
                      </td>
                      <td>
                        <input type="checkbox" 
                          class="approval-checkbox" 
                          data-request-id="${request.id}" 
                          data-type="daotao"
                          ${request.daotao_duyet ? 'checked' : ''}
                          ${(canApproveDaoTao && !isPublished) ? '' : 'disabled'}
                          onchange="handleApproval(this)">
                      </td>
                      <td>
                        <input type="checkbox" 
                          class="approval-checkbox" 
                          data-request-id="${request.id}" 
                          data-type="bgd"
                          ${request.bgd_duyet ? 'checked' : ''}
                          ${(canApproveBGD && !isPublished) ? '' : 'disabled'}
                          onchange="handleApproval(this)">
                      </td>
                      <td>${status}</td>
                      <td>
                        ${canUpdate ? `
                          <button 
                            class="btn btn-primary btn-sm update-request-btn" 
                            data-request-id="${request.id}"
                            onclick="updateRequest(${request.id})"
                            ${(!allApproved || isPublished) ? 'disabled' : ''}
                            style="padding: 2px 5px; font-size: 12px; line-height: 1.2;"
                          >
                            Ban Hành
                          </button>
                        ` : ''}
                      </td>
                    `;
                    tbody.appendChild(row);
                  });
                }
              }
            } catch (loadError) {
              console.error("Error loading updated list:", loadError);
              // Không hiển thị thông báo lỗi khi load lại danh sách
            }
          } else {
            throw new Error(result.message || "Lỗi khi cập nhật chỉnh sửa");
          }
        } catch (error) {
          console.error("Error in updateRequest:", error);
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      }

      // Add click handler for the request edit button
      document.getElementById("request-edit-btn").addEventListener("click", showEditRequests);
    </script>

    <!-- Add this to your existing DOMContentLoaded event listener -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const role = localStorage.getItem("userRole");
        const isKhoa = localStorage.getItem("isKhoa");

        // Show/hide request edit button based on role
        const requestEditBtn = document.getElementById("request-edit-btn");
        if (role === "Lãnh đạo khoa" || role === "GV" || role === "Duyệt") {
          requestEditBtn.style.display = "block";
        } else {
          requestEditBtn.style.display = "none";
        }

        // ... rest of your existing DOMContentLoaded code ...
      });
    </script>

    <!-- Add event listener for export button -->
    <script>
      document.getElementById("export-adjusted-btn").addEventListener("click", async function() {
        // Get current filter values
        const dot = document.getElementById("filter-dot").value;
        const ki = document.getElementById("filter-ki").value;
        const namHoc = document.getElementById("filter-nam").value;
        const khoa = document.getElementById("filter-khoa").value;

        if (!dot || !ki || !namHoc) {
          Swal.fire({
            title: "Thông báo",
            text: "Vui lòng chọn đầy đủ thông tin đợt, kỳ và năm học!",
            icon: "warning"
          });
          return;
        }

        try {
          const response = await fetch("/export-adjusted-quy-chuan", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              khoa,
              dot,
              ki_hoc: ki,
              nam_hoc: namHoc
            }),
          });

          if (!response.ok) {
            throw new Error("Lỗi khi xuất file");
          }

          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = `quy_chuan_dieu_chinh_${dot}_${ki}_${namHoc}_${khoa}.xlsx`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);

        } catch (error) {
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      });
    </script>

    <!-- Add this script after your existing scripts -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Initialize filter comboboxes
        initializeFilterComboboxes();
        
        // Load edit requests by default
        loadEditRequests();

        // Add click handler for the show edit form button
        document.getElementById("show-edit-form-btn").addEventListener("click", () => {
          // Initialize modal comboboxes when modal is shown
          initializeModalComboboxes();
          
          const modal = new bootstrap.Modal(document.getElementById('editQuyChuanModal'));
          modal.show();
        });

        // Add click handler for filter button
        document.getElementById("filter-btn").addEventListener("click", () => {
          loadEditRequests();
        });

        // Tự động bấm nút Hiển thị khi vào trang
        setTimeout(function() {
          $("#filter-btn").trigger("click");
        }, 200); // Đợi 200ms cho chắc chắn combobox đã khởi tạo xong
      });

      // Function to initialize filter comboboxes
      function initializeFilterComboboxes() {
        // Copy the same initialization code from your existing combobox initialization
        // but use the new IDs (filter-dot, filter-ki, filter-nam, filter-khoa)
        $('#filter-nam option[value=""]').remove();
        $('#filter-ki option[value=""]').remove();
        $('#filter-dot option[value=""]').remove();

        $.ajax({
          url: "/getNamHoc",
          method: "GET",
          success: function (response) {
            if (response.success) {
              response.NamHoc.forEach(function (item) {
                $("#filter-nam").append(
                  `<option value="${item.NamHoc}">${item.NamHoc}</option>`
                );
              });

              response.Ki.forEach(function (item) {
                $("#filter-ki").append(
                  `<option value="${item.value}">${item.Ki}</option>`
                );
              });
              response.Dot.forEach(function (item) {
                $("#filter-dot").append(
                  `<option value="${item.value}">${item.Dot}</option>`
                );
              });
            }
          }
        });

        // Khởi tạo combobox khoa với phân quyền
        $('#filter-khoa option[value=""]').remove();
        $.ajax({
          url: "/api/shared/faculty-code-list",
          method: "GET",
          success: function (response) {
            if (response.success) {
              const userRole = localStorage.getItem("userRole");
              const MaPhongBan = localStorage.getItem("MaPhongBan");
              
              // Nếu là giảng viên thường hoặc có quyền Duyệt, hiển thị tất cả khoa
              if (userRole === "Thường" || userRole === "Duyệt") {
                $("#filter-khoa").prepend('<option value="ALL">ALL</option>');
                response.MaPhongBan.forEach(function (item) {
                  $("#filter-khoa").append(
                    `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                  );
                });
              } else {
                // Nếu là giảng viên, chỉ hiển thị khoa của họ
                response.MaPhongBan.forEach(function (item) {
                  if (item.MaPhongBan === MaPhongBan) {
                    $("#filter-khoa").append(
                      `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                    );
                  }
                });
              }
            }
          }
        });
      }

      // Modified function to load edit requests with filters
      async function loadEditRequests() {
        try {
          const dot = document.getElementById("filter-dot").value;
          const ki = document.getElementById("filter-ki").value;
          const namHoc = document.getElementById("filter-nam").value;
          const khoa = document.getElementById("filter-khoa").value;
          
          // Lấy role và isKhoa từ localStorage
          const userRole = localStorage.getItem("userRole");
          const isKhoa = localStorage.getItem("isKhoa");

          console.log("Loading edit requests with filters:", { dot, ki, namHoc, khoa });

          const response = await fetch("/get-quy-chuan-edit-requests", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              dot,
              ki_hoc: ki,
              nam_hoc: namHoc,
              khoa
            })
          });

          if (!response.ok) {
            throw new Error("Lỗi khi lấy danh sách yêu cầu chỉnh sửa");
          }

          const result = await response.json();
          console.log("Server response:", result);

          if (!result.success) {
            throw new Error(result.message || "Lỗi khi lấy danh sách yêu cầu chỉnh sửa");
          }

          const requests = result.data;
          const tbody = document.getElementById("edit-requests-body");
          tbody.innerHTML = "";

          if (!requests || requests.length === 0) {
            tbody.innerHTML = `
              <tr>
                <td colspan="12" class="text-center">Không có yêu cầu chỉnh sửa nào</td>
              </tr>
            `;
            return;
          }

          requests.forEach(request => {
            const canApproveKhoa = userRole === "Lãnh đạo khoa" && isKhoa === "1";
            const canApproveDaoTao = userRole === "Duyệt" && isKhoa === "0";
            const canApproveBGD = userRole === "Thường";
            const canUpdate = userRole === "Thường";
            const status = request.status === 'Cập nhật thành công' ? 'Đã ban hành' : 'Chưa ban hành';
            const isPublished = request.status === 'Cập nhật thành công';

            const row = document.createElement("tr");
            row.innerHTML = `
              <td>${request.khoa || ''}</td>
              <td>${request.dot || ''}</td>
              <td>${request.ki_hoc || ''}</td>
              <td>${request.nam_hoc || ''}</td>
              <td>${request.lop_hoc_phan || ''}</td>
              <td>${request.old_value || ''}</td>
              <td>${request.new_value || ''}</td>
              <td>
                <input type="checkbox" 
                  class="approval-checkbox" 
                  data-request-id="${request.id}" 
                  data-type="khoa"
                  ${request.khoa_duyet ? 'checked' : ''}
                  ${(canApproveKhoa && !isPublished) ? '' : 'disabled'}
                  onchange="handleApproval(this)">
              </td>
              <td>
                <input type="checkbox" 
                  class="approval-checkbox" 
                  data-request-id="${request.id}" 
                  data-type="daotao"
                  ${request.daotao_duyet ? 'checked' : ''}
                  ${(canApproveDaoTao && !isPublished) ? '' : 'disabled'}
                  onchange="handleApproval(this)">
              </td>
              <td>
                <input type="checkbox" 
                  class="approval-checkbox" 
                  data-request-id="${request.id}" 
                  data-type="bgd"
                  ${request.bgd_duyet ? 'checked' : ''}
                  ${(canApproveBGD && !isPublished) ? '' : 'disabled'}
                  onchange="handleApproval(this)">
              </td>
              <td>${status}</td>
              <td>
                ${canUpdate ? `
                  <button 
                    class="btn btn-primary btn-sm update-request-btn" 
                    data-request-id="${request.id}"
                    onclick="updateRequest(${request.id})"
                    ${(!allApproved || isPublished) ? 'disabled' : ''}
                    style="padding: 2px 5px; font-size: 12px; line-height: 1.2;"
                  >
                    Ban Hành
                  </button>
                ` : ''}
              </td>
            `;
            tbody.appendChild(row);
          });

        } catch (error) {
          console.error("Error in loadEditRequests:", error);
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      }

      // Add this function to initialize modal comboboxes
      function initializeModalComboboxes() {
        $('#modal-nam option[value=""]').remove();
        $('#modal-ki option[value=""]').remove();
        $('#modal-dot option[value=""]').remove();
        $('#modal-khoa option[value=""]').remove();

        $.ajax({
          url: "/getNamHoc",
          method: "GET",
          success: function (response) {
            if (response.success) {
              response.NamHoc.forEach(function (item) {
                $("#modal-nam").append(
                  `<option value="${item.NamHoc}">${item.NamHoc}</option>`
                );
              });

              response.Ki.forEach(function (item) {
                $("#modal-ki").append(
                  `<option value="${item.value}">${item.Ki}</option>`
                );
              });
              response.Dot.forEach(function (item) {
                $("#modal-dot").append(
                  `<option value="${item.value}">${item.Dot}</option>`
                );
              });
            }
          }
        });

        // Khởi tạo combobox khoa trong modal với phân quyền
        $.ajax({
          url: "/api/shared/faculty-code-list",
          method: "GET",
          success: function (response) {
            if (response.success) {
              const userRole = localStorage.getItem("userRole");
              const MaPhongBan = localStorage.getItem("MaPhongBan");
              
              // Nếu là giảng viên thường hoặc có quyền Duyệt, hiển thị tất cả khoa
              if (userRole === "Thường" || userRole === "Duyệt") {
                $("#modal-khoa").prepend('<option value="ALL">ALL</option>');
                response.MaPhongBan.forEach(function (item) {
                  $("#modal-khoa").append(
                    `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                  );
                });
              } else {
                // Nếu là giảng viên, chỉ hiển thị khoa của họ
                response.MaPhongBan.forEach(function (item) {
                  if (item.MaPhongBan === MaPhongBan) {
                    $("#modal-khoa").append(
                      `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                    );
                  }
                });
              }
            }
          }
        });
      }

      // Modify the modal request edit button click handler
      document.getElementById("modal-request-edit").addEventListener("click", async function() {
        if (editedData.size === 0) {
          Swal.fire({
            title: "Thông báo",
            text: "Không có thay đổi nào để yêu cầu chỉnh sửa!",
            icon: "info"
          });
          return;
        }

        try {
          // Lấy giá trị từ các combobox
          const dotValue = document.getElementById("modal-dot").value;
          const kiValue = document.getElementById("modal-ki").value;
          const namValue = document.getElementById("modal-nam").value;
          const khoaValue = document.getElementById("modal-khoa").value;

          // Kiểm tra dữ liệu đầu vào
          if (!dotValue || !kiValue || !namValue) {
            Swal.fire({
              title: "Thông báo",
              text: "Vui lòng chọn đầy đủ thông tin đợt, kỳ và năm học!",
              icon: "warning"
            });
            return;
          }

          const response = await fetch("/request-quy-chuan-edit", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              updates: Array.from(editedData.values())
            }),
          });

          if (!response.ok) {
            throw new Error("Lỗi khi gửi yêu cầu chỉnh sửa");
          }

          const result = await response.json();
          
          if (result.success) {
            Swal.fire({
              title: "Thành công",
              text: "Yêu cầu chỉnh sửa đã được gửi!",
              icon: "success"
            });
            editedData.clear();
            
            // Close the modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('editQuyChuanModal'));
            modal.hide();
            
            // Refresh the requests list with current filters
            loadEditRequests();
          } else {
            throw new Error(result.message || "Lỗi khi gửi yêu cầu chỉnh sửa");
          }
        } catch (error) {
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      });
    </script>

    <!-- Thêm xử lý sự kiện cho nút Hiển thị trong modal -->
    <script>
      document.getElementById("modal-render").addEventListener("click", async function() {
        try {
          // Lấy giá trị từ các combobox
          const dotValue = document.getElementById("modal-dot").value;
          const kiValue = document.getElementById("modal-ki").value;
          const namValue = document.getElementById("modal-nam").value;
          const khoaValue = document.getElementById("modal-khoa").value;

          // Kiểm tra dữ liệu đầu vào
          if (!dotValue || !kiValue || !namValue) {
            Swal.fire({
              title: "Thông báo",
              text: "Vui lòng chọn đầy đủ thông tin đợt, kỳ và năm học!",
              icon: "warning"
            });
            return;
          }

          // Hiển thị loading
          document.getElementById("modal-loading").style.display = "block";

          // Gửi request lấy dữ liệu
          const response = await fetch("/quy-chuan-chinh-thuc", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              Khoa: khoaValue,
              Dot: dotValue,
              Ki: kiValue,
              Nam: namValue,
            }),
          });

          if (!response.ok) {
            throw new Error("Lỗi khi lấy dữ liệu quy chuẩn");
          }

          // Lưu dữ liệu và render bảng
          renderData = await response.json();
          renderModalTable(renderData);

        } catch (error) {
          console.error("Lỗi:", error);
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        } finally {
          // Ẩn loading
          document.getElementById("modal-loading").style.display = "none";
        }
      });

      // Hàm render bảng trong modal
      function renderModalTable(data) {
        const columnsToDisplay = [
          "Khoa",
          "Dot",
          "KiHoc",
          "NamHoc",
          "LopHocPhan",
          "GiaoVien",
          "GiaoVienDieuChinh",
          "MoiGiang",
          "SoTinChi",
          "TenLop",
          "LL",
          "QuyChuan",
        ];

        const headersMap = {
          Khoa: "Khoa",
          Dot: "Đợt",
          KiHoc: "Kì",
          NamHoc: "Năm",
          LopHocPhan: "Lớp học phần",
          GiaoVien: "Giảng viên theo TKB",
          GiaoVienDieuChinh: "Giảng viên điều chỉnh",
          MoiGiang: "Mời giảng?",
          SoTinChi: "Số tín chỉ",
          TenLop: "Tên lớp",
          LL: "Số tiết lên lớp",
          QuyChuan: "Số tiết quy chuẩn",
        };

        // Render header
        let headerHtml = "";
        columnsToDisplay.forEach((col) => {
          headerHtml += `<th>${headersMap[col] || col}</th>`;
        });
        document.getElementById("modal-table-header").innerHTML = headerHtml;

        // Render body
        let bodyHtml = "";
        data.forEach((item, rowIndex) => {
          let rowHtml = columnsToDisplay.map((key) => {
            let cellValue = item[key] !== null ? item[key] : "";

            if (key === "MoiGiang") {
              cellValue = cellValue === 1 ? "Có" : "Không";
            }

            // Danh sách các cột không được phép chỉnh sửa
            const nonEditableColumns = [
              "Khoa", 
              "Dot", 
              "KiHoc", 
              "NamHoc", 
              "LopHocPhan", 
              "MoiGiang", 
              "SoTinChi", 
              "TenLop", 
              "LL", 
              "QuyChuan",
              "GiaoVien" // Thêm GiaoVien vào danh sách không được chỉnh sửa
            ];
            
            const isEditable = !nonEditableColumns.includes(key);
            
            if (isEditable) {
              return `<td contenteditable="true" data-row="${rowIndex}" data-col="${key}" onblur="handleCellEdit(this)" style="cursor: pointer;">${cellValue}</td>`;
            } else {
              return `<td>${cellValue}</td>`;
            }
          }).join("");
          
          bodyHtml += `<tr>${rowHtml}</tr>`;
        });

        document.getElementById("modal-data-table-body").innerHTML = bodyHtml;
      }

      // Hàm xử lý sự kiện khi cell được edit
      function handleCellEdit(cell) {
        const rowIndex = cell.getAttribute("data-row");
        const colName = cell.getAttribute("data-col");
        const newValue = cell.textContent.trim();
        const originalValue = renderData[rowIndex][colName];

        // Chỉ cho phép chỉnh sửa cột GiaoVienDieuChinh
        if (colName !== "GiaoVienDieuChinh") {
          cell.textContent = originalValue; // Khôi phục giá trị cũ
          return;
        }

        // Don't track if value hasn't changed
        if (newValue === originalValue) {
          return;
        }

        // Store the edit
        const editKey = `${rowIndex}-${colName}`;
        editedData.set(editKey, {
          rowIndex: parseInt(rowIndex),
          colName: "GiaoVien", // Sửa lại tên cột để lưu vào database
          newValue: newValue,
          originalValue: renderData[rowIndex].GiaoVien, // Lấy giá trị từ cột GiaoVien
          data: renderData[rowIndex]
        });

        // Highlight edited cell
        cell.style.backgroundColor = "#fff3cd";
      }
    </script>
    <script>
      // Hàm để lấy danh sách giảng viên từ API
      async function fetchGiangVienList() {
        try {
          const response = await fetch("/api/giangvien"); // Gọi API
          if (!response.ok) {
            throw new Error("Network response was not ok");
          }
          const gvmList = await response.json(); // Chuyển đổi dữ liệu thành JSON
          return gvmList;
        } catch (error) {
          console.error("Error fetching giang vien list:", error);
          return []; // Trả về mảng rỗng nếu có lỗi
        }
      }

      $(document).ready(async function () {
        const gvmList = await fetchGiangVienList();
        localStorage.setItem("gvmList", JSON.stringify(gvmList)); // Lưu vào localStorage
        // Sau đó mới render bảng/modal
      });

      // $(document).ready(function () {
      //   // Cấu hình autocomplete
      //   $("#search-teacher").autocomplete({
      //     source: function (request, response) {
      //       const value = request.term.toLowerCase();

      //       const gvmList = JSON.parse(localStorage.getItem("gvmList"));

      //       let suggestions = gvmList.map(
      //         (item) => `${item.TenNhanVien} - ${item.MaPhongBan}`
      //       );

      //       // Nếu có giá trị nhập vào thì lọc
      //       if (value) {
      //         suggestions = suggestions.filter((name) =>
      //           name.toLowerCase().includes(value)
      //         );
      //       }

      //       response(suggestions);
      //     },
      //     minLength: 0, // Cho phép hiển thị ngay khi nhấn vào ô input
      //     select: function (event, ui) {
      //       let parts = ui.item.value.split("-");
      //       let processedName = parts[0].trim();
      //       $("#search-teacher").val(processedName);
      //       return false;
      //     },
      //   });

      //   // Khi click vào ô input, hiển thị danh sách gợi ý ngay lập tức
      //   $("#search-teacher").on("focus", function () {
      //     $(this).autocomplete("search", ""); // Gọi autocomplete với chuỗi rỗng để hiển thị toàn bộ
      //   });
      // });
    </script>
  </body>
</html>