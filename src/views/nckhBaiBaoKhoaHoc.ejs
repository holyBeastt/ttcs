<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="/css/admin.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
  <link rel="stylesheet" href="/css/nckh.css" />
</head>

<body>
  <!-- Phần header -->
  <%- include('header') %>

    <!-- Phần nội dung -->
    <div class="my-3 box formNckh">
      <h2 class="titleNckh">Bằng sáng chế và giải thưởng</h2>

      <div class="tabs">
        <ul class="tabs-nav">
          <li class="tab-item">
            <a href="#formTab" class="tab-link" id="tab-form" onclick="toggleTabs(event, 'formTab', 'tab-form')">Nhập
              bằng sáng chế, giải thưởng</a>
          </li>
          <li class="tab-item">
            <a href="#viewTab" class="tab-link" id="tab-view" onclick="toggleTabs(event, 'viewTab', 'tab-view')">Xem số
              giờ quy đổi tương ứng</a>
          </li>
        </ul>
      </div>

      <!-- form tab -->
      <div id="formTab" class="tab-content py-4">
        <form id="formData" class="">
          <div class="form-group flex-container">
            <!-- Phân loại -->
            <div class="flex-item">
              <label for="phanLoai">Phân loại</label>
              <select id="phanLoai" name="phanLoai" required>
                <option value="Bằng độc quyền sáng chế">Bằng độc quyền sáng chế</option>
                <option value="Giải thưởng khoa học và công nghệ cấp Quốc gia">Giải thưởng khoa học và công nghệ cấp
                  Quốc gia</option>
                <option value="Giải thưởng khoa học và công nghệ cấp Bộ trở lên">Giải thưởng khoa học và công nghệ cấp
                  Bộ trở lên</option>
                <option value="Giải thưởng khoa học và công nghệ cấp dưới Bộ">Giải thưởng khoa học và công nghệ cấp dưới
                  Bộ</option>
                <option value="Giải pháp hữu ích">Giải pháp hữu ích</option>
              </select>
            </div>
            <!-- Năm học -->
            <div class="flex-item">
              <label for="namHocForm">Năm học</label>
              <select class="namHoc" id="namHocForm" name="namHoc" required>
                <!-- Các năm học sẽ được thêm vào đây bằng JavaScript -->
              </select>
            </div>
          </div>

          <!-- Tên bằng sáng chế, giải thưởng -->
          <div class="form-group">
            <label for="tenBangSangChe">Tên bằng sáng chế, giải thưởng</label>
            <input type="text" id="tenBangSangChe" name="tenBangSangChe"
              placeholder="Nhập tên bằng sáng chế hoặc giải thưởng" required />
          </div>

          <!-- Ngày quyết định, số quyết định, tác giả trên cùng một dòng -->
          <div class="form-group flex-container">
            <!-- Số quyết định công nhận -->
            <div class="flex-item">
              <label for="soQuyetDinh">Số quyết định công nhận</label>
              <input type="text" id="soQuyetDinh" name="soQuyetDinh" placeholder="VD: 1277/QĐ-HVM" required />
            </div>

            <!-- Ngày quyết định công nhận -->
            <div class="flex-item">
              <label for="ngayQuyetDinh">Ngày quyết định công nhận</label>
              <input type="date" id="ngayQuyetDinh" name="ngayQuyetDinh" required />
            </div>
          </div>

          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="tacGia">
                Tác giả chính
                <input type="checkbox" id="tacGiaCheckbox" name="tacGiaCheckbox" />
              </label>
              <div id="tacGia-suggestions" class="suggestions-container"></div>
              <input type="text" id="tacGia" name="tacGia" placeholder="Nhập tên tác giả" required />
            </div>
            <div class="flex-item">
              <label for="tacGiaComboBox">Đơn vị</label>
              <select id="tacGiaComboBox" name="tacGiaComboBox">
                <option value="KMA" selected>KMA</option>
              </select>
            </div>
          </div>

          <!-- Thành viên -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="thanhVien">
                Thành viên
                <input type="checkbox" id="thanhVienCheckbox" name="thanhVienCheckbox" />
              </label>
              <div id="themThanhVien-suggestions" class="suggestions-container-dstv"></div>
              <input type="text" id="thanhVien" name="thanhVien" placeholder="Nhập tên thành viên"
                class="input-field" />
            </div>
            <div class="flex-item">
              <label for="thanhVienComboBox">Đơn vị</label>
              <select id="thanhVienComboBox" name="thanhVienComboBox">
                <option value="KMA" selected>KMA</option>
              </select>
            </div>
          </div>

          <div id="memberListDisplay" class="member-list-display form-group"></div>

          <button type="button" class="btn" id="submitBtn">Gửi</button>
        </form>
      </div>

      <!-- view tab -->
      <div id="viewTab" class="tab-content py-4 hidden">
        <h2 class="titleNckh"></h2>
        <div class="flex-container-view">
          <div class="flex-item">
            <label for="namHocXem">Chọn Năm Học:</label>
            <select id="namHocXem" class="namHoc"></select>
          </div>
          <div class="flex-item">
            <label for="MaPhongBanView">Khoa</label>
            <select id="MaPhongBanView" class="MaPhongBan" style="width: 150px; height: 35px;"></select>
          </div>
          <div class="flex-item-view">
            <button onclick="getData()" class="btn text-nowrap" id="render">Hiển thị</button>
          </div>
        </div>

        <div class="table-container">
          <table border="1" class="table table-bordered">
            <thead id="table-header">
              <tr>
                <th>Phân loại</th>
                <th>Tên bằng, giải thưởng</th>
                <th>Ngày QĐ công nhận</th>
                <th>Số QĐ công nhận</th>
                <th>Tác Giả</th>
                <th>Thành viên</th>
              </tr>
            </thead>
            <tbody id="table-body"></tbody>
          </table>
        </div>
      </div>
    </div>


    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- nckh view -->
    <script>
      // format giờ cho thành viên
      function formatDanhSachThanhVien(DanhSachThanhVien) {
        // Kiểm tra nếu đầu vào không phải chuỗi hoặc chuỗi rỗng
        if (
          typeof DanhSachThanhVien !== "string" ||
          !DanhSachThanhVien.trim()
        ) {
          return ""; // Nếu không hợp lệ, trả về chuỗi rỗng
        }

        // Tách chuỗi thành viên dựa trên dấu phẩy và xử lý từng thành viên
        const thanhVienFormatted = DanhSachThanhVien.split(",") // Tách chuỗi thành viên bằng dấu phẩy
          .map((member) => {
            const trimmedMember = member.trim(); // Loại bỏ khoảng trắng thừa
            if (trimmedMember) {
              return formatHours(trimmedMember); // Định dạng giờ cho từng thành viên
            }
            return ""; // Nếu phần tử rỗng hoặc không hợp lệ, trả về chuỗi rỗng
          })
          .filter(Boolean) // Loại bỏ các phần tử rỗng trong mảng
          .join(", "); // Nối lại thành chuỗi các thành viên đã được định dạng

        return thanhVienFormatted;
      }

      // format giờ
      function formatHours(text) {
        // Kiểm tra nếu text không phải là chuỗi
        if (typeof text !== "string") {
          return text;
        }

        const match = text.match(/(\d+[\.,]?\d*)\s*giờ/);

        if (match) {
          const hours = parseFloat(match[1].replace(",", "."));
          const roundedHours = Math.floor(hours); // Làm tròn xuống thành số nguyên
          return text.replace(match[1], roundedHours); // Thay thế số giờ cũ bằng số giờ đã làm tròn
        }

        return text; // Trả về chuỗi gốc nếu không tìm thấy số giờ
      }

      // render table
      function renderTable(data) {
        const tbody = document.getElementById("table-body");

        // Xóa dữ liệu cũ
        tbody.innerHTML = "";

        // Duyệt qua dữ liệu và thêm từng hàng vào tbody
        data.forEach((item) => {
          const row = document.createElement("tr");

          // Sử dụng hàm formatHours để định dạng chuỗi giờ cho Chủ nhiệm, Thư ký, Thành viên
          const tacGiaFormated = formatHours(item.TacGia);
          const tacGiaCtnFormated = formatHours(item.TacGiaChiuTrachNhiem);
          const thanhVienFormatted = formatDanhSachThanhVien(
            item.DanhSachThanhVien
          );

          row.innerHTML = `
      <td>${item.LoaiTapChi}</td>
      <td>${item.TenBaiBao}</td>
      <td>${tacGiaFormated}</td>
      <td>${tacGiaCtnFormated}</td>
      <td>${thanhVienFormatted}</td>
    `;
          tbody.appendChild(row);
        });
      }

      // Hàm để gửi yêu cầu đến server và hiển thị dữ liệu
      async function getData() {
        const year = document.getElementById("namHocXem").value; // Lấy năm học từ select
        const department = document.getElementById("MaPhongBanView").value; // Lấy năm học từ select
        const url = `/baibaokhoahoc/${year}/${department}`; // Tạo URL với URL parameter 'NamHoc'

        try {
          fetch(url) // Thay URL bằng endpoint của bạn
            .then((response) => response.json())
            .then((data) => {
              renderTable(data); // Gọi hàm renderTable với dữ liệu từ server
            })
            .catch((error) => {
              console.error("Lỗi khi lấy dữ liệu:", error);
            });
        } catch (error) {
          console.error("Lỗi trong quá trình gửi yêu cầu:", error);
        }
      }
    </script>
    <!-- nckh form -->
    <script>
      // giảng viên cơ hữu của trường, để gợi ý tên
      var giangVienCoHuu = [];

      // check thì mới cho nhập đơn vị
      document.addEventListener("DOMContentLoaded", function () {
        // Lấy các checkbox và ô nhập đơn vị
        const tacGiaCheckbox = document.getElementById("tacGiaCheckbox");
        const tacGiaCtnCheckbox = document.getElementById("tacGiaCtnCheckbox");
        const thanhVienCheckbox = document.getElementById("thanhVienCheckbox");

        const tacGiaComboBox = document.getElementById("tacGiaComboBox");
        const tacGiaCtnComboBox = document.getElementById("tacGiaCtnComboBox");
        const thanhVienComboBox = document.getElementById("thanhVienComboBox");

        // Hàm disable hoặc enable ô nhập đơn vị
        function toggleComboBoxDisabled() {
          // Tác giả chính
          if (tacGiaCheckbox.checked) {
            tacGiaComboBox.disabled = false;
          } else {
            tacGiaComboBox.disabled = true;
            tacGiaComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }

          // Tác giả chịu trách nhiệm
          if (tacGiaCtnCheckbox.checked) {
            tacGiaCtnComboBox.disabled = false;
          } else {
            tacGiaCtnComboBox.disabled = true;
            tacGiaCtnComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }

          // Thành viên
          if (thanhVienCheckbox.checked) {
            thanhVienComboBox.disabled = false;
          } else {
            thanhVienComboBox.disabled = true;
            thanhVienComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }
        }

        // Disable các ô nhập đơn vị khi tải trang
        toggleComboBoxDisabled();

        // Thêm sự kiện thay đổi (change) cho các checkbox
        tacGiaCheckbox.addEventListener("change", toggleComboBoxDisabled);
        tacGiaCtnCheckbox.addEventListener("change", toggleComboBoxDisabled);
        thanhVienCheckbox.addEventListener("change", toggleComboBoxDisabled);
      });

      // =================================================================
      // Hàm cập nhật các tùy chọn cho loại tạp chí và chỉ số tạp chí
      function updateOptions(phanLoai) {
        const loaiTapChi = document.getElementById("loaiTapChi");
        const chiSoTapChi = document.getElementById("chiSoTapChi");

        // Làm trống các tùy chọn tạp chí và chỉ số tạp chí
        loaiTapChi.innerHTML =
          '<option value="">-- Chọn loại tạp chí --</option>';
        chiSoTapChi.innerHTML =
          '<option value="">-- Chọn chỉ số tạp chí --</option>';

        if (phanLoai === "baiBaoKhoaHoc") {
          // Các tùy chọn cho bài báo khoa học
          loaiTapChi.innerHTML += `
<option value="Tạp chí Nature; AAAS">Tạp chí Nature; AAAS</option>
<option value="Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q1)">Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q1)</option>
<option value="Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q2)">Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q2)</option>
<option value="Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q3)">Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q3)</option>
<option value="Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q4)">Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q4)</option>
<option value="Tạp chí quốc tế thuộc danh mục Web of Science, Scopus và các tạp chí quốc tế khác">
Tạp chí quốc tế thuộc danh mục Web of Science, Scopus và các tạp chí quốc tế khác
</option>
<option value="Tạp chí khoa học chuyên ngành trong nước được Hội đồng Chức danh Giáo sư Nhà nước công nhận (>= 1 điểm)">
Tạp chí khoa học chuyên ngành trong nước được Hội đồng Chức danh Giáo sư Nhà nước công nhận (>= 1 điểm)
</option>
<option value="Tạp chí khoa học chuyên ngành trong nước được Hội đồng Chức danh Giáo sư Nhà nước công nhận (>= 0.5 điểm)">
Tạp chí khoa học chuyên ngành trong nước được Hội đồng Chức danh Giáo sư Nhà nước công nhận (>= 0.5 điểm)
</option>
`;
          // Các chỉ số tạp chí cho bài báo khoa học
          chiSoTapChi.innerHTML += `
<option value="Tạp chí Nature; AAAS">Tạp chí Nature; AAAS</option>
<option value="Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q1)">Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q1)</option>
<option value="Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q2)">Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q2)</option>
<option value="Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q3)">Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q3)</option>
<option value="Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q4)">Tạp chí khoa học thuộc hệ thống ISI/Scopus (Q4)</option>
<option value="Tạp chí quốc tế thuộc danh mục Web of Science, Scopus và các tạp chí quốc tế khác">
Tạp chí quốc tế thuộc danh mục Web of Science, Scopus và các tạp chí quốc tế khác
</option>
`;
        } else if (phanLoai === "baoCaoKhoaHoc") {
          // Các tùy chọn cho báo cáo khoa học
          loaiTapChi.innerHTML += `
<option value="Nội san học viện">Nội san/Kỷ yếu khoa học cấp học viện</option>
<option value="Nội san cấp khoa">Nội san/Kỷ yếu khoa học cấp học khoa</option>
<option value="Hội thảo chuyên ngành">Hội thảo chuyên ngành</option>
<option value="Hội nghị khoa học trong nước">Hội nghị khoa học trong nước</option>
<option value="Hội nghị, hội thảo khoa học quốc tế">Hội nghị, hội thảo khoa học quốc tế</option>
<option value="Hội nghị, hội thảo khoa học quốc tế (ISI/Scopus)">Hội nghị, hội thảo khoa học quốc tế (ISI/Scopus)</option>
`;
          // Các chỉ số tạp chí cho báo cáo khoa học
          chiSoTapChi.innerHTML += `
<option value="Nội san học viện">Nội san/Kỷ yếu khoa học cấp học viện</option>
<option value="Nội san cấp khoa">Nội san/Kỷ yếu khoa học cấp học khoa</option>
<option value="Hội thảo chuyên ngành">Hội thảo chuyên ngành</option>
<option value="Hội nghị khoa học trong nước">Hội nghị khoa học trong nước</option>
<option value="Hội nghị, hội thảo khoa học quốc tế">Hội nghị, hội thảo khoa học quốc tế</option>
<option value="Hội nghị, hội thảo khoa học quốc tế (ISI/Scopus)">Hội nghị, hội thảo khoa học quốc tế (ISI/Scopus)</option>
`;
        }
      }

      // Đảm bảo form sẽ tự động cập nhật khi trang được tải, ngay cả khi mặc định là bài báo khoa học
      window.addEventListener("DOMContentLoaded", function () {
        // Cập nhật các tùy chọn khi trang tải
        const phanLoai = document.getElementById("phanLoai").value; // Giá trị mặc định là bài báo khoa học
        updateOptions(phanLoai);
      });

      // Thêm sự kiện khi thay đổi lựa chọn loại bài báo
      document
        .getElementById("phanLoai")
        .addEventListener("change", function () {
          const phanLoai = this.value;
          updateOptions(phanLoai);
        });
      // =================================================================

      // check thì tắt gợi ý
      document.addEventListener("DOMContentLoaded", function () {
        // Lấy các phần tử
        const chuNhiemInput = document.getElementById("tacGia");
        const chuNhiemSuggestions =
          document.getElementById("tacGia-suggestions");
        const chuNhiemCheckbox = document.getElementById("tacGiaCheckbox");
        const thuKyCheckbox = document.getElementById("tacGiaCtnCheckbox");
        const thuKyInput = document.getElementById("tacGiaCtn");
        const thuKySuggestions = document.getElementById(
          "tacGiaCtn-suggestions"
        );
        const thanhVienCheckbox = document.getElementById("thanhVienCheckbox"); // Thành viên checkbox
        const thanhVienInput = document.getElementById("thanhVien"); // Thành viên input text
        const thanhVienSuggestions = document.getElementById(
          "themThanhVien-suggestions"
        ); // Thành viên gợi ý

        // Thêm sự kiện lắng nghe khi chuNhiemCheckbox thay đổi
        chuNhiemCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox chủ nhiệm được đánh dấu, ẩn phần gợi ý chủ nhiệm
            chuNhiemSuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý chủ nhiệm
            chuNhiemSuggestions.style.display = "block";
          }
        });

        // Thêm sự kiện lắng nghe khi thuKyCheckbox thay đổi
        thuKyCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox thư ký được đánh dấu, ẩn phần gợi ý thư ký
            thuKySuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý thư ký
            thuKySuggestions.style.display = "block";
          }
        });

        // Thêm sự kiện lắng nghe khi thanhVienCheckbox thay đổi
        thanhVienCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox thành viên được đánh dấu, ẩn phần gợi ý thành viên
            thanhVienSuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý thành viên
            thanhVienSuggestions.style.display = "block";
          }
        });
      });
      // =================================================================

      // =================================================================
      // thực hiện gắn hàm gợi ý khi load trang
      document.addEventListener("DOMContentLoaded", () => {
        // Hàm xử lý sự kiện nhập liệu
        function handleInput(inputId, suggestionId, comboBoxId, checkboxId) {
          const inputElement = document.getElementById(inputId);
          const suggestionContainer = document.getElementById(suggestionId);
          const comboBoxElement = document.getElementById(comboBoxId);
          const checkboxElement = document.getElementById(checkboxId); // Lấy checkbox
          const errorMessage = document.createElement("div");

          let isSuggestionSelected = false; // Biến theo dõi việc chọn gợi ý

          // Gợi ý khi người dùng nhập
          inputElement.addEventListener("input", () => {
            const query = inputElement.value.trim(); // Trim đầu và cuối chuỗi của input
            suggestionContainer.innerHTML = ""; // Xóa gợi ý cũ

            if (!checkboxElement.checked && query) {
              // Nếu checkbox không được chọn và có nhập liệu
              const suggestions = giangVienCoHuu.filter(
                (item) =>
                  item.HoTen.toLowerCase().trim().includes(query.toLowerCase()) // So sánh không phân biệt hoa thường
              );

              suggestions.forEach((item) => {
                const suggestionItem = document.createElement("div");
                suggestionItem.textContent = item.HoTen;
                suggestionItem.className = "suggestion-item";

                suggestionItem.addEventListener("click", () => {
                  // Điền tên và đơn vị vào input theo định dạng "Tên - Đơn vị"
                  const unit = comboBoxElement.value; // Lấy giá trị từ combo box
                  inputElement.value = `${item.HoTen} - KMA`; // Điền giá trị vào ô input
                  suggestionContainer.innerHTML = ""; // Xóa gợi ý sau khi chọn
                  isSuggestionSelected = true; // Đánh dấu là gợi ý đã được chọn
                  if (inputId == "thanhVien") {
                    addMember(inputElement.value);
                  }
                });

                suggestionContainer.appendChild(suggestionItem);
              });
            }
          });

          // Kiểm tra giá trị khi người dùng nhấn Enter hoặc click ra ngoài (blur)
          inputElement.addEventListener("blur", () => {
            // Nếu gợi ý đã được chọn, ngừng xử lý sự kiện blur
            if (isSuggestionSelected) {
              isSuggestionSelected = false; // Reset lại trạng thái
              return; // Không thực hiện cảnh báo
            }

            // Nếu checkbox được đánh dấu, cho phép nhấn Enter để nhập trực tiếp
            if (checkboxElement.checked) {
              const value = inputElement.value.trim(); // Trim input value (không chuyển thành lowercase)
              const isValid = giangVienCoHuu.some(
                (item) =>
                  item.HoTen.trim().toLowerCase() === value.toLowerCase() // So sánh không phân biệt hoa thường và trim cả hai đầu
              );
              // Không hiển thị cảnh báo nếu nhập không đúng nữa
            }
          });

          // Xử lý khi nhấn Enter
          inputElement.addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
              event.preventDefault(); // Ngừng hành động mặc định của phím Enter
              // Nếu checkbox được đánh dấu, tự động điền giá trị vào input và gọi addMember
              if (checkboxElement.checked) {
                const query = inputElement.value.trim();
                // Kiểm tra xem người dùng đã nhập tên hay chưa
                if (query) {
                  const unit = comboBoxElement.value; // Lấy giá trị từ combo box
                  inputElement.value = `${query} - ${unit}`; // Điền giá trị vào ô input theo định dạng "Tên - Đơn vị"
                  suggestionContainer.innerHTML = ""; // Xóa gợi ý sau khi nhấn Enter

                  if (inputId == "thanhVien") {
                    addMember(inputElement.value);
                  }
                }
              }
            }
          });

          // Ngăn chặn sự kiện blur khi đang hiển thị gợi ý
          inputElement.addEventListener("focus", () => {
            suggestionContainer.innerHTML = ""; // Dọn gọn gợi ý cũ khi focus lại vào input
          });

          // Ẩn gợi ý nếu checkbox được chọn
          checkboxElement.addEventListener("change", () => {
            if (checkboxElement.checked) {
              suggestionContainer.innerHTML = ""; // Ẩn gợi ý
            }
          });
        }

        // Gọi hàm cho từng cặp ô nhập liệu và container gợi ý, truyền thêm combo box và checkbox
        handleInput(
          "tacGia",
          "tacGia-suggestions",
          "tacGiaCtnComboBox",
          "tacGiaCtnCheckbox"
        );
        handleInput(
          "tacGiaCtn",
          "tacGiaCtn-suggestions",
          "tacGiaCtnComboBox",
          "tacGiaCtnCheckbox"
        );
        handleInput(
          "thanhVien",
          "themThanhVien-suggestions",
          "thanhVienComboBox",
          "thanhVienCheckbox"
        );
      });
      // =================================================================

      // lấy dữ liệu giảng viên cơ hữu
      document.addEventListener("DOMContentLoaded", async () => {
        try {
          const response = await fetch("/giangviencohuu"); // Gọi API
          if (!response.ok) {
            throw new Error("Không thể lấy dữ liệu từ API.");
          }

          // Thông báo nếu cần (chỉnh sửa alert nếu cần)
          // alert("Dữ liệu đã được tải thành công!");

          // Chuyển đổi dữ liệu sang JSON
          const data = await response.json();
          console.log(data);

          // Gán dữ liệu vào mảng giangVienCoHuu
          giangVienCoHuu = data;
        } catch (error) {
          console.error("Lỗi khi gọi API:", error);
        }
      });

      // gửi form lên sv
      document
        .getElementById("submitBtn")
        .addEventListener("click", function () {
          // Lấy dữ liệu từ form
          const formData = {
            // loaiBaiBao: document.getElementById("loaiBaiBao").value,
            namHoc: document.getElementById("namHocForm").value,
            tenBaiBao: document.getElementById("tenBaiBao").value,
            loaiTapChi: document.getElementById("loaiTapChi").value,
            chiSoTapChi: document.getElementById("chiSoTapChi").value,
            tacGia: document.getElementById("tacGia").value,
            tacGiaCtn: document.getElementById("tacGiaCtn").value,
            thanhVien: Array.from(
              document.querySelectorAll("#memberListDisplay span")
            ).map((member) => member.textContent),
            khoa: document.getElementById("MaPhongBanForm").value,
          };

          console.log(formData);

          // Gửi dữ liệu lên server
          fetch("/baibaokhoahoc", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Gửi dữ liệu thất bại!");
              }
              return response.json();
            })
            .then((data) => {
              alert(data.message);
              // Reset form nếu cần
              document.getElementById("formData").reset();
              document.getElementById("memberListDisplay").innerHTML = "";
              members = [];
            })
            .catch((error) => {
              console.error("Lỗi:", error);
              alert("Có lỗi xảy ra: " + error.message);
            });
        });

      // // Xử lí ô nhập thư kí
      // document.getElementById('capDeTai').addEventListener('change', function () {
      //   const capDeTai = this.value; // Lấy giá trị cấp đề tài đã chọn
      //   const thukiInput = document.getElementById('thuKy'); // Lấy ô nhập thư ký

      //   // Kiểm tra nếu cấp đề tài là "Học viện, Cơ sở"
      //   if (capDeTai === "Cơ sở, Học viện") {
      //     // Vô hiệu hóa ô nhập thư ký
      //     thukiInput.disabled = true;
      //     thukiInput.value = ''; // Xóa giá trị đã nhập trong ô nhập thư ký
      //   } else {
      //     // Kích hoạt lại ô nhập thư ký
      //     thukiInput.disabled = false;
      //   }
      // });

      // =================================================================
      let members = [];
      // Hàm thêm thành viên vào mảng member để hiển thị
      function addMember(memberName) {
        if (memberName) {
          // Thêm thành viên vào mảng members
          console.log(memberName);
          members.push(memberName);
          // Cập nhật danh sách thành viên hiển thị trên form
          updateFormMemberList();
          // Xóa nội dung ô input sau khi thêm thành viên
          document.getElementById("thanhVien").value = "";
        }
      }
      // Hàm cập nhật danh sách thành viên và hiển thị lên form
      function updateFormMemberList() {
        const memberListDisplay = document.getElementById("memberListDisplay");
        memberListDisplay.innerHTML = ""; // Xóa danh sách cũ
        // Duyệt qua mảng members để hiển thị từng thành viên
        members.forEach((member, index) => {
          const memberContainer = document.createElement("div");
          memberContainer.style.display = "flex"; // Đảm bảo các phần tử được hiển thị trên cùng một dòng
          memberContainer.style.alignItems = "center"; // Căn giữa tên và nút xóa
          memberContainer.style.justifyContent = "space-between"; // Đảm bảo tên thành viên và nút xóa được căn lề
          // Tạo phần tử hiển thị tên thành viên
          const span = document.createElement("span");
          span.textContent = member;
          span.style.flexGrow = 1; // Cho phép tên thành viên chiếm hết không gian còn lại trong div
          // Thêm nút xóa cho từng thành viên
          const removeButton = document.createElement("button");
          removeButton.innerHTML = '<i class="fa fa-times"></i>';
          removeButton.onclick = () => removeMember(index); // Gắn sự kiện xóa
          // Thêm tên thành viên và nút xóa vào giao diện
          memberContainer.appendChild(span);
          memberContainer.appendChild(removeButton);
          // Thêm container chứa thành viên vào danh sách hiển thị
          memberListDisplay.appendChild(memberContainer);
        });
      }
      // Hàm xóa thành viên
      function removeMember(index) {
        console.log("xóa");
        members.splice(index, 1); // Xóa thành viên khỏi mảng
        updateFormMemberList(); // Cập nhật lại danh sách hiển thị
      }
      // =================================================================
    </script>

    <!-- nckh chung -->
    <script src="/js/nckh.js"></script>
    <!-- link href -->
    <script src="/js/href.js"></script>
    <!-- srcipt năm học, khoa -->
    <script src="/js/getdata.js"></script>
</body>

</html>