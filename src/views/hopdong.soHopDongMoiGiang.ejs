<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />

  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <!-- SweetAlert2 CSS -->
  <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css" rel="stylesheet" />
  <!-- SweetAlert2 JavaScript -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>

  <!-- Link thư viện tabulator -->
  <link href="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/css/tabulator.min.css" rel="stylesheet">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/js/tabulator.min.js"></script>

  <!-- Custom CSS for better alignment -->
  <style>
    .loc {
      align-items: center;
      gap: 8px;
    }

    .selectop {
      height: 38px;
      /* Match button height */
      vertical-align: middle;
      border: 1px solid #ced4da;
      border-radius: 0.375rem;
      padding: 0.375rem 0.75rem;
      font-size: 1rem;
      background-color: #fff;
      color: #495057;
      text-align: left;
      box-sizing: border-box;
    }

    .selectop:hover {
      border-color: #adb5bd;
    }

    .selectop:focus {
      border-color: #86b7fe;
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
      outline: 0;
    }

    /* Styling riêng cho dropdown buttons - chỉ áp dụng cho .dropdown-toggle */
    button.selectop.dropdown-toggle {
      display: flex !important;
      align-items: center !important;
      justify-content: space-between !important;
      width: 100% !important;
      height: 38px !important;
      padding: 0.375rem 0.75rem !important;
      font-size: 1rem !important;
      font-weight: 400 !important;
      line-height: 1.5 !important;
      text-align: left !important;
      background-image: none !important;
      background-color: #fff !important;
      border: 1px solid #ced4da !important;
      border-radius: 0.375rem !important;
      color: #495057 !important;
      box-shadow: none !important;
      transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out !important;
    }

    button.selectop.dropdown-toggle:hover {
      background-color: #fff !important;
      border-color: #adb5bd !important;
      color: #495057 !important;
      box-shadow: none !important;
    }

    button.selectop.dropdown-toggle:focus,
    button.selectop.dropdown-toggle:active,
    button.selectop.dropdown-toggle.show {
      background-color: #fff !important;
      border-color: #86b7fe !important;
      color: #495057 !important;
      box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25) !important;
      outline: 0 !important;
    }

    button.selectop.dropdown-toggle::after {
      border-top: 0.3em solid #495057 !important;
      border-right: 0.3em solid transparent !important;
      border-bottom: 0 !important;
      border-left: 0.3em solid transparent !important;
      margin-left: auto !important;
      vertical-align: 0 !important;
      content: "" !important;
    }

    /* Đảm bảo dropdown buttons có cùng styling với select */
    .dropdown button.selectop {
      width: 100% !important;
      display: flex !important;
      align-items: center !important;
      justify-content: space-between !important;
      box-sizing: border-box !important;
    }

    .dropdown button.selectop::after {
      margin-left: auto !important;
    }

    .btn {
      vertical-align: middle;
    }

    #view {
      margin-top: 15px;
    }

    /* Styles for contract type display */
    .contract-type-display {
      padding: 10px;
      border-radius: 8px;
      transition: all 0.3s ease;
    }

    #contractTypeIndicator {
      transition: all 0.3s ease;
      font-size: 1rem;
    }

    /* CSS cho multi-select checkbox dropdown */
    .checkbox-dropdown {
      max-height: 250px;
      overflow-y: auto;
      padding: 0;
      min-width: 200px;
    }
    
    .checkbox-dropdown .dropdown-item {
      padding: 8px 16px;
      cursor: pointer;
      display: flex;
      align-items: center;
    }
    
    .checkbox-dropdown .dropdown-item:hover {
      background-color: #f8f9fa;
    }
    
    .checkbox-dropdown input[type="checkbox"] {
      margin-right: 8px;
    }
    
    .selected-items {
      position: absolute;
      top: 100%;
      left: 0;
      right: 0;
      z-index: 10;
      display: flex;
      flex-wrap: wrap;
      gap: 4px;
      margin-top: 2px;
      max-height: 60px;
      overflow-y: auto;
      padding: 4px;
      border-radius: 4px;
      background-color: #fff;
      border: 1px solid #dee2e6;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      transition: all 0.2s ease;
    }
    
    .selected-items:empty {
      display: none;
    }
    
    /* Đảm bảo dropdown container có position relative */
    .dropdown {
      position: relative !important;
    }
    
    .selected-tag {
      background: #0d6efd;
      color: white;
      padding: 3px 8px;
      border-radius: 8px;
      font-size: 12px;
      display: flex;
      align-items: center;
      gap: 4px;
      white-space: nowrap;
      max-width: 140px;
      overflow: hidden;
      text-overflow: ellipsis;
      flex-shrink: 0;
    }
    
    .remove-tag {
      cursor: pointer;
      font-weight: bold;
      font-size: 12px;
      line-height: 1;
      padding: 0 2px;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.3);
      transition: background-color 0.2s ease;
    }
    
    .remove-tag:hover {
      background: rgba(255, 255, 255, 0.5);
    }
    
    /* Scrollbar styling for selected items */
    .selected-items::-webkit-scrollbar {
      width: 4px;
      height: 4px;
    }
    
    .selected-items::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 2px;
    }
    
    .selected-items::-webkit-scrollbar-thumb {
      background: #c1c1c1;
      border-radius: 2px;
    }
    
    .selected-items::-webkit-scrollbar-thumb:hover {
      background: #a8a8a8;
    }
  </style>
</head>

<body>
  <!-- Phần header -->
  <%- include('header') %>

    <div class="container-fluid my-4" style="padding-left: 20px">
      <div class="flex-grow-1">

        <div class="header-actions">
          <div class="right" style="margin-top: 0px">
            <div class="loc d-flex align-items-center">
              <select class="selectop" id="combobox-dot" style="width: 70px">
                <option value="">Đợt</option>

              </select>
              <select class="selectop" id="comboboxki" style="width: 70px">
                <option value="">Kì</option>

              </select>
              <select class="selectop" id="NamHoc">
                <option value="">Chọn năm học</option>
              </select>
              
              <!-- Multi-select Khoa với checkbox -->
              <div class="dropdown" style="width: 180px;">
                <button class="selectop dropdown-toggle" 
                        type="button" 
                        id="khoaDropdown" 
                        data-bs-toggle="dropdown"
                        style="width: 100%;">
                  <span id="khoaButtonText">Khoa</span>
                </button>
                <div class="dropdown-menu checkbox-dropdown w-100" id="khoaCheckboxMenu">
                  <label class="dropdown-item">
                    <input type="checkbox" value="ALL" id="selectAllKhoa" /> 
                    <strong>Tất cả khoa</strong>
                  </label>
                  <div class="dropdown-divider"></div>
                  <!-- Các khoa sẽ được load động từ API -->
                </div>
                <div class="selected-items" id="selectedKhoa"></div>
              </div>

              <!-- Multi-select Hệ đào tạo với checkbox -->
              <div class="dropdown" style="width: 150px;">
                <button class="selectop dropdown-toggle" 
                        type="button" 
                        id="heDropdown" 
                        data-bs-toggle="dropdown"
                        style="width: 100%;">
                  <span id="heButtonText">Hệ đào tạo</span>
                </button>
                <div class="dropdown-menu checkbox-dropdown w-100" id="heCheckboxMenu">
                  <label class="dropdown-item">
                    <input type="checkbox" value="ALL" id="selectAllHe" /> 
                    <strong>Tất cả hệ</strong>
                  </label>
                  <div class="dropdown-divider"></div>
                  <label class="dropdown-item">
                    <input type="checkbox" value="Đại học (Đóng học phí)" /> Hệ đóng học phí
                  </label>
                  <label class="dropdown-item">
                    <input type="checkbox" value="Đại học (Mật mã)" /> Hệ mật mã
                  </label>
                  <label class="dropdown-item">
                    <input type="checkbox" value="Cao học (Đóng học phí)" /> Cao học
                  </label>
                  <label class="dropdown-item">
                    <input type="checkbox" value="Nghiên cứu sinh (Đóng học phí)" /> Nghiên cứu sinh
                  </label>
                </div>
                <div class="selected-items" id="selectedHe"></div>
              </div>

            </div>
          </div>

          <!-- Unified Setup Section -->
          <div class="content-section mt-4" id="setupOptions">
            <div class="card">
              <div class="card-header">
                <h5 class="mb-0">
                  <i class="fas fa-cog me-2"></i>Tạo số hợp đồng và số thanh lý hợp đồng
                </h5>
              </div>
              <div class="card-body">

                <div class="row mb-3">
                  <div class="col-12">
                    <div class="alert alert-success">
                      <div class="row">
                        <div class="col-md-6">
                          <div class="d-flex align-items-center">
                            <i class="fas fa-file-contract text-primary me-2"></i>
                            <span><strong>Số hợp đồng (ví dụ):</strong> <span
                                id="contractPreview">001/HĐ-ĐT</span></span>
                          </div>
                        </div>
                        <div class="col-md-6">
                          <div class="d-flex align-items-center"> <i class="fas fa-file-times text-info me-2"></i>
                            <span><strong>Số thanh lý tương ứng:</strong> <span
                                id="terminationPreview">001/HĐNT-ĐT</span></span>
                          </div>
                        </div>
                      </div>
                      <small class="text-muted mt-2 d-block">
                        <i class="fas fa-arrow-right me-1"></i>
                        Mỗi hợp đồng sẽ nhận được cùng một chỉ số (001, 002, 003...) cho cả số hợp đồng và số thanh lý
                      </small>
                    </div>
                  </div>
                </div>

                <div class="row">
                  <div class="col-md-6">
                    <div class="form-check">
                      <!-- <input class="form-check-input" type="radio" name="setupMode" id="mode1" value="toan_bo" checked> -->
                      <!-- <label class="form-check-label" for="mode1">
                    <strong>Tự động tăng cho toàn bộ</strong>
                    <small class="text-muted d-block">Tăng dần từ số bắt đầu cho tất cả hợp đồng trong điều kiện đã chọn</small>
                  </label> -->
                    </div> <!-- Starting number input -->
                    <div id="unifiedStartingNumberDiv" class="mt-3" style="display: block;">
                      <div class="row">
                        <div class="col-md-6">
                          <label for="unifiedStartingNumber" class="form-label">
                            <strong>Số bắt đầu</strong>
                            <span class="text-danger">*</span>
                          </label>
                          <input type="number" class="form-control" id="unifiedStartingNumber"
                            name="unifiedStartingNumber" value="1" min="1" placeholder="Nhập số bắt đầu (VD: 1)"
                            oninput="updateNumberPreview()">
                          <small class="text-muted">Số này sẽ được sử dụng làm chỉ số chung cho cả số hợp đồng và số
                            thanh
                            lý</small>
                        </div>
                        <div class="col-md-6">
                          <!-- <label class="form-label">
                        <strong>Ví dụ định dạng số</strong>
                      </label> -->
                          <div class="p-3 bg-light border rounded">
                            <div class="mb-2">
                              <strong>Hợp đồng:</strong> <span id="contractExample"
                                class="text-primary">001/HĐ-ĐT</span>
                            </div>
                            <div>
                              <strong>Thanh lý:</strong> <span id="terminationExample"
                                class="text-info">001/HĐNT-ĐT</span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <!-- Unified action buttons that adapt based on contract type -->
                    <div class="d-flex gap-2 mt-4" id="unifiedContractButtons">
                      <button type="button" class="btn btn-outline-primary" id="previewContractBtn"
                        onclick="handleContractOperation('previewContract')">
                        <i class="fas fa-eye"></i> Xem trước khi tạo
                      </button>
                      <button type="button" class="btn btn-success" id="executeContractBtn"
                        onclick="handleContractOperation('executeContract')">
                        <i class="fas fa-play"></i> Tạo
                      </button>
                    </div>

                    <small class="text-muted mt-2 d-block">
                      <i class="fas fa-info-circle me-1"></i>
                      Sẽ tạo đồng thời cả số hợp đồng và số thanh lý cho mỗi hợp đồng
                    </small>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Main content area -->
          <div class="content-section mt-4">
            <div class="card">
              <div class="card-header">
                <h5 class="mb-0">
                  <i class="fas fa-file-contract me-2"></i>Danh sách hợp đồng
                </h5>
              </div>
              <div class="card-body">
                <!-- Results Table -->
                <div id="resultsDiv" style="display: none;">
                  <div class="table-responsive">
                    <table class="table table-striped table-hover" id="contractsTable">
                      <thead class="table-dark">
                        <tr>
                          <th>STT</th>
                          <th>Họ tên giảng viên</th>
                          <th>Khoa - Hệ đào tạo</th>
                          <th>Số HĐ hiện tại</th>
                          <th>Số TL hiện tại</th>
                          <th>Số HĐ mới</th>
                          <th>Số TL mới</th>
                        </tr>
                      </thead>
                      <tbody id="contractsTableBody">
                      </tbody>
                    </table>
                  </div>
                </div>


                <!-- Loading spinner -->
                <div id="loadingSpinner" class="text-center py-4" style="display: none;">
                  <div class="spinner-border" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                  <p class="mt-2">Đang tải dữ liệu...</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Success/Error Messages -->
      <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="successToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
          <div class="toast-header bg-success text-white">
            <strong class="me-auto">Thành công</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
          </div>
          <div class="toast-body" id="successMessage"></div>
        </div>

        <div id="errorToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
          <div class="toast-header bg-danger text-white">
            <strong class="me-auto">Lỗi</strong>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
          </div>
          <div class="toast-body" id="errorMessage"></div>
        </div>
      </div>

      <!-- link cá site -->
      <script src="/js/moigiang/href.js"></script>
      <!-- năm học, khoa -->
      <script src="/js/moigiang/getdata.js"></script>
      <!-- ẩn các nút theo role -->
      <script src="/js/moigiang/hideBtn.js"></script> <!-- Contract numbers specific script -->
      <script>
        // ===== MULTI-SELECT FUNCTIONALITY =====
        let selectedKhoaValues = [];
        let selectedHeValues = [];

        // Khởi tạo multi-select cho khoa và hệ đào tạo
        function initMultiSelect() {
          console.log('Initializing multi-select...');
          // Khoa multi-select
          initSingleMultiSelect('khoaCheckboxMenu', 'khoaButtonText', 'selectedKhoa', 'selectAllKhoa', 
            selectedKhoaValues, 'Khoa', updateKhoaDisplay);
          
          // Hệ đào tạo multi-select
          initSingleMultiSelect('heCheckboxMenu', 'heButtonText', 'selectedHe', 'selectAllHe', 
            selectedHeValues, 'Hệ đào tạo', updateHeDisplay);
        }

        function initSingleMultiSelect(containerId, buttonTextId, selectedDisplayId, selectAllId, 
                                      selectedArray, defaultText, updateCallback) {
          console.log('Initializing single multi-select for:', containerId);
          const container = document.getElementById(containerId);
          const buttonText = document.getElementById(buttonTextId);
          const selectedDisplay = document.getElementById(selectedDisplayId);
          const selectAll = document.getElementById(selectAllId);
          
          if (!container || !buttonText || !selectedDisplay) {
            console.error('Missing elements for multi-select:', {
              container: !!container,
              buttonText: !!buttonText,
              selectedDisplay: !!selectedDisplay
            });
            return;
          }
          
          // Xử lý checkbox clicks
          container.addEventListener('change', function(e) {
            if (e.target.type === 'checkbox') {
              const value = e.target.value;
              console.log('Checkbox changed:', value, 'checked:', e.target.checked);
              console.log('Current selectedArray before change:', [...selectedArray]);
              
              if (value === 'ALL') {
                // Toggle tất cả
                const allCheckboxes = container.querySelectorAll('input[type="checkbox"]:not([value="ALL"])');
                allCheckboxes.forEach(cb => {
                  cb.checked = e.target.checked;
                });
                
                if (e.target.checked) {
                  selectedArray.length = 0;
                  selectedArray.push('ALL');
                } else {
                  selectedArray.length = 0;
                }
              } else {
                // Xử lý checkbox riêng lẻ
                if (e.target.checked) {
                  // Bỏ check "Tất cả" nếu chọn riêng lẻ
                  const selectAllCheckbox = container.querySelector('input[value="ALL"]');
                  if (selectAllCheckbox) selectAllCheckbox.checked = false;
                  // Xóa 'ALL' khỏi array nếu có
                  const allIndex = selectedArray.indexOf('ALL');
                  if (allIndex > -1) selectedArray.splice(allIndex, 1);
                  // Thêm giá trị mới
                  if (!selectedArray.includes(value)) {
                    selectedArray.push(value);
                  }
                } else {
                  const index = selectedArray.indexOf(value);
                  if (index > -1) {
                    selectedArray.splice(index, 1);
                  }
                }
              }
              
              console.log('Current selectedArray after change:', [...selectedArray]);
              updateCallback();
            }
          });
        }

        function updateKhoaDisplay() {
          updateDisplay('khoaButtonText', 'selectedKhoa', selectedKhoaValues, 'Khoa', 'khoaCheckboxMenu');
        }

        function updateHeDisplay() {
          updateDisplay('heButtonText', 'selectedHe', selectedHeValues, 'Hệ đào tạo', 'heCheckboxMenu');
        }

        function updateDisplay(buttonTextId, selectedDisplayId, selectedArray, defaultText, containerId) {
          const buttonText = document.getElementById(buttonTextId);
          const selectedDisplay = document.getElementById(selectedDisplayId);
          const container = document.getElementById(containerId);
          
          // Luôn hiển thị text cố định cho button
          buttonText.textContent = defaultText;
          
          // Cập nhật tags
          selectedDisplay.innerHTML = '';
          selectedArray.forEach(value => {
            if (value === 'ALL') {
              // Hiển thị tag "ALL" khi chọn tất cả
              const tag = document.createElement('span');
              tag.className = 'selected-tag';
              const displayText = defaultText.includes('Khoa') ? 'Tất cả khoa' : 'Tất cả hệ đào tạo';
              tag.innerHTML = `${displayText} <span class="remove-tag" onclick="removeTag('${containerId}', '${value}')">×</span>`;
              selectedDisplay.appendChild(tag);
            } else {
              const checkbox = container.querySelector(`input[value="${value}"]`);
              if (checkbox) {
                const label = checkbox.closest('label').textContent.trim();
                const tag = document.createElement('span');
                tag.className = 'selected-tag';
                tag.innerHTML = `${label} <span class="remove-tag" onclick="removeTag('${containerId}', '${value}')">×</span>`;
                selectedDisplay.appendChild(tag);
              }
            }
          });
        }

        // Hàm remove tag
        function removeTag(containerId, value) {
          const container = document.getElementById(containerId);
          if (container) {
            const checkbox = container.querySelector(`input[value="${value}"]`);
            if (checkbox) {
              checkbox.checked = false;
              checkbox.dispatchEvent(new Event('change', { bubbles: true }));
            }
          }
        }

        // Hàm lấy giá trị đã chọn
        function getSelectedKhoa() {
          console.log('selectedKhoaValues:', selectedKhoaValues);
          if (selectedKhoaValues.length === 0 || selectedKhoaValues.includes('ALL')) {
            return ['ALL'];
          }
          return selectedKhoaValues;
        }

        function getSelectedHe() {
          console.log('selectedHeValues:', selectedHeValues);
          if (selectedHeValues.length === 0 || selectedHeValues.includes('ALL')) {
            return ['ALL'];
          }
          return selectedHeValues;
        }

        // Load danh sách khoa cho checkbox dropdown
        function loadKhoaList() {
          console.log('Loading khoa list...');
          $.get('/api/khoa-list')
            .done(function(response) {
              console.log('Khoa list response:', response);
              if (response.success && response.data) {
                const khoaMenu = $('#khoaCheckboxMenu');
                // Xóa các item cũ (trừ "Tất cả khoa" và divider)
                khoaMenu.find('.dropdown-item:not(:first-child):not(.dropdown-divider)').remove();
                
                // Thêm các khoa mới
                response.data.forEach(khoa => {
                  console.log('Adding khoa:', khoa);
                  const item = `
                    <label class="dropdown-item">
                      <input type="checkbox" value="${khoa.MaPhongBan}" /> ${khoa.MaPhongBan}
                    </label>
                  `;
                  khoaMenu.append(item);
                });
              }
            })
            .fail(function() {
              console.error('Không thể load danh sách khoa');
            });
        }
        
        // Cập nhật ví dụ số hợp đồng khi người dùng thay đổi số bắt đầu
        function updateNumberPreview() {
          const startingNumber = parseInt($('#unifiedStartingNumber').val()) || 1;
          const formattedNumber = String(startingNumber).padStart(3, '0');

          $('#contractPreview').text(`${formattedNumber}/HĐ-ĐT`);
          $('#terminationPreview').text(`${formattedNumber}/HĐNT-ĐT`);
          $('#contractExample').text(`${formattedNumber}/HĐ-ĐT`);
          $('#terminationExample').text(`${formattedNumber}/HĐNT-ĐT`);
        }

        // ===== CÁC HÀM GỐC ĐÃ SỬA ĐỔI =====

        // Khởi tạo giao diện khi trang load
        // Xem trước cài đặt đồng bộ số hợp đồng và thanh lý
        function previewSynchronizedSetup() {
          const dot = $('#combobox-dot').val();
          const ki = $('#comboboxki').val();
          const nam = $('#NamHoc').val();
          const khoaList = getSelectedKhoa();
          const heDaoTaoList = getSelectedHe();

          if (!dot || !ki || !nam) {
            showError('Vui lòng chọn đầy đủ Đợt, Kì và Năm trước khi xem trước');
            return;
          }

          const startingNumber = parseInt($('#unifiedStartingNumber').val()) || 1;

          if (!startingNumber || startingNumber < 1) {
            showError('Vui lòng nhập số bắt đầu hợp lệ (≥ 1)');
            return;
          }

          showLoading(true);
          showSuccess('Đang xem trước cài đặt đồng bộ số hợp đồng và thanh lý...');

          const data = {
            dot: dot,
            ki: ki,
            nam: nam,
            khoaList: getSelectedKhoa(),
            heDaoTaoList: getSelectedHe(),
            loaiHopDong: "Mời giảng",
            startingNumber: startingNumber
          };

          console.log('Sending data to preview API:', data);
          console.log('KhoaList for preview:', getSelectedKhoa());
          console.log('HeDaoTaoList for preview:', getSelectedHe());

          // Gọi API preview đồng bộ
          $.post('/api/preview-so-hop-dong-moi-giang', data)
            .done(function (response) {
              if (response.success) {
                displaySynchronizedPreviewResults(response.data);
                showSuccess('Xem trước đồng bộ thành công. Kiểm tra kết quả bên dưới.');
              } else {
                showError(response.message || 'Có lỗi xảy ra khi xem trước đồng bộ');
              }
            })
            .fail(function () {
              showError('Chưa có dữ liệu hợp đồng');
            })
            .always(function () {
              showLoading(false);
            });
        }

        // Thực hiện cài đặt đồng bộ số hợp đồng và thanh lý
        function executeSynchronizedSetup() {
          const dot = $('#combobox-dot').val();
          const ki = $('#comboboxki').val();
          const nam = $('#NamHoc').val();

          if (!dot || !ki || !nam) {
            showError('Vui lòng chọn đầy đủ Đợt, Kì và Năm trước khi thực hiện cài đặt');
            return;
          }

          const startingNumber = parseInt($('#unifiedStartingNumber').val()) || 1;

          if (!startingNumber || startingNumber < 1) {
            showError('Vui lòng nhập số bắt đầu hợp lệ (≥ 1)');
            return;
          }          // Dialog xác nhận chi tiết
          const contractExample = String(startingNumber).padStart(3, '0') + '/HĐ-ĐT';
          const terminationExample = String(startingNumber).padStart(3, '0') + '/HĐNT-ĐT';

          Swal.fire({
            title: 'Xác nhận tạo số hợp đồng và số thanh lý',
            html: `<div class="text-start">
                 <p>Số bắt đầu: <strong>${startingNumber}</strong></p>
                 <div class="row mt-3">
                   <div class="col-6">
                       <span>Hợp đồng: <strong class="text-primary">${contractExample}</strong></span>
                     </div>
                   </div>
                   <div class="col-6">
                     <div class="d-flex align-items-center">                       <i class="fas fa-file-times text-info me-2"></i>
                       <span>Thanh lý: <strong class="text-info">${terminationExample}</strong></span>
                     </div>
                   </div>
                 </div>
               </div>`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#0d6efd',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'Thực hiện đồng bộ',
            cancelButtonText: 'Hủy bỏ',
            width: '500px'
          }).then((result) => {
            if (result.isConfirmed) {
              performSynchronizedSetup();
            }
          });
        }

        // Thực hiện cài đặt đồng bộ (gọi từ dialog xác nhận)
        function performSynchronizedSetup() {
          showLoading(true);

          /* ────────────────────────────────────────────────────────
             1. Trích dữ liệu từ bảng <tbody id="contractsTableBody">
          ────────────────────────────────────────────────────────── */
          const tableData = [];
          let lastGroupInfo = '';                     // nhớ lại groupInfo của dòng đầu nhóm

          $('#contractsTableBody tr').each(function () {
            const $cells = $(this).find('td');

            // Bỏ qua dòng placeholder “Không có dữ liệu…”
            if (!$cells.length) return;
            if ($cells.first().attr('colspan')) return;

            let rowData = null;

            /* ─── DÒNG ĐẦU NHÓM: có 7 ô ─────────────────────────── */
            if ($cells.length === 7) {
              lastGroupInfo = $cells.eq(2).text().trim();   // lưu lại cho các dòng sau
              console.log("lastGroupInfo:", lastGroupInfo);

              rowData = {
                HoTen: $cells.eq(1).text().trim(),
                groupInfo: lastGroupInfo,
                currentSoHopDong: $cells.eq(3).text().trim(),
                currentSoThanhLy: $cells.eq(4).text().trim(),
                newSoHopDong: $cells.eq(5).find('strong').text().trim() ||
                  $cells.eq(5).text().trim(),
                newSoThanhLy: $cells.eq(6).find('strong').text().trim() ||
                  $cells.eq(6).text().trim()
              };

              /* ─── DÒNG TIẾP THEO: chỉ 6 ô (thiếu ô group) ───────── */
            } else if ($cells.length === 6) {
              rowData = {
                HoTen: $cells.eq(1).text().trim(),
                groupInfo: lastGroupInfo,          // dùng lại giá trị đã lưu
                currentSoHopDong: $cells.eq(2).text().trim(),
                currentSoThanhLy: $cells.eq(3).text().trim(),
                newSoHopDong: $cells.eq(4).find('strong').text().trim() ||
                  $cells.eq(4).text().trim(),
                newSoThanhLy: $cells.eq(5).find('strong').text().trim() ||
                  $cells.eq(5).text().trim()
              };

            } else {
              return; // cấu trúc không khớp => bỏ qua
            }

            /* ─── Chỉ giữ những dòng đã sinh Số HĐ mới ──────────── */
            if (rowData.HoTen &&
              rowData.newSoHopDong &&
              rowData.newSoHopDong !== 'Chưa tạo') {
              tableData.push(rowData);
            }
          });

          /* ────────────────────────────────────────────────────────
             2. Gom các giá trị từ form
          ────────────────────────────────────────────────────────── */
          const data = {
            dot: $('#combobox-dot').val(),
            ki: $('#comboboxki').val(),
            nam: $('#NamHoc').val(),
            khoaList: getSelectedKhoa(),
            heDaoTaoList: getSelectedHe(),
            loaiHopDong: "Mời giảng",
            startingNumber: parseInt($('#unifiedStartingNumber').val()) || 1,
            contractsData: tableData
          };

          console.log('data contract mời giảng:', data);
          console.log('KhoaList for execution:', data.khoaList);
          console.log('HeDaoTaoList for execution:', data.heDaoTaoList);

          /* ────────────────────────────────────────────────────────
             3. Gửi dữ liệu lên server
          ────────────────────────────────────────────────────────── */
          $.post('/api/setup-so-hopdong-toan-bo', data)
            .done(function (response) {
              if (response.success) {
                Swal.fire({
                  title: 'Thành công!',
                  text: response.message,
                  icon: 'success',
                  confirmButtonText: 'OK'
                }).then(() => {
                  loadContracts();                         // refresh danh sách
                  if ($('#unifiedSummaryDiv').is(':visible')) {
                    loadUnifiedSummary();                  // refresh summary nếu đang mở
                  }
                });
              } else {
                showError(response.message || 'Có lỗi xảy ra khi cài đặt');
              }
            })
            .fail(function () {
              showError('Có lỗi xảy ra khi kết nối với server');
            })
            .always(function () {
              showLoading(false);
            });
        }

        // Hiển thị kết quả preview đồng bộ
        function displaySynchronizedPreviewResults(groupedContracts) {
          const tbody = $('#contractsTableBody');
          tbody.empty();

          // Flatten data để dễ xử lý
          const rows = [];
          Object.keys(groupedContracts).forEach(he => {
            Object.keys(groupedContracts[he]).forEach(khoa => {
              groupedContracts[he][khoa].forEach((contract, idx) => {
                rows.push({
                  ...contract,
                  groupInfo: `${khoa} - ${he}`,
                  index: rows.length + 1
                });
              });
            });
          });

          if (rows.length === 0) {
            tbody.append(`
              <tr>
                <td colspan="7" class="text-center text-muted">
                  <i class="fas fa-inbox"></i> Không có dữ liệu để hiển thị
                </td>
              </tr>
            `);
            $('#resultsDiv').show();
            return;
          }

          // Bây giờ render từng row, và chỉ in ô groupInfo ở lần đầu của mỗi nhóm
          let lastGroup = null;

          // Chuẩn bị spanCount cho mỗi nhóm
          const groupSizes = {};
          rows.forEach(r => {
            groupSizes[r.groupInfo] = (groupSizes[r.groupInfo] || 0) + 1;
          });

          rows.forEach(r => {
            const isNewGroup = r.groupInfo !== lastGroup;
            const rowspan = isNewGroup ? groupSizes[r.groupInfo] : null;

            const oldContractNumber = r.SoHopDong || '<span class="text-muted">Chưa có</span>';
            const oldTerminationNumber = r.SoThanhLyHopDong || '<span class="text-muted">Chưa có</span>';
            const newContractNumber = r.newSoHopDong || '<span class="text-muted">Chưa tạo</span>';
            const newTerminationNumber = r.newSoThanhLy || '<span class="text-muted">Chưa tạo</span>';

            let tr = `<tr${isNewGroup ? ' class="table-warning"' : ''} 
                           data-cccd="${r.CCCD || ''}" 
                           data-he-dao-tao="${r.HeDaoTao || r.he_dao_tao || ''}"
                           data-id-gvm="${r.id_Gvm || ''}"
                           data-hoten="${r.HoTen || ''}"
                           data-khoa="${r.Khoa || ''}"
                           data-new-so-hop-dong="${r.newSoHopDong || ''}"
                           data-new-so-thanh-ly="${r.newSoThanhLy || ''}">`;
            tr += `<td>${r.index}</td>`;
            tr += `<td>${r.HoTen}</td>`;

            // chỉ in groupInfo/rowspan khi lần đầu của nhóm
            if (isNewGroup) {
              tr += `<td rowspan="${rowspan}">${r.groupInfo}</td>`;
              lastGroup = r.groupInfo;
            }

            tr += `<td>${oldContractNumber}</td>`;
            tr += `<td>${oldTerminationNumber}</td>`;
            tr += `<td>${newContractNumber}</td>`;
            tr += `<td>${newTerminationNumber}</td>`;
            tr += `</tr>`;

            tbody.append(tr);
          });

          $('#resultsDiv').show();
        }

        // Tải danh sách hợp đồng theo điều kiện lọc
        function loadContracts() {
          const dot = $('#combobox-dot').val();
          const ki = $('#comboboxki').val();
          const nam = $('#NamHoc').val();

          if (!dot || !ki || !nam) {
            showError('Vui lòng chọn đầy đủ Đợt, Kì và Năm');
            return;
          }

          showLoading(true);
          $('#noDataMessage').hide();
          $('#resultsDiv').hide();

          const selectedKhoa = getSelectedKhoa();
          const selectedHe = getSelectedHe();
          
          console.log('Selected Khoa for API call:', selectedKhoa);
          console.log('Selected He for API call:', selectedHe);
          
          const params = {
            dot: dot,
            ki: ki,
            nam: nam,
            khoaList: JSON.stringify(selectedKhoa),
            heDaoTaoList: JSON.stringify(selectedHe),
            loaiHopDong: "Mời giảng"
          };

          console.log('Sending params to loadContracts:', params);

          $.get('/api/hopdong-list', params)
            .done(function (response) {
              if (response.success) {
                console.log('Contracts loaded:', response.data);
                displayContracts(response.data);
                $('#setupInstruction').hide();
                $('#terminationSetupInstruction').hide();
              } else {
                showError(response.message || 'Có lỗi xảy ra khi tải danh sách hợp đồng');
                $('#noDataMessage').show();
              }
            })
            .fail(function () {
              showError('Có lỗi xảy ra khi kết nối với server');
              $('#noDataMessage').show();
            })
            .always(function () {
              showLoading(false);
            });
        }

        // Hiển thị danh sách hợp đồng theo nhóm khoa-hệ
        function displayContracts(grouped) {
          const tbody = $('#contractsTableBody');
          tbody.empty();

          // Kiểm tra nếu không có nhóm nào
          const systems = Object.keys(grouped);
          if (systems.length === 0) {
            tbody.append(`
              <tr>
                <td colspan="7" class="text-center text-muted">
                  <i class="fas fa-inbox"></i> Không có dữ liệu để hiển thị
                </td>
              </tr>
            `);
            $('#resultsDiv').show();
            return;
          }

          let idx = 0;
          // Duyệt từng hệ đào tạo
          systems.forEach(system => {
            const faculties = grouped[system];
            const facultyKeys = Object.keys(faculties);
            // Duyệt từng khoa trong hệ
            facultyKeys.forEach(faculty => {
              const list = faculties[faculty];
              const rowSpan = list.length;
              // Duyệt từng hợp đồng trong nhóm này
              list.forEach((contract, j) => {
                idx++;
                const isFirst = (j === 0);

                // Số hợp đồng cũ / soạn trước
                const currentContractNumber = contract.SoHopDong || '<span class="text-muted">Chưa có</span>';
                const currentTerminationNumber = contract.SoThanhLyHopDong || '<span class="text-muted">Chưa có</span>';
                // Số hợp đồng mới (preview)
                const newContractNumber = '<span class="text-muted">Chưa có</span>';
                const newTerminationNumber = '<span class="text-muted">Chưa có</span>';

                tbody.append(`
                  <tr ${isFirst ? 'class="table-warning"' : ''}
                       data-cccd="${contract.CCCD || ''}" 
                       data-he-dao-tao="${contract.HeDaoTao || ''}"
                       data-id-gvm="${contract.id_Gvm || ''}"
                       data-hoten="${contract.HoTen || ''}"
                       data-khoa="${faculty || ''}"
                       data-new-so-hop-dong=""
                       data-new-so-thanh-ly="">
                    <td>${idx}</td>
                    <td>${contract.HoTen || ''}</td>
                    ${isFirst
                      ? `<td rowspan="${rowSpan}" class="text-center align-middle bg-light">
                         <strong>${faculty} – ${system}</strong>
                       </td>`
                      : ''
                    }
                    <td>${currentContractNumber}</td>
                    <td>${currentTerminationNumber}</td>
                    <td>${newContractNumber}</td>
                    <td>${newTerminationNumber}</td>
                  </tr>
                `);
              });
            });
          });

          $('#resultsDiv').show();
        }

        // Hiển thị/ẩn loading spinner
        function showLoading(show) {
          if (show) {
            $('#loadingSpinner').show();
          } else {
            $('#loadingSpinner').hide();
          }
        }

        // Hiển thị thông báo thành công
        function showSuccess(message) {
          $('#successMessage').text(message);
          const toast = new bootstrap.Toast($('#successToast')[0]); toast.show();
        }

        // Hiển thị thông báo lỗi
        function showError(message) {
          $('#errorMessage').text(message);
          const toast = new bootstrap.Toast($('#errorToast')[0]);
          toast.show();
        }

        // Xử lý các thao tác hợp đồng theo loại
        function handleContractOperation(operation) {
          // Điều hướng tới hàm phù hợp dựa trên thao tác
          switch (operation) {
            case 'load':
              loadContracts();
              break;
            case 'previewContract':
              previewSynchronizedSetup();
              break;
            case 'executeContract':
              executeSynchronizedSetup();
              break;
          }
        }

        // Khởi tạo giao diện khi document ready
        $(document).ready(function () {
          console.log('Document ready, initializing...');
          
          // Ẩn các phần tử không cần thiết ban đầu
          $('#startingNumberDiv').hide();
          $('#terminationStartingNumberDiv').hide();

          // Load danh sách khoa trước
          loadKhoaList();

          // Đặt mặc định là "Tất cả" cho cả khoa và hệ đào tạo
          selectedKhoaValues = ['ALL'];
          selectedHeValues = ['ALL'];

          // Khởi tạo multi-select sau khi load khoa
          setTimeout(() => {
            console.log('Initializing multi-select after timeout...');
            initMultiSelect();
            // Set mặc định cho checkboxes "Tất cả"
            $('#selectAllKhoa').prop('checked', true);
            $('#selectAllHe').prop('checked', true);
            
            updateKhoaDisplay();
            updateHeDisplay();
          }, 500);

          // Khởi tạo giao diện
          updateNumberPreview();

          // Áp dụng giao diện ban đầu dựa trên loại hợp đồng được chọn
          $('#contractTypeAlert').addClass('alert-primary');
          $('#previewContractBtn').addClass('btn-outline-primary');
          $('#executeContractBtn').addClass('btn-success');

          // Thêm event handler cho số bắt đầu thay đổi
          $('#unifiedStartingNumber').on('input', updateNumberPreview);
        });
      </script>
</body>

</html>
