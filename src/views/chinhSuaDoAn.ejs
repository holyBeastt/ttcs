<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/css/tabulator.min.css"
      rel="stylesheet"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/js/tabulator.min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>
    <style>
      /* CSS cho bảng */
      .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }

      .table th,
      .table td {
        padding: 10px;
        text-align: left;
        border: 1px solid #dee2e6;
      }

      .table th {
        background-color: #007bff;
        color: white;
        font-weight: bold;
      }

      .table tbody tr:nth-child(even) {
        background-color: #f8f9fa;
      }

      .table tbody tr:hover {
        background-color: #e2e6ea;
      }

      .table td {
        vertical-align: middle;
      }

      .bg-custom {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      .spinner-border {
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
      }

      /* Style cho checkbox */
      .approval-checkbox {
        width: 20px;
        height: 20px;
        cursor: pointer;
      }

      /* Style cho nút */
      .btn-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1.5;
        border-radius: 0.2rem;
      }

      /* Style cho cell có nội dung dài */
      .table td {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 200px;
      }

      .table td:hover {
        overflow: visible;
        white-space: normal;
        word-break: break-word;
      }
    </style>
  </head>

  <body>
    <!-- Phần header -->
    <%- include('header') %>

    <!-- Phần nội dung -->
    <div class="container-fluid box m-4">
      <div class="mx-5 flex-grow-1">
        <!-- Filter section -->
        <div class="d-flex justify-content-start align-items-end mb-3">
          <!-- Combo box Đợt -->
          <select class="form-select w-100px mx-1 selectop" id="filter-dot">
          </select>

          <!-- Combo box kì -->
          <select class="form-select w-100px mx-1 selectop" id="filter-ki">
          </select>

          <!-- Combo box Năm -->
          <select class="form-select mx-1 selectop" id="filter-nam" style="width: max-content">
          </select>

          <!-- Combo box với các giá trị CNTT, ATTT, DTVT -->
          <select class="form-select w-100px mx-1 selectop" id="filter-khoa">
          </select>

          <!-- Thêm combobox hệ đào tạo -->
          <select class="form-select w-100px mx-1 selectop" id="filter-he-dao-tao">
            <option value="Đồ án (Đại học)">Đồ án (Đại học)</option>
            <option value="Đồ án (Cao học)">Đồ án (Cao học)</option>
          </select>

          <button class="btn btn-primary mx-1" id="filter-btn" style="margin-bottom: 0px; height: 45px">
            Hiển thị
          </button>

          <button class="btn btn-success mx-1" id="export-adjusted-btn" style="margin-bottom: 0px; height: 45px;">
            Xuất dữ liệu chỉnh sửa
          </button>

          <button class="btn btn-warning mx-1" id="show-edit-form-btn" style="margin-bottom: 0px; height: 45px;">
            Chỉnh sửa đồ án
          </button>
        </div>

        <!-- Edit requests list container -->
        <div id="edit-requests-container">
          <div class="table-responsive">
            <table class="table table-bordered table-hover">
              <thead>
                <tr>
                  <th>Khoa</th>
                  <th>Đợt</th>
                  <th>Kì</th>
                  <th>Năm</th>
                  <th>Lớp học phần</th>
                  <th>Hệ đào tạo</th>
                  <th>Giảng viên theo TKB</th>
                  <th>Giảng viên điều chỉnh</th>
                  <th>Khoa duyệt</th>
                  <th>Đào tạo duyệt</th>
                  <th>BGD duyệt</th>
                  <th>Trạng thái</th>
                  <th>Thao tác</th>
                </tr>
              </thead>
              <tbody id="edit-requests-body"></tbody>
            </table>
          </div>
        </div>
      </div>
    </div>

    <!-- Modal chỉnh sửa đồ án -->
    <div class="modal fade" id="editDoAnModal" tabindex="-1" aria-labelledby="editDoAnModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="editDoAnModalLabel">Chỉnh sửa đồ án</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="d-flex justify-content-start align-items-end mb-3">
              <!-- Combo box Đợt -->
              <select class="form-select w-100px mx-1 selectop" id="modal-dot">
              </select>

              <!-- Combo box kì -->
              <select class="form-select w-100px mx-1 selectop" id="modal-ki">
              </select>

              <!-- Combo box Năm -->
              <select class="form-select mx-1 selectop" id="modal-nam" style="width: max-content">
              </select>

              <!-- Combo box với các giá trị CNTT, ATTT, DTVT -->
              <select class="form-select w-100px mx-1 selectop" id="modal-khoa">
              </select>

              <!-- Thêm combobox hệ đào tạo -->
              <select class="form-select w-100px mx-1 selectop" id="modal-he-dao-tao">
                <option value="Đồ án (Đại học)">Đồ án (Đại học)</option>
                <option value="Đồ án (Cao học)">Đồ án (Cao học)</option>
              </select>

              <button class="btn btn-primary mx-1" id="modal-render" style="margin-bottom: 0px; height: 45px">
                Hiển thị
              </button>

              <button class="btn btn-warning mx-1" id="modal-request-edit" style="margin-bottom: 0px; height: 45px;">
                Yêu cầu chỉnh sửa
              </button>
            </div>

            <div id="modal-loading" style="display: none">Loading...</div>
            <div class="overflow-auto">
              <table class="table table-bordered table-hover">
                <thead>
                  <tr id="modal-table-header"></tr>
                </thead>
                <tbody id="modal-data-table-body"></tbody>
              </table>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Add jQuery before other scripts -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
      $(document).ready(function() {
        // Initialize filter comboboxes
        initializeFilterComboboxes();
        
        // Load edit requests by default
        loadEditRequests();

        // Add click handler for the show edit form button
        $("#show-edit-form-btn").click(function() {
          // Initialize modal comboboxes before showing modal
          initializeModalComboboxes();
          
          // Copy values from filter comboboxes to modal comboboxes
          $("#modal-dot").val($("#filter-dot").val());
          $("#modal-ki").val($("#filter-ki").val());
          $("#modal-nam").val($("#filter-nam").val());
          $("#modal-khoa").val($("#filter-khoa").val());
          $("#modal-he-dao-tao").val($("#filter-he-dao-tao").val());

          const modal = new bootstrap.Modal(document.getElementById('editDoAnModal'));
          modal.show();
        });

        // Add click handler for filter button
        $("#filter-btn").click(function() {
          loadEditRequests();
        });

        // Add event listener for modal shown event
        $('#editDoAnModal').on('shown.bs.modal', function () {
          // Trigger render button click to load data
          $("#modal-render").click();
        });
      });

      // Function to initialize filter comboboxes
      function initializeFilterComboboxes() {
        // Remove empty options
        $('#filter-nam option[value=""]').remove();
        $('#filter-ki option[value=""]').remove();
        $('#filter-dot option[value=""]').remove();

        // Initialize NamHoc, Ki, and Dot data
        $.ajax({
          url: "/getNamHoc",
          method: "GET",
          success: function(response) {
            if (response.success) {
              // Initialize NamHoc
              response.NamHoc.forEach(function(item) {
                $("#filter-nam").append(
                  `<option value="${item.NamHoc}">${item.NamHoc}</option>`
                );
              });

              // Initialize Ki
              response.Ki.forEach(function(item) {
                $("#filter-ki").append(
                  `<option value="${item.value}">${item.Ki}</option>`
                );
              });

              // Initialize Dot
              response.Dot.forEach(function(item) {
                $("#filter-dot").append(
                  `<option value="${item.value}">${item.Dot}</option>`
                );
              });
            }
          }
        });

        // Initialize faculty combobox with permissions
        $('#filter-khoa option[value=""]').remove();
        $.ajax({
          url: "/api/shared/faculty-code-list",
          method: "GET",
          success: function(response) {
            if (response.success) {
              const userRole = localStorage.getItem("userRole");
              const MaPhongBan = localStorage.getItem("MaPhongBan");
              
              // If user is regular or has approval rights, show all faculties
              if (userRole === APP_ROLES.thuong || userRole === APP_ROLES.troLy_phong || userRole === APP_ROLES.lanhDao_phong) {
                $("#filter-khoa").prepend('<option value="ALL">ALL</option>');
                response.MaPhongBan.forEach(function(item) {
                  $("#filter-khoa").append(
                    `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                  );
                });
              } else {
                // If user is faculty member, only show their faculty
                response.MaPhongBan.forEach(function(item) {
                  if (item.MaPhongBan === MaPhongBan) {
                    $("#filter-khoa").append(
                      `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                    );
                  }
                });
              }
            }
          }
        });
      }

      // Function to initialize modal comboboxes
      function initializeModalComboboxes() {
        // Remove empty options
        $('#modal-nam option[value=""]').remove();
        $('#modal-ki option[value=""]').remove();
        $('#modal-dot option[value=""]').remove();

        // Initialize NamHoc, Ki, and Dot data
        $.ajax({
          url: "/getNamHoc",
          method: "GET",
          success: function(response) {
            if (response.success) {
              // Initialize NamHoc
              response.NamHoc.forEach(function(item) {
                $("#modal-nam").append(
                  `<option value="${item.NamHoc}">${item.NamHoc}</option>`
                );
              });

              // Initialize Ki
              response.Ki.forEach(function(item) {
                $("#modal-ki").append(
                  `<option value="${item.value}">${item.Ki}</option>`
                );
              });

              // Initialize Dot
              response.Dot.forEach(function(item) {
                $("#modal-dot").append(
                  `<option value="${item.value}">${item.Dot}</option>`
                );
              });
            }
          }
        });

        // Initialize faculty combobox with permissions
        $('#modal-khoa option[value=""]').remove();
        $.ajax({
          url: "/api/shared/faculty-code-list",
          method: "GET",
          success: function(response) {
            if (response.success) {
              const userRole = localStorage.getItem("userRole");
              const MaPhongBan = localStorage.getItem("MaPhongBan");
              
              // If user is regular or has approval rights, show all faculties
              if (userRole === APP_ROLES.thuong || userRole === APP_ROLES.troLy_phong || userRole === APP_ROLES.lanhDao_phong) {
                $("#modal-khoa").prepend('<option value="ALL">ALL</option>');
                response.MaPhongBan.forEach(function(item) {
                  $("#modal-khoa").append(
                    `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                  );
                });
              } else {
                // If user is faculty member, only show their faculty
                response.MaPhongBan.forEach(function(item) {
                  if (item.MaPhongBan === MaPhongBan) {
                    $("#modal-khoa").append(
                      `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                    );
                  }
                });
              }
            }
          }
        });
      }

      // Function to load edit requests
      async function loadEditRequests() {
        try {
          const dot = document.getElementById("filter-dot").value;
          const ki = document.getElementById("filter-ki").value;
          const namHoc = document.getElementById("filter-nam").value;
          const khoa = document.getElementById("filter-khoa").value;
          const heDaoTao = document.getElementById("filter-he-dao-tao").value;
          
          // Lấy role và isKhoa từ localStorage
          const userRole = localStorage.getItem("userRole");
          const isKhoa = localStorage.getItem("isKhoa");

          console.log("Loading edit requests with filters:", { dot, ki, namHoc, khoa, heDaoTao });

          const response = await fetch("/get-do-an-edit-requests", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              dot,
              ki_hoc: ki,
              nam_hoc: namHoc,
              khoa,
              he_dao_tao: heDaoTao
            })
          });

          if (!response.ok) {
            throw new Error("Lỗi khi lấy danh sách yêu cầu chỉnh sửa");
          }

          const result = await response.json();
          console.log("Server response:", result);

          if (!result.success) {
            throw new Error(result.message || "Lỗi khi lấy danh sách yêu cầu chỉnh sửa");
          }

          const requests = result.data;
          const tbody = document.getElementById("edit-requests-body");
          tbody.innerHTML = "";

          if (!requests || requests.length === 0) {
            tbody.innerHTML = `
              <tr>
                <td colspan="13" class="text-center">Không có yêu cầu chỉnh sửa nào</td>
              </tr>
            `;
            return;
          }

          requests.forEach(request => {
            const canApproveKhoa = (userRole === "<%= APP_ROLES.lanhDao_khoa %>" || userRole === "<%= APP_ROLES.gv %>") && isKhoa === "1";
            const canApproveDaoTao = (userRole === "<%= APP_ROLES.troLy_phong %>" || userRole === "<%= APP_ROLES.lanhDao_phong %>") && isKhoa === "0";
            const canApproveBGD = (userRole === "<%= APP_ROLES.troLy_phong %>" || userRole === "<%= APP_ROLES.lanhDao_phong %>") && isKhoa === "0";
            const allApproved = request.khoa_duyet && request.daotao_duyet && request.bgd_duyet;
            const canUpdate = (userRole === "<%= APP_ROLES.troLy_phong %>" || userRole === "<%= APP_ROLES.lanhDao_phong %>");
            const status = request.status === 'Cập nhật thành công' ? 'Đã ban hành' : 'Chưa ban hành';
            const isPublished = request.status === 'Cập nhật thành công';

            const row = document.createElement("tr");
            row.innerHTML = `
              <td>${request.khoa || ''}</td>
              <td>${request.dot || ''}</td>
              <td>${request.ki_hoc || ''}</td>
              <td>${request.nam_hoc || ''}</td>
              <td>${request.lop_hoc_phan || ''}</td>
              <td>${request.he_dao_tao || ''}</td>
              <td>${request.old_value || ''}</td>
              <td>${request.new_value || ''}</td>
              <td>
                <input type="checkbox" 
                  class="approval-checkbox" 
                  data-request-id="${request.id}" 
                  data-type="khoa"
                  ${request.khoa_duyet ? 'checked' : ''}
                  ${(canApproveKhoa && !isPublished) ? '' : 'disabled'}
                  onchange="handleApproval(this)">
              </td>
              <td>
                <input type="checkbox" 
                  class="approval-checkbox" 
                  data-request-id="${request.id}" 
                  data-type="<%= APP_DEPARTMENTS.daoTao.toLowerCase() %>"
                  ${request.daotao_duyet ? 'checked' : ''}
                  ${(canApproveDaoTao && !isPublished) ? '' : 'disabled'}
                  onchange="handleApproval(this)">
              </td>
              <td>
                <input type="checkbox" 
                  class="approval-checkbox" 
                  data-request-id="${request.id}" 
                  data-type="bgd"
                  ${request.bgd_duyet ? 'checked' : ''}
                  ${(canApproveBGD && !isPublished) ? '' : 'disabled'}
                  onchange="handleApproval(this)">
              </td>
              <td>${status}</td>
              <td>
                ${canUpdate ? `
                  <button 
                    class="btn btn-primary btn-sm update-request-btn" 
                    data-request-id="${request.id}"
                    onclick="updateRequest(${request.id})"
                    ${(!allApproved || isPublished) ? 'disabled' : ''}
                    style="padding: 2px 5px; font-size: 12px; line-height: 1.2;"
                  >
                    Ban Hành
                  </button>
                ` : ''}
              </td>
            `;
            tbody.appendChild(row);
          });

        } catch (error) {
          console.error("Error in loadEditRequests:", error);
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      }

      // Handle approval changes
      async function handleApproval(checkbox) {
        const requestId = checkbox.getAttribute("data-request-id");
        const type = checkbox.getAttribute("data-type");
        const isChecked = checkbox.checked;

        try {
          // Hiển thị loading
          Swal.fire({
            title: 'Đang xử lý...',
            allowOutsideClick: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });

          const response = await fetch("/approve-do-an-edit", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              requestId,
              type,
              approved: isChecked
            }),
          });

          if (!response.ok) {
            throw new Error("Lỗi khi cập nhật trạng thái duyệt");
          }

          const result = await response.json();
          if (result.success) {
            // Đóng loading
            Swal.close();
            
            // Hiển thị thông báo thành công
            await Swal.fire({
              title: "Thành công",
              text: "Đã cập nhật trạng thái duyệt",
              icon: "success",
              timer: 1500,
              showConfirmButton: false
            });

            // Load lại dữ liệu với các filter hiện tại
            const dot = document.getElementById("filter-dot").value;
            const ki = document.getElementById("filter-ki").value;
            const namHoc = document.getElementById("filter-nam").value;
            const khoa = document.getElementById("filter-khoa").value;
            const heDaoTao = document.getElementById("filter-he-dao-tao").value;

            const response = await fetch("/get-do-an-edit-requests", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                dot,
                ki_hoc: ki,
                nam_hoc: namHoc,
                khoa,
                he_dao_tao: heDaoTao
              })
            });

            if (!response.ok) {
              throw new Error("Lỗi khi tải lại dữ liệu");
            }

            const result = await response.json();
            if (!result.success) {
              throw new Error(result.message || "Lỗi khi tải lại dữ liệu");
            }

            // Render lại bảng với dữ liệu mới
            const tbody = document.getElementById("edit-requests-body");
            tbody.innerHTML = "";

            if (!result.data || result.data.length === 0) {
              tbody.innerHTML = `
                <tr>
                  <td colspan="13" class="text-center">Không có yêu cầu chỉnh sửa nào</td>
                </tr>
              `;
              return;
            }

            result.data.forEach(request => {
              const userRole = localStorage.getItem("userRole");
              const isKhoa = localStorage.getItem("isKhoa");
              const canApproveKhoa = (userRole === "<%= APP_ROLES.lanhDao_khoa %>" || userRole === "<%= APP_ROLES.gv %>") && isKhoa === "1";
              const canApproveDaoTao = (userRole === "<%= APP_ROLES.troLy_phong %>" || userRole === "<%= APP_ROLES.lanhDao_phong %>") && isKhoa === "0";
              const canApproveBGD = (userRole === "<%= APP_ROLES.troLy_phong %>" || userRole === "<%= APP_ROLES.lanhDao_phong %>") && isKhoa === "0";
              const allApproved = request.khoa_duyet && request.daotao_duyet && request.bgd_duyet;
              const canUpdate = (userRole === "<%= APP_ROLES.troLy_phong %>" || userRole === "<%= APP_ROLES.lanhDao_phong %>");
              const status = request.status === 'Cập nhật thành công' ? 'Đã ban hành' : 'Chưa ban hành';
              const isPublished = request.status === 'Cập nhật thành công';

              const row = document.createElement("tr");
              row.innerHTML = `
                <td>${request.khoa || ''}</td>
                <td>${request.dot || ''}</td>
                <td>${request.ki_hoc || ''}</td>
                <td>${request.nam_hoc || ''}</td>
                <td>${request.lop_hoc_phan || ''}</td>
                <td>${request.he_dao_tao || ''}</td>
                <td>${request.old_value || ''}</td>
                <td>${request.new_value || ''}</td>
                <td>
                  <input type="checkbox" 
                    class="approval-checkbox" 
                    data-request-id="${request.id}" 
                    data-type="khoa"
                    ${request.khoa_duyet ? 'checked' : ''}
                    ${(canApproveKhoa && !isPublished) ? '' : 'disabled'}
                    onchange="handleApproval(this)">
                </td>
                <td>
                  <input type="checkbox" 
                    class="approval-checkbox" 
                    data-request-id="${request.id}" 
                    data-type="daotao"
                    ${request.daotao_duyet ? 'checked' : ''}
                    ${(canApproveDaoTao && !isPublished) ? '' : 'disabled'}
                    onchange="handleApproval(this)">
                </td>
                <td>
                  <input type="checkbox" 
                    class="approval-checkbox" 
                    data-request-id="${request.id}" 
                    data-type="bgd"
                    ${request.bgd_duyet ? 'checked' : ''}
                    ${(canApproveBGD && !isPublished) ? '' : 'disabled'}
                    onchange="handleApproval(this)">
                </td>
                <td>${status}</td>
                <td>
                  ${canUpdate ? `
                    <button 
                      class="btn btn-primary btn-sm update-request-btn" 
                      data-request-id="${request.id}"
                      onclick="updateRequest(${request.id})"
                      ${(!allApproved || isPublished) ? 'disabled' : ''}
                      style="padding: 2px 5px; font-size: 12px; line-height: 1.2;"
                    >
                      Ban Hành
                    </button>
                  ` : ''}
                </td>
              `;
              tbody.appendChild(row);
            });
          } else {
            throw new Error(result.message || "Lỗi khi cập nhật trạng thái duyệt");
          }
        } catch (error) {
          console.error("Error:", error);
          checkbox.checked = !isChecked; // Revert the checkbox
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      }

      // Handle request updates
      async function updateRequest(requestId) {
        try {
          // Hiển thị loading
          Swal.fire({
            title: 'Đang xử lý...',
            allowOutsideClick: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });

          const response = await fetch("/update-do-an-edit", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              requestId
            }),
          });

          if (!response.ok) {
            throw new Error("Lỗi khi cập nhật yêu cầu");
          }

          const result = await response.json();
          
          // Đóng loading
          Swal.close();

          if (result.success) {
            await Swal.fire({
              title: "Thành công",
              text: "Đã cập nhật yêu cầu thành công!",
              icon: "success",
              timer: 1500,
              showConfirmButton: false
            });

            // Load lại dữ liệu với các filter hiện tại
            const dot = document.getElementById("filter-dot").value;
            const ki = document.getElementById("filter-ki").value;
            const namHoc = document.getElementById("filter-nam").value;
            const khoa = document.getElementById("filter-khoa").value;
            const heDaoTao = document.getElementById("filter-he-dao-tao").value;

            const response = await fetch("/get-do-an-edit-requests", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                dot,
                ki_hoc: ki,
                nam_hoc: namHoc,
                khoa,
                he_dao_tao: heDaoTao
              })
            });

            if (!response.ok) {
              throw new Error("Lỗi khi tải lại dữ liệu");
            }

            const result = await response.json();
            if (!result.success) {
              throw new Error(result.message || "Lỗi khi tải lại dữ liệu");
            }

            // Render lại bảng với dữ liệu mới
            const tbody = document.getElementById("edit-requests-body");
            tbody.innerHTML = "";

            if (!result.data || result.data.length === 0) {
              tbody.innerHTML = `
                <tr>
                  <td colspan="13" class="text-center">Không có yêu cầu chỉnh sửa nào</td>
                </tr>
              `;
              return;
            }

            result.data.forEach(request => {
              const userRole = localStorage.getItem("userRole");
              const isKhoa = localStorage.getItem("isKhoa");
              const canApproveKhoa = (userRole === "<%= APP_ROLES.lanhDao_khoa %>" || userRole === "<%= APP_ROLES.gv %>") && isKhoa === "1";
              const canApproveDaoTao = (userRole === "<%= APP_ROLES.troLy_phong %>" || userRole === "<%= APP_ROLES.lanhDao_phong %>") && isKhoa === "0";
              const canApproveBGD = (userRole === "<%= APP_ROLES.troLy_phong %>" || userRole === "<%= APP_ROLES.lanhDao_phong %>") && isKhoa === "0";
              const allApproved = request.khoa_duyet && request.daotao_duyet && request.bgd_duyet;
              const canUpdate = (userRole === "<%= APP_ROLES.troLy_phong %>" || userRole === "<%= APP_ROLES.lanhDao_phong %>");
              const status = request.status === 'Cập nhật thành công' ? 'Đã ban hành' : 'Chưa ban hành';
              const isPublished = request.status === 'Cập nhật thành công';

              const row = document.createElement("tr");
              row.innerHTML = `
                <td>${request.khoa || ''}</td>
                <td>${request.dot || ''}</td>
                <td>${request.ki_hoc || ''}</td>
                <td>${request.nam_hoc || ''}</td>
                <td>${request.lop_hoc_phan || ''}</td>
                <td>${request.he_dao_tao || ''}</td>
                <td>${request.old_value || ''}</td>
                <td>${request.new_value || ''}</td>
                <td>
                  <input type="checkbox" 
                    class="approval-checkbox" 
                    data-request-id="${request.id}" 
                    data-type="khoa"
                    ${request.khoa_duyet ? 'checked' : ''}
                    ${(canApproveKhoa && !isPublished) ? '' : 'disabled'}
                    onchange="handleApproval(this)">
                </td>
                <td>
                  <input type="checkbox" 
                    class="approval-checkbox" 
                    data-request-id="${request.id}" 
                    data-type="daotao"
                    ${request.daotao_duyet ? 'checked' : ''}
                    ${(canApproveDaoTao && !isPublished) ? '' : 'disabled'}
                    onchange="handleApproval(this)">
                </td>
                <td>
                  <input type="checkbox" 
                    class="approval-checkbox" 
                    data-request-id="${request.id}" 
                    data-type="bgd"
                    ${request.bgd_duyet ? 'checked' : ''}
                    ${(canApproveBGD && !isPublished) ? '' : 'disabled'}
                    onchange="handleApproval(this)">
                </td>
                <td>${status}</td>
                <td>
                  ${canUpdate ? `
                    <button 
                      class="btn btn-primary btn-sm update-request-btn" 
                      data-request-id="${request.id}"
                      onclick="updateRequest(${request.id})"
                      ${(!allApproved || isPublished) ? 'disabled' : ''}
                      style="padding: 2px 5px; font-size: 12px; line-height: 1.2;"
                    >
                      Ban Hành
                    </button>
                  ` : ''}
                </td>
              `;
              tbody.appendChild(row);
            });
          } else {
            throw new Error(result.message || "Lỗi khi cập nhật yêu cầu");
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      }

      // Xử lý sự kiện nút "Hiển thị" trong modal
      $("#modal-render").click(async function() {
        try {
          const dotValue = $("#modal-dot").val();
          const kiValue = $("#modal-ki").val();
          const namValue = $("#modal-nam").val();
          const khoaValue = $("#modal-khoa").val();
          const heDaoTaoValue = $("#modal-he-dao-tao").val();

          $("#modal-loading").show();

          const response = await fetch("/get-do-an-chinh-thuc", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              Khoa: khoaValue,
              Dot: dotValue,
              Ki: kiValue,
              Nam: namValue,
              he_dao_tao: heDaoTaoValue
            }),
          });

          if (!response.ok) {
            throw new Error("Lỗi khi lấy dữ liệu đồ án");
          }

          const data = await response.json();
          renderDoAnTable(data);
        } catch (error) {
          console.error("Error:", error);
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        } finally {
          $("#modal-loading").hide();
        }
      });

      // Xử lý sự kiện nút "Yêu cầu chỉnh sửa"
      $("#modal-request-edit").click(async function() {
        const updates = [];
        const inputs = document.querySelectorAll("#modal-data-table-body input");
        
        inputs.forEach(input => {
          // Kiểm tra nếu có giá trị mới được nhập vào
          if (input.value && input.value !== input.dataset.originalValue) {
            const rowData = JSON.parse(input.dataset.row);
            // Lấy tên đề tài từ dòng hiện tại
            const row = input.closest('tr');
            const tenDeTai = row.cells[3].textContent; // Lấy giá trị từ cột tên đề tài
            
            updates.push({
              data: {
                Khoa: rowData.MaPhongBan,
                Dot: rowData.Dot,
                KiHoc: rowData.ki,
                NamHoc: rowData.NamHoc,
                LopHocPhan: tenDeTai,
                he_dao_tao: rowData.he_dao_tao
              },
              colName: "GiangVien",
              newValue: input.value,
              originalValue: input.dataset.originalValue
            });
          }
        });

        if (updates.length === 0) {
          Swal.fire({
            title: "Thông báo",
            text: "Không có thay đổi nào được thực hiện",
            icon: "info"
          });
          return;
        }

        try {
          const response = await fetch("/request-do-an-edit", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ updates }),
          });

          const result = await response.json();
          
          if (result.success) {
            await Swal.fire({
              title: "Thành công",
              text: "Yêu cầu chỉnh sửa đã được gửi thành công",
              icon: "success",
              confirmButtonText: "OK"
            });
            
            // Đóng modal sau khi xác nhận
            const modal = bootstrap.Modal.getInstance(document.getElementById('editDoAnModal'));
            modal.hide();
            // Refresh danh sách yêu cầu
            loadEditRequests();
          } else {
            throw new Error(result.message || "Lỗi khi gửi yêu cầu chỉnh sửa");
          }
        } catch (error) {
          console.error("Error:", error);
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      });

      // Hàm render bảng đồ án trong modal
      function renderDoAnTable(data) {
        const headerRow = document.getElementById("modal-table-header");
        const tbody = document.getElementById("modal-data-table-body");
        headerRow.innerHTML = "";
        tbody.innerHTML = "";

        if (data.length === 0) {
          Swal.fire({
            title: "Thông báo",
            text: "Không có dữ liệu đồ án",
            icon: "info"
          });
          return;
        }

        // Các cột cần hiển thị
        const columns = [
          { key: "SinhVien", label: "Sinh viên" },
          { key: "MaSV", label: "Mã SV" },
          { key: "TenDeTai", label: "Tên đề tài" },
          { key: "GiangVienDefault", label: "Giảng viên hướng dẫn" },
          { key: "GiangVien1", label: "Giảng viên 1" },
          { key: "GiangVien2", label: "Giảng viên 2" },
          { key: "NgayBatDau", label: "Ngày bắt đầu" },
          { key: "NgayKetThuc", label: "Ngày kết thúc" }
        ];

        columns.forEach(col => {
          const th = document.createElement("th");
          th.textContent = col.label;
          headerRow.appendChild(th);
        });

        data.forEach(row => {
          const tr = document.createElement("tr");
          columns.forEach((col, idx) => {
            const td = document.createElement("td");
            let value = row[col.key] || "";
            if (col.key === "NgayBatDau" || col.key === "NgayKetThuc") {
              value = value ? new Date(value).toLocaleDateString('vi-VN') : "";
            }
            // Nếu là cột Giảng viên 1 cho phép chỉnh sửa
            if (col.key === "GiangVien1") {
              const input = document.createElement("input");
              input.type = "text";
              input.className = "form-control";
              input.value = value;
              input.dataset.originalValue = row.GiangVien1 || "";
              input.dataset.column = "GiangVien1";
              input.dataset.row = JSON.stringify(row);
              td.appendChild(input);
            } else {
              td.textContent = value;
            }
            tr.appendChild(td);
          });
          tbody.appendChild(tr);
        });
      }

      // Xử lý sự kiện nút "Xuất dữ liệu chỉnh sửa"
      $("#export-adjusted-btn").click(async function() {
        try {
          const dotValue = $("#filter-dot").val();
          const kiValue = $("#filter-ki").val();
          const namValue = $("#filter-nam").val();
          const khoaValue = $("#filter-khoa").val();
          const heDaoTaoValue = $("#filter-he-dao-tao").val();

          const response = await fetch("/export-adjusted-do-an", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              dot: dotValue,
              ki_hoc: kiValue,
              nam_hoc: namValue,
              khoa: khoaValue,
              he_dao_tao: heDaoTaoValue
            }),
          });

          if (!response.ok) {
            throw new Error("Lỗi khi xuất dữ liệu");
          }

          // Tạo blob từ response
          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = "do_an_dieu_chinh.xlsx";
          document.body.appendChild(a);
          a.click();
          window.URL.revokeObjectURL(url);
          document.body.removeChild(a);

        } catch (error) {
          console.error("Error:", error);
          Swal.fire({
            title: "Lỗi",
            text: error.message,
            icon: "error"
          });
        }
      });
    </script>
  </body>
</html>
