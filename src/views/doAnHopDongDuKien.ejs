<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <style>
      /* phần css cho label tổng số tiết ki*/
      .total-label {
        margin-left: auto;
        /* Căn phải cho thẻ total-label */
        margin-right: 0;
        font-family: Arial, sans-serif;
        font-size: 16px;
        background-color: #f4f4f4;
        padding: 10px;
        border-radius: 8px;
        width: fit-content;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        display: block;
        /* Đảm bảo thẻ div là khối để căn phải hoạt động */
      }

      .total-label label {
        font-weight: bold;
        /* Giữ chữ in đậm */
        color: #000;
        /* Màu chữ đen */
        margin-right: 8px;
        /* Thêm khoảng cách bên phải */
        cursor: pointer;
        /* Tạo hiệu ứng chuyển màu nền và màu chữ mềm mại */
        padding: 5px 10px;
        /* Thêm padding cho label để tạo không gian */
        border: 1px solid #ccc;
        /* Khung cho label */
        border-radius: 4px;
        /* Bo góc cho khung */
      }

      .total-label label,
      .total-label label span {
        background-color: #007bff;
        /* Màu nền khi hover */
        color: #fff;
        /* Màu chữ trắng khi hover */
      }

      .total-label span {
        font-weight: bold;
        /* Giữ chữ trong span cũng in đậm */
        color: #333;
        /* Màu chữ đậm cho giá trị */
      }

      /* CSS cho bảng */
      .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        border: 2px solid black;
      }

      .table th,
      .table td {
        padding: 10px;
        text-align: left;
        border: 1px solid black;
      }

      .table th {
        background-color: #007bff;
        color: white;
        font-weight: bold;
      }

      .table tbody tr:nth-child(even) {
        background-color: #f8f9fa;
      }

      .table tbody tr:hover {
        background-color: #e2e6ea;
      }

      .table td {
        vertical-align: middle;
      }

      .bg-custom {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      .spinner-border {
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
      }

      .header-actions {
        display: flex;
        /* Flexbox container */
        flex-wrap: wrap;
        /* Wrap items if they don't fit in one line */
        align-items: center;
        /* Vertically center items */
        gap: 10px;
        /* Space between the elements */
        justify-content: space-between;
      }

      .right {
        margin-top: 20px;
      }

      .btn {
        height: 45px;
        margin-left: 5px;
      }

      /* Phần cảnh báo nếu số tiết vượt quá 300 */
      .alert-sotiet {
        background-color: #ffe4b5 !important;
        color: #333;
        /* Tùy chọn: Thay đổi màu chữ để dễ đọc hơn */
      }

      #SoQD-list {
        font-style: italic;
        /* Chữ nghiêng */
        font-weight: bold;
        /* Màu xám nhạt hơn */
        list-style-type: none;
        /* Bỏ dấu chấm đầu dòng */
        margin-left: 10px;
        /* Dịch sang trái một chút */
        margin-bottom: 0px;
        margin-top: 20px;
      }

      #SoQD-list li::before {
        content: "* ";
      }
    </style>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  </head>

  <body>
    <!-- Phần header -->
    <%- include('header') %>

    <!-- Phần nội dung -->

    <div class="container-fluid my-4">
      <div class="mx-5 flex-grow-1">
        <div class="header-actions">
          <div class="right" style="margin-top: 0px">
            <div class="loc d-flex align-items-center">
              <select class="selectop" id="combobox-dot">
                <option value="">Đợt</option>
              </select>

              <select class="selectop w-100px mx-1" id="comboboxki">
                <option value="">Kỳ</option>
              </select>

              <!-- Combo box Năm -->
              <select class="selectop" id="NamHoc">
                <option value="">Chọn năm học</option>
              </select>
              <select class="selectop" id="departmentFilter">
                <option value="">Chọn khoa</option>
              </select>

              <select class="mx-1 selectop" id="he_dao_tao">
                <option value="Đồ án (Đại học)">Đồ án (Đại học)</option>
                <option value="Đồ án (Cao học)">Đồ án (Cao học)</option>
              </select>

              <button
                class="btn text-nowrap"
                id="render"
                style="margin-top: 17px"
              >
                Hiển thị
              </button>
              <input
                type="text"
                placeholder="Tìm kiếm theo Tên..."
                class="m-2 search"
                style="margin-left: 10px; height: 50px"
                id="searchInput"
                onkeyup="searchClass()"
              />
            </div>
          </div>
        </div>

        <ul id="SoQD-list"></ul>

        <div>
          <table style="margin-top: 3px" class="table table-bordered">
            <thead>
              <tr>
                <th>STT</th>
                <th>Giảng viên hướng</th>
                <th>Tên đề tài</th>
                <th>Sinh viên</th>
                <th>Mã sinh viên</th>
                <th>Đợt</th>
                <th>Năm học</th>
                <th>Ngày bắt đầu</th>
                <th>Ngày kết thúc</th>
                <th>Số tiết</th>
                <th>Tổng số tiết</th>
                <th>Tổng số tiết cả năm</th>
                <th>Khoa</th>
                <!-- Cột Khoa -->
                <th>Chi tiết giảng viên mời</th>
              </tr>
            </thead>
            <tbody class="teacher-group" id="data-table-body"></tbody>
          </table>

          <div class="total-label">
            <!-- <label>Tổng số tiết Lên Lớp: <span class="value" id="totalLL">0</span></label> -->
            <label
              >Tổng số tiết: <span class="value" id="totalQC">0</span></label
            >
          </div>
        </div>
        <div
          id="no-data-message"
          class="text-center my-3"
          style="display: none"
        >
          Không có dữ liệu để hiển thị.
        </div>
      </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- render ra bảng k cần ấn gì cả -->
    <script>
      let SoTietDinhMuc = 300;
      let SoQDList;

      document.getElementById("render").addEventListener("click", function () {
        let Dot = document.getElementById("combobox-dot").value;
        let ki = document.getElementById("comboboxki").value;
        let Nam = document.getElementById("NamHoc").value;
        let Khoa = document.getElementById("departmentFilter").value;
        let heDaoTaoValue = document.getElementById("he_dao_tao").value;

        const body = {
          Khoa: Khoa,
          Dot: Dot,
          ki: ki,
          Nam: Nam,
          heDaoTaoValue,
        };

        fetch("/getInfoDoAnHopDongDuKien", {
          method: "POST", // Phương thức HTTP
          headers: {
            "Content-Type": "application/json", // Định dạng dữ liệu
          },
          body: JSON.stringify(body), // Gửi Khoa trong body
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error(
                "Network response was not ok: " + response.statusText
              );
            }
            return response.json();
          })
          .then((data) => {
            // Xóa dữ liệu cũ khỏi bảng trước khi thêm dữ liệu mới
            document.getElementById("data-table-body").innerHTML = "";

            if (data.length === 0) {
              document.getElementById("no-data-message").style.display =
                "block"; // Hiển thị thông báo nếu không có dữ liệu
            } else {
              document.getElementById("no-data-message").style.display = "none"; // Ẩn thông báo nếu có dữ liệu
              SoTietDinhMuc = data.SoTietDinhMuc;
              SoQDList = data.SoQDList;

              if (SoQDList) {
                const listContainer = document.getElementById("SoQD-list");
                listContainer.innerHTML = SoQDList.map(
                  (item) => `<li>Theo QĐ số: ${item.SoQD}</li>`
                ).join("");
              }
              renderTable(data.groupedByTeacher);
            }
          })
          .catch((error) => {
            console.error("Error fetching data:", error);
            alert("Có lỗi xảy ra khi gọi API: " + error.message);
          });
      });

      function renderTable(data) {
        const tableBody = document.getElementById("data-table-body");
        tableBody.innerHTML = ""; // Clear previous data

        let index = 1;

        // Duyệt qua tất cả các giảng viên trong groupedByTeacher
        Object.keys(data).forEach((teacher) => {
          const courses = data[teacher];
          const totalSoTiet = courses.reduce(
            (total, course) => total + (parseFloat(course.SoTiet) || 0),
            0
          );

          // Duyệt qua từng khóa học của giảng viên
          courses.forEach((course, courseIndex) => {
            const tr = document.createElement("tr");
            tr.setAttribute("data-department", course.MaPhongBan);
            tr.setAttribute("data-dot", course.Dot);
            //tr.setAttribute('data-ki', course.KiHoc);
            tr.setAttribute("data-nam", course.NamHoc);

            // Nếu là môn học đầu tiên của giảng viên, thì cần rowspan
            if (courseIndex === 0) {
              tr.classList.add("teacher-group");
              tr.innerHTML = `
              <td rowspan="${courses.length}">${index}</td>
              <td rowspan="${courses.length}">${
                course.HoTen.split(" - ")[0]
              }<br /> (GVM ${course.MaPhongBan})
              </td>
            `;
              index++; // Tăng index cho giảng viên tiếp theo
            }

            // Thêm các ô dữ liệu cho từng môn học
            tr.innerHTML += `
            <td>${course.TenDeTai}</td>
            <td>${course.SinhVien}</td>
            <td>${course.MaSV}</td>
            <td>${course.Dot}</td>
            <td>${course.NamHoc}</td>
            <td>${formatDate(course.NgayBatDau)}</td>
            <td>${formatDate(course.NgayKetThuc)}</td>
            <td>${course.SoTiet}</td>
          `;

            if (course.TongSoTietCaNam > 300) {
              tr.classList.add("alert-sotiet");
            }

            // Nếu là môn học đầu tiên của giảng viên, thêm tổng số tiết và phòng ban
            if (courseIndex === 0) {
              tr.innerHTML += `
              <td rowspan="${courses.length}">${totalSoTiet.toFixed(2)}</td>
              <td rowspan="${courses.length}">
                ${
                  course.TongSoTietCaNam
                    ? parseFloat(course.TongSoTietCaNam).toFixed(2)
                    : "0.00"
                }
              </td>
              <td rowspan="${courses.length}">${course.MaPhongBan}</td>
              <td rowspan="${courses.length}">
                <button class="action-button view" onclick="viewClass(this, '${
                  parseInt(course.id_Gvm) - 1
                }')">👁️</button>
              </td>
            `;
            }

            // Thêm tr vào tbody
            tableBody.appendChild(tr);
          });
        });

        calculateTotals();
      }

      // tổng quy chuẩn
      function calculateTotals() {
        let totalQC = 0;

        // Chọn tất cả các hàng chứa dữ liệu
        const rows = document.querySelectorAll(
          "tbody.teacher-group tr[data-department]"
        );
        rows.forEach((row) => {
          // Kiểm tra xem hàng có hiển thị hay không
          const isVisible = row.style.display != "none";

          if (isVisible) {
            // Lấy ô QuyChuan theo thứ tự cột (giả định cột QuyChuan là cột thứ 10)
            const qcCell = row.querySelector("td:nth-child(11)");
            if (qcCell) {
              const qcValue = parseFloat(qcCell.textContent.trim());
              if (!isNaN(qcValue)) {
                //console.log(totalQC)
                totalQC += qcValue;
              }
            }
          }
        });

        // Hiển thị tổng số tiết QuyChuẩn vào element có id `totalQC`
        document.getElementById("totalQC").textContent = totalQC.toFixed(2);
      }

      // Hàm format ngày tháng
      function formatDate(dateStr) {
        if (!dateStr) return "N/A";
        const date = new Date(dateStr);
        if (isNaN(date.getTime())) return "N/A";
        const day = String(date.getDate()).padStart(2, "0");
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
      }

      function viewClass(button, index) {
        var hre = "/viewGvm/" + index;
        window.location.href = hre;
      }

      // Tìm kiếm giảng viên mời theo tên

      function searchClass() {
        let input = document.getElementById("searchInput").value.toLowerCase();
        let table = document.getElementById("data-table-body");
        let rows = table.getElementsByTagName("tr");

        let currentGroup = [];
        let groupVisible = false;

        for (let i = 0; i < rows.length; i++) {
          // Bắt đầu từ 1 để bỏ qua hàng tiêu đề
          let row = rows[i];

          if (row.classList.contains("teacher-group")) {
            // Đây là hàng đầu tiên của một nhóm giảng viên mới
            if (currentGroup) {
              // Ẩn/hiện nhóm trước đó dựa trên kết quả tìm kiếm
              setGroupVisibility(currentGroup, groupVisible);
            }

            currentGroup = [];
            groupVisible = false;
          }

          currentGroup.push(row);
          /*
          let teacherNameCell = row.cells[1]; // Giả sử tên giảng viên ở cột thứ 2
          if (teacherNameCell) {
            let teacherName = teacherNameCell.textContent.toLowerCase();
            if (teacherName.includes(input)) {
              groupVisible = true;
            }
          }*/

          if (row.classList.contains("teacher-group")) {
            let teacherNameCell = row.cells[1]; // cột thứ 2
            if (teacherNameCell) {
              let teacherName = teacherNameCell.textContent.toLowerCase();
              if (teacherName.includes(input)) {
                groupVisible = true;
              }
            }
          }
        }

        // Xử lý nhóm cuối cùng
        if (currentGroup) {
          setGroupVisibility(currentGroup, groupVisible);
        }
        calculateTotals();
      }

      function setGroupVisibility(group, isVisible) {
        for (let row of group) {
          row.style.display = isVisible ? "" : "none";
        }
      }
    </script>

    <script>
      function filterTable() {
        // Lấy giá trị đã chọn từ các combobox
        let dot = document.getElementById("combobox-dot").value;
        let ki = document.getElementById("comboboxki").value;
        let nam = document.getElementById("NamHoc").value;
        let department = document
          .getElementById("departmentFilter")
          .value.trim();

        let tbody = document.getElementById("data-table-body");
        let rows = tbody.getElementsByTagName("tr");

        for (let i = 0; i < rows.length; i++) {
          let row = rows[i];
          let cells = row.getElementsByTagName("td");

          // Giả sử thứ tự cột là: Khoa, Đợt, Kì, Năm
          let rowDepartment = cells[0].textContent.trim(); // Khoa
          let rowDot = cells[1].textContent.trim(); // Đợt
          let rowKi = cells[2].textContent.trim(); // Kì
          let rowNam = cells[3].textContent.trim(); // Năm

          // Logic lọc
          let matchesDepartment =
            department === "" || rowDepartment === department;
          let matchesDot = dot === "" || rowDot === dot;
          let matchesKi = ki === "" || rowKi === ki;
          let matchesNam = nam === "" || rowNam === nam; // Kiểm tra năm

          // Hiển thị hoặc ẩn hàng dựa trên kết quả lọc
          if (matchesDepartment && matchesDot && matchesKi && matchesNam) {
            row.style.display = ""; // Hiển thị hàng
          } else {
            row.style.display = "none"; // Ẩn hàng
          }
        }
      }
    </script>
    <script>
      document
        .getElementById("changePasswordLink")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage

          if (tenDangNhap) {
            // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
            window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(
              tenDangNhap
            )}`;
          } else {
            alert("Không tìm thấy TenDangNhap trong localStorage.");
          }
        });
    </script>

    <script>
      $(document).ready(function () {
        $('#NamHoc option[value=""]').remove();
        $('#comboboxki option[value=""]').remove();
        $('#combobox-dot option[value=""]').remove();

        $.ajax({
          url: "/getNamHoc",
          method: "GET",
          success: function (response) {
            if (response.success) {
              response.NamHoc.forEach(function (item) {
                console.log(item.NamHoc);
                $("#NamHoc").append(
                  `<option value="${item.NamHoc}">${item.NamHoc}</option>`
                );
              });

              response.Ki.forEach(function (item) {
                console.log(item.Ki);
                $("#comboboxki").append(
                  `<option value="${item.value}">${item.Ki}</option>`
                );
              });
              response.Dot.forEach(function (item) {
                console.log(item.Dot);
                $("#combobox-dot").append(
                  `<option value="${item.value}">${item.Dot}</option>`
                );
              });
            } else {
              console.error(
                "Không lấy được dữ liệu năm học:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu năm học:", error);
          },
        });
      });
    </script>
    <script>
      $(document).ready(function () {
        const isKhoa = localStorage.getItem("isKhoa");

        if (isKhoa == 1) {
          $("#departmentFilter").hide(); // ẩn cả label và select nếu bọc trong form-group
          return; // không cần gọi AJAX nữa
        }

        $('#departmentFilter option[value=""]').remove();
        // Gọi AJAX để lấy dữ liệu JSON từ API
        $.ajax({
          url: "/api/shared/faculty-code-list", // Đường dẫn tới API getPhongBan
          method: "GET",
          success: function (response) {
            // Kiểm tra nếu response thành công
            const MaPhongBan = response.MaPhongBan;
            if (response.success) {
              $("#departmentFilter").prepend(
                '<option value="ALL">Tất cả khoa</option>'
              );
              // Lặp qua từng mục trong mảng MaPhongBan
              response.MaPhongBan.forEach(function (item) {
                // Nếu item.MaPhongBan bằng boMon.MaPhongBan, hiển thị trước
                console.log(item);
                $("#departmentFilter").append(
                  `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                );
              });

              // Nếu không có phòng ban nào tương ứng, bạn có thể thêm tùy chọn mặc định ở đây
              if (!$("#departmentFilter option:selected").length) {
                $("#departmentFilter").prepend(
                  '<option value="">Chọn Phòng Ban</option>'
                );
              }
            } else {
              console.error(
                "Không lấy được dữ liệu phongBan:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu phongBan:", error);
          },
        });
      });
    </script>

    <script>
      document
        .getElementById("infome")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const id_User = localStorage.getItem("id_User"); // Lấy id_User từ localStorage\
          if (id_User) {
            // Chuyển hướng đến trang infome và truyền id_User trong URL
            window.location.href = `/infome/${id_User}`;
          } else {
            alert("Không tìm thấy id_User trong localStorage.");
          }
        });
    </script>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const role = localStorage.getItem("userRole");

        // Ẩn button ngay khi trang được tải
        const actionButton = document.getElementById("changeMessage");
        //Ẩn site thêm thông báo
        if (role === "Duyệt") {
          actionButton.style.display = "";
        } else {
          actionButton.style.display = "none";
        }
      });
    </script>
    <script>
      document
        .getElementById("changeMessage")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

          if (MaPhongBan) {
            // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
            window.location.href = `/changeMessage/${MaPhongBan}`;
          } else {
            alert("Không tìm thấy MaPhongBan trong localStorage.");
          }
        });
    </script>
  </body>
</html>
