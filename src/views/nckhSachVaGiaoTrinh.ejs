<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="/css/admin.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
  <link rel="stylesheet" href="/css/nckh.css" />
</head>

<body>
  <!-- Phần header -->
  <%- include('header') %>

    <!-- Phần nội dung -->
    <div class="my-3 box formNckh">
      <h2 class="titleNckh">Sách và giáo trình xuất bản trong nước</h2>

      <div class="tabs">
        <ul class="tabs-nav">
          <li class="tab-item">
            <a href="#formTab" class="tab-link" id="tab-form" onclick="toggleTabs(event, 'formTab', 'tab-form')">Nhập
            </a>
          </li>
          <li class="tab-item">
            <a href="#viewTab" class="tab-link" id="tab-view" onclick="toggleTabs(event, 'viewTab', 'tab-view')">Xem số
              giờ quy đổi</a>
          </li>
        </ul>
      </div>

      <!-- form tab -->
      <div id="formTab" class="tab-content py-4">
        <form id="formData" class="">
          <div class="form-group flex-container">
            <!-- Phân loại -->
            <div class="flex-item">
              <label for="phanLoai">Phân loại</label>
              <select id="phanLoai" name="phanLoai" required>
                <option value="Sách chuyên khảo được xuất bản">Sách chuyên khảo được xuất bản</option>
                <option value="Giáo trình, tài liệu giảng dạy được xuất bản">Giáo trình, tài liệu giảng dạy được xuất
                  bản</option>
                <option value="Sách tham khảo hoặc tương đương được xuất bản">Sách tham khảo hoặc tương đương được xuất
                  bản</option>
                <option value="Một chương sách chuyên khảo được xuất bản tại nước ngoài">Một chương sách chuyên khảo
                  được xuất bản tại nước ngoài</option>
              </select>
            </div>
            <!-- Năm học -->
            <div class="flex-item">
              <label for="namHocForm">Năm học</label>
              <select class="namHoc" id="namHocForm" name="namHoc" required>
                <!-- Các năm học sẽ được thêm vào đây bằng JavaScript -->
              </select>
            </div>
            <div class="flex-item">
              <label for="MaPhongBanForm">Khoa</label>
              <select id="MaPhongBanForm" class="MaPhongBan" style="width: 100% !important;" required>
              </select>
            </div>
          </div>

          <!-- Tên sách, giáo trình -->
          <div class="form-group">
            <label for="tenSachVaGiaoTrinh">Tên sách, giáo trình</label>
            <input type="text" id="tenSachVaGiaoTrinh" name="tenSachVaGiaoTrinh" placeholder="Nhập tên sách, giáo trình"
              required />
          </div>

          <!-- Số xuất bản và Số trang -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="soXuatBan">Số xuất bản</label>
              <input type="text" id="soXuatBan" name="soXuatBan" placeholder="Nhập số xuất bản" required />
            </div>
            <div class="flex-item">
              <label for="soTrang">Số trang</label>
              <input type="number" id="soTrang" name="soTrang" placeholder="Nhập số trang" required />
            </div>
          </div>

          <!-- Tác giả và Đơn vị -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="tacGia">
                Chủ biên
                <input type="checkbox" id="tacGiaCheckbox" name="tacGiaCheckbox" />
                <span class="faded-text">(Check nếu là giảng viên ngoài viện và điền đơn vị công tác)</span>
              </label>
              <div id="tacGia-suggestions" class="suggestions-container"></div>
              <input type="text" id="tacGia" name="tacGia" placeholder="Nhập tên tác giả" required />
            </div>
            <div class="flex-item combo-box-wrapper">
              <label for="tacGiaComboBox">Đơn vị</label>
              <input type="text" id="tacGiaComboBox" name="tacGiaComboBox" class="combo-box"
                placeholder="Nhập đơn vị" />
            </div>
          </div>

          <!-- Đồng chủ biên và Đơn vị -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="tacGiaCtn">
                Đồng chủ biên
                <input type="checkbox" id="tacGiaCtnCheckbox" name="tacGiaCtnCheckbox" />
              </label>
              <div id="tacGiaCtn-suggestions" class="suggestions-container"></div>
              <input type="text" id="tacGiaCtn" name="tacGiaCtn" placeholder="Nhập tên tác giả" />
            </div>
            <div class="flex-item combo-box-wrapper">
              <label for="tacGiaCtnComboBox">Đơn vị</label>
              <input type="text" id="tacGiaCtnComboBox" name="tacGiaCtnComboBox" class="combo-box"
                placeholder="Nhập đơn vị" />
            </div>
          </div>

          <!-- Thành viên -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="thanhVien">
                Thành viên
                <input type="checkbox" id="thanhVienCheckbox" name="thanhVienCheckbox" />
              </label>
              <div id="themThanhVien-suggestions" class="suggestions-container-dstv"></div>
              <input type="text" id="thanhVien" name="thanhVien" placeholder="Nhập tên thành viên"
                class="input-field" />
            </div>
            <div class="flex-item combo-box-wrapper">
              <label for="thanhVienComboBox">Đơn vị</label>
              <input type="text" id="thanhVienComboBox" name="thanhVienComboBox" class="combo-box"
                placeholder="Nhập đơn vị" />
            </div>
          </div>
          <div id="memberListDisplay" class="member-list-display form-group"></div>
          <button type="button" class="btn" id="submitBtn">Gửi</button>
        </form>
      </div>

      <!-- view tab -->
      <div id="viewTab" class="tab-content py-4 hidden">
        <h2 class="titleNckh"></h2>
        <div class="flex-container-view">
          <div class="flex-item">
            <label for="namHocXem">Chọn Năm Học:</label>
            <select id="namHocXem" class="namHoc"></select>
          </div>
          <div class="flex-item">
            <label for="MaPhongBanView">Khoa</label>
            <select id="MaPhongBanView" class="MaPhongBan" style="width: 150px; height: 35px;"></select>
          </div>
          <div class="flex-item-view">
            <button onclick="getData()" class="btn text-nowrap" id="render">Hiển thị</button>
          </div>
        </div>

        <div class="table-container">
          <table border="1" class="table table-bordered">
            <thead id="table-header">
              <tr>
                <th>Phân loại</th>
                <th>Tên sách, giáo trình</th>
                <th>Số xuất bản</th>
                <th>Số trang</th>
                <th>Tác giả</th>
                <th>Đồng chủ biên</th>
                <th>Thành viên</th>
                <th>Thao tác</th>
              </tr>
            </thead>
            <tbody id="table-body"></tbody>
          </table>
        </div>
      </div>
    </div>

    <!-- SweetAlert2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css" rel="stylesheet" />
    <!-- SweetAlert2 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- nckh view -->
    <script>
      // Hàm format để định dạng ngày từ ISO 8601
      function formatDate(dateString) {
        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, "0");
        const month = String(date.getMonth() + 1).padStart(2, "0");
        const year = date.getFullYear();
        return `${day}/${month}/${year}`;
      }

      // Hàm fix định dạng số (dùng luôn của mã đề tài dự án)
      function fixNumberFormat(text) {
        if (typeof text !== "string") return text;
        return text.replace(/(\d),(\d{2})/g, "$1.$2");
      }

      // Hàm render table
      function renderTable(data) {
        console.log("Dữ liệu trước khi render:", data);
        const tbody = document.getElementById("table-body");
        window.currentData = data; // Lưu dữ liệu hiện tại để sử dụng khi hủy
        tbody.innerHTML = "";

        data.forEach((item) => {
          const newItem = { ...item };
          // Sửa lỗi dấu phẩy trong các chuỗi chứa số giờ
          newItem.DanhSachThanhVien = fixNumberFormat(newItem.DanhSachThanhVien);
          newItem.TacGia = fixNumberFormat(newItem.TacGia);
          newItem.DongChuBien = fixNumberFormat(newItem.DongChuBien);

          const row = createTableRow(newItem);
          tbody.appendChild(row);
        });

        console.log("Dữ liệu sau khi sửa:", window.currentData);
      }

      // Hàm tạo một hàng của bảng
      function createTableRow(item) {
        const row = document.createElement("tr");
        // Nếu không có thuộc tính ID, bạn có thể sử dụng chuỗi rỗng hoặc tạo ID giả
        row.setAttribute("data-id", item.ID || "");

        function createCell(value) {
          const cell = document.createElement("td");
          cell.textContent = value;
          return cell;
        }

        row.appendChild(createCell(item.PhanLoai));
        row.appendChild(createCell(item.TenSachVaGiaoTrinh));
        row.appendChild(createCell(item.SoXuatBan));
        row.appendChild(createCell(item.SoTrang));
        row.appendChild(createCell(fixNumberFormat(item.TacGia)));
        row.appendChild(createCell(fixNumberFormat(item.DongChuBien)));
        row.appendChild(
          createCell(
            item.DanhSachThanhVien
              .split(",")
              .map((member) => fixNumberFormat(member.trim()))
              .join(", ")
          )
        );

        // Tạo nút Sửa
        const editButton = document.createElement("button");
        editButton.classList.add("btn", "btn-edit");
        editButton.textContent = "Sửa";
        editButton.addEventListener("click", () => enableEditMode(row, item));

        const actionCell = document.createElement("td");
        actionCell.appendChild(editButton);
        row.appendChild(actionCell);

        return row;
      }

      function cancelEditMode(row, item) {
        row.replaceWith(createTableRow(item)); // Thay thế hàng đang chỉnh sửa bằng hàng gốc
      }

      // Hàm chuyển sang chế độ chỉnh sửa cho hàng được chọn
      function enableEditMode(row, item) {
        const id = row.getAttribute("data-id");
        const originalRow = row.cloneNode(true); // Lưu lại dòng gốc để khôi phục khi hủy
        row.innerHTML = "";

        function createEditableCell(value, className) {
          const cell = document.createElement("td");
          const input = document.createElement("input");
          input.type = "text";
          input.value = value;
          input.className = className;
          cell.appendChild(input);
          return cell;
        }

        row.appendChild(createEditableCell(item.PhanLoai, `phan-loai-${id}`));
        row.appendChild(createEditableCell(item.TenSachVaGiaoTrinh, `ten-sach-${id}`));
        row.appendChild(createEditableCell(item.SoXuatBan, `so-xuat-ban-${id}`));
        row.appendChild(createEditableCell(item.SoTrang, `so-trang-${id}`));
        row.appendChild(createEditableCell(fixNumberFormat(item.TacGia), `tac-gia-${id}`));
        row.appendChild(createEditableCell(fixNumberFormat(item.DongChuBien), `dong-chu-bien-${id}`));
        row.appendChild(
          createEditableCell(
            item.DanhSachThanhVien
              .split(",")
              .map((member) => fixNumberFormat(member.trim()))
              .join(", "),
            `danh-sach-thanh-vien-${id}`
          )
        );

        // Tạo nút Lưu
        const saveButton = document.createElement("button");
        saveButton.textContent = "Lưu";
        saveButton.classList.add("btn", "btn-save");
        saveButton.addEventListener("click", () => saveData(id));

        // Tạo nút Hủy
        const cancelButton = document.createElement("button");
        cancelButton.textContent = "Hủy";
        cancelButton.classList.add("btn", "btn-cancel");
        cancelButton.addEventListener("click", () => {
          row.replaceWith(createTableRow(item)); // Khôi phục lại dòng gốc
        });

        const actionCell = document.createElement("td");
        actionCell.appendChild(saveButton);
        actionCell.appendChild(cancelButton);
        row.appendChild(actionCell);
      }

      // Hàm lưu dữ liệu sau khi chỉnh sửa
      function saveData(id) {
        const MaBang = "sachvagiaotrinh";
        const updatedData = {
          PhanLoai: document.querySelector(`.phan-loai-${id}`).value,
          TenSachVaGiaoTrinh: document.querySelector(`.ten-sach-${id}`).value,
          SoXuatBan: document.querySelector(`.so-xuat-ban-${id}`).value,
          SoTrang: document.querySelector(`.so-trang-${id}`).value,
          TacGia: document.querySelector(`.tac-gia-${id}`).value,
          DongChuBien: document.querySelector(`.dong-chu-bien-${id}`).value,
          DanhSachThanhVien: document.querySelector(`.danh-sach-thanh-vien-${id}`).value
        };


        console.log(updatedData);

        fetch(`/nckh/edit/${id}/${MaBang}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(updatedData)
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              Swal.fire({
                title: 'Thông báo',
                html: `${data.message}`,
                icon: 'success',
                confirmButtonText: 'OK',
                width: 'auto',
                padding: '20px',
                timer: 3000, // Tự động đóng sau 3 giây
                timerProgressBar: true, // Hiển thị thanh đếm thời gian
                didClose: () => {
                  cancelEditMode(document.querySelector(`[data-id='${id}']`), updatedData);
                }
              })
            }
          })
          .catch((error) => console.error("Lỗi khi cập nhật dữ liệu:", error));
      }

      // Hàm lấy dữ liệu từ server và hiển thị bảng
      async function getData() {
        const year = document.getElementById("namHocXem").value;
        const department = document.getElementById("MaPhongBanView").value;
        const url = `/sachvagiaotrinh/${year}/${department}`;

        try {
          fetch(url)
            .then((response) => response.json())
            .then((data) => {
              console.log(data);
              renderTable(data);
            })
            .catch((error) => {
              console.error("Lỗi khi lấy dữ liệu:", error);
            });
        } catch (error) {
          console.error("Lỗi trong quá trình gửi yêu cầu:", error);
        }
      }
    </script>


    <!-- nckh form -->
    <script>
      // giảng viên cơ hữu của trường, để gợi ý tên
      var giangVienCoHuu = [];

      // check thì mới cho nhập đơn vị
      document.addEventListener("DOMContentLoaded", function () {
        // Lấy các checkbox và ô nhập đơn vị
        const chuNhiemCheckbox = document.getElementById("tacGiaCheckbox");
        const thuKyCheckbox = document.getElementById("tacGiaCtnCheckbox");
        const thanhVienCheckbox = document.getElementById("thanhVienCheckbox");

        const chuNhiemComboBox = document.getElementById("tacGiaComboBox");
        const thuKyComboBox = document.getElementById("tacGiaCtnComboBox");
        const thanhVienComboBox = document.getElementById("thanhVienComboBox");

        // Hàm disable hoặc enable ô nhập đơn vị
        function toggleComboBoxDisabled() {
          // Chủ nhiệm
          if (chuNhiemCheckbox.checked) {
            chuNhiemComboBox.disabled = false;
          } else {
            chuNhiemComboBox.disabled = true;
            chuNhiemComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }

          // Thư ký
          if (thuKyCheckbox.checked) {
            thuKyComboBox.disabled = false;
          } else {
            thuKyComboBox.disabled = true;
            thuKyComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }

          // Thành viên
          if (thanhVienCheckbox.checked) {
            thanhVienComboBox.disabled = false;
          } else {
            thanhVienComboBox.disabled = true;
            thanhVienComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }
        }

        // Disable các ô nhập đơn vị khi tải trang
        toggleComboBoxDisabled();

        // Thêm sự kiện thay đổi (change) cho các checkbox
        chuNhiemCheckbox.addEventListener("change", toggleComboBoxDisabled);
        thuKyCheckbox.addEventListener("change", toggleComboBoxDisabled);
        thanhVienCheckbox.addEventListener("change", toggleComboBoxDisabled);
      });


      // check thì tắt gợi ý
      document.addEventListener("DOMContentLoaded", function () {
        // Lấy các phần tử
        const chuNhiemInput = document.getElementById("tacGia");
        const chuNhiemSuggestions =
          document.getElementById("tacGia-suggestions");
        const chuNhiemCheckbox = document.getElementById("tacGiaCheckbox");

        const thanhVienCheckbox = document.getElementById("thanhVienCheckbox"); // Thành viên checkbox
        const thanhVienInput = document.getElementById("thanhVien"); // Thành viên input text
        const thanhVienSuggestions = document.getElementById(
          "themThanhVien-suggestions"
        ); // Thành viên gợi ý

        // Thêm sự kiện lắng nghe khi chuNhiemCheckbox thay đổi
        chuNhiemCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox chủ nhiệm được đánh dấu, ẩn phần gợi ý chủ nhiệm
            chuNhiemSuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý chủ nhiệm
            chuNhiemSuggestions.style.display = "block";
          }
        });

        // Thêm sự kiện lắng nghe khi thanhVienCheckbox thay đổi
        thanhVienCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox thành viên được đánh dấu, ẩn phần gợi ý thành viên
            thanhVienSuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý thành viên
            thanhVienSuggestions.style.display = "block";
          }
        });
      });
      // =================================================================

      // thực hiện gắn hàm gợi ý khi load trang
      document.addEventListener("DOMContentLoaded", () => {
        // Hàm xử lý sự kiện nhập liệu
        function handleInput(inputId, suggestionId, comboBoxId, checkboxId) {
          const inputElement = document.getElementById(inputId);
          const suggestionContainer = document.getElementById(suggestionId);
          const comboBoxElement = document.getElementById(comboBoxId);
          const checkboxElement = document.getElementById(checkboxId); // Lấy checkbox
          const errorMessage = document.createElement("div");

          let isSuggestionSelected = false; // Biến theo dõi việc chọn gợi ý

          // Gợi ý khi người dùng nhập
          inputElement.addEventListener("input", () => {
            const query = inputElement.value.trim(); // Trim đầu và cuối chuỗi của input
            suggestionContainer.innerHTML = ""; // Xóa gợi ý cũ

            if (!checkboxElement.checked && query) {
              // Nếu checkbox không được chọn và có nhập liệu
              const suggestions = giangVienCoHuu.filter(
                (item) =>
                  item.HoTen.toLowerCase().trim().includes(query.toLowerCase()) // So sánh không phân biệt hoa thường
              );

              suggestions.forEach((item) => {
                const suggestionItem = document.createElement("div");
                suggestionItem.textContent = item.HoTen;
                suggestionItem.className = "suggestion-item";

                suggestionItem.addEventListener("click", () => {
                  // Điền tên và đơn vị vào input theo định dạng "Tên - Đơn vị"
                  const unit = comboBoxElement.value; // Lấy giá trị từ combo box
                  inputElement.value = `${item.HoTen.trim()} - KMA`; // Điền giá trị vào ô input
                  suggestionContainer.innerHTML = ""; // Xóa gợi ý sau khi chọn
                  isSuggestionSelected = true; // Đánh dấu là gợi ý đã được chọn
                  if (inputId == "thanhVien") {
                    addMember(inputElement.value);
                  }
                });

                suggestionContainer.appendChild(suggestionItem);
              });
            }
          });

          // Kiểm tra giá trị khi người dùng nhấn Enter hoặc click ra ngoài (blur)
          inputElement.addEventListener("blur", () => {
            // Nếu gợi ý đã được chọn, ngừng xử lý sự kiện blur
            if (isSuggestionSelected) {
              isSuggestionSelected = false; // Reset lại trạng thái
              return; // Không thực hiện cảnh báo
            }

            // Nếu checkbox được đánh dấu, cho phép nhấn Enter để nhập trực tiếp
            if (checkboxElement.checked) {
              const value = inputElement.value.trim(); // Trim input value (không chuyển thành lowercase)
              const isValid = giangVienCoHuu.some(
                (item) =>
                  item.HoTen.trim().toLowerCase() === value.toLowerCase() // So sánh không phân biệt hoa thường và trim cả hai đầu
              );
              // Không hiển thị cảnh báo nếu nhập không đúng nữa
            }
          });

          // Xử lý khi nhấn Enter
          inputElement.addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
              event.preventDefault(); // Ngừng hành động mặc định của phím Enter
              // Nếu checkbox được đánh dấu, tự động điền giá trị vào input và gọi addMember
              if (checkboxElement.checked) {
                const query = inputElement.value.trim();
                // Kiểm tra xem người dùng đã nhập tên hay chưa
                if (query) {
                  const unit = comboBoxElement.value; // Lấy giá trị từ combo box
                  inputElement.value = `${query} - ${unit}`; // Điền giá trị vào ô input theo định dạng "Tên - Đơn vị"
                  suggestionContainer.innerHTML = ""; // Xóa gợi ý sau khi nhấn Enter

                  if (inputId == "thanhVien") {
                    addMember(inputElement.value);
                  }
                }
              }
            }
          });

          // Ngăn chặn sự kiện blur khi đang hiển thị gợi ý
          inputElement.addEventListener("focus", () => {
            suggestionContainer.innerHTML = ""; // Dọn gọn gợi ý cũ khi focus lại vào input
          });

          // Ẩn gợi ý nếu checkbox được chọn
          checkboxElement.addEventListener("change", () => {
            if (checkboxElement.checked) {
              suggestionContainer.innerHTML = ""; // Ẩn gợi ý
            }
          });
        }

        // Gọi hàm cho từng cặp ô nhập liệu và container gợi ý, truyền thêm combo box và checkbox
        handleInput(
          "tacGia",
          "tacGia-suggestions",
          "tacGiaComboBox",
          "tacGiaCheckbox"
        );
        handleInput(
          "tacGiaCtn",
          "tacGiaCtn-suggestions",
          "tacGiaCtnComboBox",
          "tacGiaCtnCheckbox"
        );
        handleInput(
          "thanhVien",
          "themThanhVien-suggestions",
          "thanhVienComboBox",
          "thanhVienCheckbox"
        );
      });
      // =================================================================

      // lấy dữ liệu giảng viên cơ hữu
      document.addEventListener("DOMContentLoaded", async () => {
        try {
          const response = await fetch("/giangviencohuu"); // Gọi API
          if (!response.ok) {
            throw new Error("Không thể lấy dữ liệu từ API.");
          }

          // Thông báo nếu cần (chỉnh sửa alert nếu cần)
          // alert("Dữ liệu đã được tải thành công!");

          // Chuyển đổi dữ liệu sang JSON
          const data = await response.json();
          console.log(data);

          // Gán dữ liệu vào mảng giangVienCoHuu
          giangVienCoHuu = data;
        } catch (error) {
          console.error("Lỗi khi gọi API:", error);
        }
      });

      // gửi form lên sv
      document
        .getElementById("submitBtn")
        .addEventListener("click", function () {
          // Lấy dữ liệu từ form
          const formData = {
            phanLoai: document.getElementById("phanLoai").value, // Phân loại
            namHoc: document.getElementById("namHocForm").value, // Năm học
            tenSachVaGiaoTrinh:
              document.getElementById("tenSachVaGiaoTrinh").value, // Tên bằng sáng chế / giải thưởng
            soXuatBan: document.getElementById("soXuatBan").value, // Số quyết định công nhận
            soTrang: document.getElementById("soTrang").value, // Ngày quyết định công nhận
            tacGia: document.getElementById("tacGia").value, // Tác giả
            dongChuBien: document.getElementById("tacGiaCtn").value,
            thanhVien: Array.from(
              document.querySelectorAll("#memberListDisplay span")
            ).map(
              (member) => member.textContent // Danh sách thành viên
            ),
            khoa: document.getElementById("MaPhongBanForm").value,
          };



          let missing = 0;

          for (let key of Object.keys(formData)) {
            if (!formData[key]) {
              missing++;
            }
          }

          if (missing > 0) {
            alert("Vui lòng nhập đủ thông tin");
            return;
          }
          console.log(formData);

          // Gửi dữ liệu lên server
          fetch("/sachvagiaotrinh", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Gửi dữ liệu thất bại!");
              }
              return response.json();
            })
            .then((data) => {
              if (data.success) {
                Swal.fire({
                  title: 'Thông báo',
                  html: `${data.message}`,
                  icon: 'success',
                  confirmButtonText: 'OK',
                  width: 'auto',
                  padding: '20px',
                  timer: 3000, // Tự động đóng sau 3 giây
                  timerProgressBar: true, // Hiển thị thanh đếm thời gian
                  didClose: () => {
                    document.getElementById("formData").reset();
                    document.getElementById("memberListDisplay").innerHTML = "";
                    members = [];
                    location.reload();
                  }
                })
              }
            })
            .catch((error) => {
              console.error("Lỗi:", error);
              alert("Có lỗi xảy ra: " + error.message);
            });
        });

      // =================================================================
      let members = [];
      // Hàm thêm thành viên vào mảng member để hiển thị
      function addMember(memberName) {
        if (memberName) {
          // Thêm thành viên vào mảng members
          console.log(memberName);
          members.push(memberName);
          // Cập nhật danh sách thành viên hiển thị trên form
          updateFormMemberList();
          // Xóa nội dung ô input sau khi thêm thành viên
          document.getElementById("thanhVien").value = "";
        }
      }
      // Hàm cập nhật danh sách thành viên và hiển thị lên form
      function updateFormMemberList() {
        const memberListDisplay = document.getElementById("memberListDisplay");
        memberListDisplay.innerHTML = ""; // Xóa danh sách cũ
        // Duyệt qua mảng members để hiển thị từng thành viên
        members.forEach((member, index) => {
          const memberContainer = document.createElement("div");
          memberContainer.style.display = "flex"; // Đảm bảo các phần tử được hiển thị trên cùng một dòng
          memberContainer.style.alignItems = "center"; // Căn giữa tên và nút xóa
          memberContainer.style.justifyContent = "space-between"; // Đảm bảo tên thành viên và nút xóa được căn lề
          // Tạo phần tử hiển thị tên thành viên
          const span = document.createElement("span");
          span.textContent = member;
          span.style.flexGrow = 1; // Cho phép tên thành viên chiếm hết không gian còn lại trong div
          // Thêm nút xóa cho từng thành viên
          const removeButton = document.createElement("button");
          removeButton.innerHTML = '<i class="fa fa-times"></i>';
          removeButton.onclick = () => removeMember(index); // Gắn sự kiện xóa
          // Thêm tên thành viên và nút xóa vào giao diện
          memberContainer.appendChild(span);
          memberContainer.appendChild(removeButton);
          // Thêm container chứa thành viên vào danh sách hiển thị
          memberListDisplay.appendChild(memberContainer);
        });
      }
      // Hàm xóa thành viên
      function removeMember(index) {
        console.log("xóa");
        members.splice(index, 1); // Xóa thành viên khỏi mảng
        updateFormMemberList(); // Cập nhật lại danh sách hiển thị
      }
      // =================================================================
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        try {
          const response = await fetch("/data/sachvagiaotrinh"); // Gọi API
          if (!response.ok) {
            throw new Error("Không thể lấy dữ liệu từ API.");
          }

          // Chuyển đổi dữ liệu sang JSON
          const data = await response.json();
          console.log(data);

          // Lấy thẻ select
          const selectElement = document.getElementById("phanLoai");

          // Xóa các option cũ (nếu có)
          selectElement.innerHTML = "";

          // Thêm option mới từ dữ liệu API
          data.forEach(item => {
            const option = document.createElement("option");
            option.value = item.SachGiaoTrinh; // Giá trị option
            option.textContent = item.SachGiaoTrinh; // Nội dung hiển thị
            selectElement.appendChild(option);
          });

        } catch (error) {
          console.error("Lỗi khi gọi API:", error);
        }
      });
    </script>
    <!-- nckh tab chuyển tab -->
    <script src="/js/nckh/nckh.js"></script>
    <!-- link href -->
    <script src="/js/nckh/href.js"></script>
    <!-- srcipt năm học, khoa -->
    <script src="/js/nckh/getdata.js"></script>
</body>

</html>