<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link rel="stylesheet" href="/css/gvmList.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <style>
      .teacher-group {
        border: 2px solid black;
        /* Viền đen xung quanh nhóm giảng viên */
        border-collapse: separate;
        margin-bottom: 10px;
      }

      .teacher-group td,
      .teacher-group th {
        padding: 8px;
        text-align: left;
        border: 2px solid black;
        /* Viền đen xung quanh nhóm giảng viên */
      }

      .suggestions {
        position: absolute;
        /* Đảm bảo gợi ý nằm bên trên các thành phần khác */
        top: calc(100% + 5px);
        /* Đặt gợi ý phía trên input với một khoảng cách */
        font-size: 12px;
        left: 0;
        background-color: #f0f0f0;
        color: #000;
        border: 1px solid #ccc;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        /* Đảm bảo gợi ý nằm trên các thành phần khác */
        border-radius: 4px;
        max-height: 300px;
        overflow-y: auto;
      }

      /* Hiệu ứng lung linh khi hover */
      .suggestions:hover {
        background-color: #e0e0e0;
        /* Thay đổi màu nền khi hover */
        box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
        /* Tăng độ bóng khi hover */
      }

      /* CSS cho từng mục gợi ý */
      .suggestion-item {
        padding: 8px 12px;
        /* Khoảng cách bên trong từng mục */
        cursor: pointer;
        /* Con trỏ chuột thay đổi khi hover */
        transition: background-color 0.2s ease;
        /* Tạo hiệu ứng chuyển đổi mượt mà khi hover */
      }

      /* Hiệu ứng khi người dùng di chuột vào mục gợi ý */
      .suggestion-item:hover {
        background-color: #f0f0f0;
        /* Màu nền khi hover */
      }

      /* Đặt lại một số thuộc tính khi input mất focus */
      input:focus + .suggestions {
        display: block;
        /* Đảm bảo khung hiển thị khi input được focus */
      }

      /* Đảm bảo container gợi ý không bị tràn ra ngoài khung nếu có */
      .suggestions {
        overflow: hidden;
      }

      #search-teacher {
        margin-top: 20px;
        /* Hạ thấp ô tìm kiếm giảng viên xuống 1 pixel */
      }

      #exportButton {
        margin-top: 30px;
        /* Hạ thấp nút xuất xuống 2 pixel */
      }
    </style>
    <style>
      /* Tùy chỉnh danh sách gợi ý */
      .ui-autocomplete {
        background: white;
        border: 1px solid #ccc;
        max-height: 200px;
        overflow-y: auto;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        font-size: 14px;
        padding: 5px;
        width: 200px; /* Giảm độ rộng */
        font-size: 12px !important;
      }

      /* Hiển thị đẹp hơn, không cần hover */
      .ui-menu-item {
        padding: 8px;
        cursor: default;
      }
    </style>
  </head>

  <body>
    <!-- Phần header -->
    <%- include('header') %>

    <!-- Phần nội dung -->

    <div class="container mt-4">
      <div class="col-12">
        <!-- Tiêu đề -->
        <h2 class="text-center mb-4">Phụ Lục Hợp Đồng Giảng Viên</h2>

        <!-- Container chính -->
        <div class="controls-container d-flex align-items-center">
          <select class="form-select w-100px mx-2 selectop" id="combobox-dot">
            <option value="1">Đợt 1</option>
            <option value="2">Đợt 2</option>
          </select>

          <select class="form-select w-100px mx-2 selectop" id="comboboxki">
            <option value="1">Kỳ 1</option>
            <option value="2">Kỳ 2</option>
          </select>

          <select
            class="form-select mx-2 selectop"
            style="width: max-content"
            id="NamHoc"
          >
            <option value="">Năm học</option>
          </select>
          <select
            class="form-select mx-1 selectop"
            style="width: max-content"
            id="MaPhongBan"
          >
            <option value="">Chọn khoa</option>
          </select>

          <select
            id="loaiHopDong"
            name="loaiHopDong"
            class="form-select w-200px mx-2 selectop"
          >
            <option value="Đại học (Mật mã)">Đại học(Mật mã)</option>
            <option value="Đại học (Đóng học phí)">
              Đại học(Đóng học phí)
            </option>
            <option value="Cao học (Đóng học phí)">
              Cao học(Đóng học phí)
            </option>
            <option value="Nghiên cứu sinh (Đóng học phí)">
              Nghiên cứu sinh(Đóng học phí)
            </option>
          </select>

          <input
            type="text"
            class="form-control w-200px mx-2"
            id="search-teacher"
            placeholder="Tìm kiếm giảng viên"
            style="height: 45px"
          />

          <div class="d-flex justify-content-center">
            <!-- Nút xuất dữ liệu với style được cải thiện -->
            <button
              id="exportButton"
              class="btn btn-primary btn-lg hover-shadow"
            >
              <i class="fas fa-file-export me-2"></i>
              Xuất dữ liệu phụ lục giảng viên mời
            </button>
          </div>

          <div
            id="dataContainer"
            data-gvm-list="<%= JSON.stringify(gvmoiList) %>"
          ></div>
        </div>
      </div>
    </div>

    <script>
      document
        .getElementById("exportButton")
        .addEventListener("click", function () {
          const dot = document.getElementById("combobox-dot").value;
          const ki = document.getElementById("comboboxki").value;
          const namHoc = document.getElementById("NamHoc").value;
          const khoa = document.getElementById("MaPhongBan").value;
          const teacherName = document.getElementById("search-teacher").value;
          const loaiHopDong = document.getElementById("loaiHopDong").value;

          if (!dot || !ki || !namHoc) {
            alert("Vui lòng chọn đầy đủ thông tin đợt, kỳ và năm học.");
            return;
          }

          // Tạo URL với các tham số
          let url = `/api/export-phu-luc-giang-vien-moi?dot=${encodeURIComponent(
            dot
          )}&ki=${encodeURIComponent(ki)}&namHoc=${encodeURIComponent(namHoc)}`;

          if (khoa) {
            url += `&khoa=${encodeURIComponent(khoa)}`;
          }

          if (teacherName) {
            url += `&teacherName=${encodeURIComponent(teacherName)}`;
          }
          // Thêm loại hợp đồng vào URL
          if (loaiHopDong) {
            url += `&loaiHopDong=${encodeURIComponent(loaiHopDong)}`;
          }
          // Chuyển hướng trực tiếp đến URL để tải file
          window.location.href = url;
        });
    </script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Thêm jQuery và jQuery UI -->
    <link
      rel="stylesheet"
      href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"
    />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>

    <!-- jQuery UI CSS -->
    <link
      rel="stylesheet"
      href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"
    />

    <script>
      // Lấy query string từ URL
      const urlParams = new URLSearchParams(window.location.search);
      const message = urlParams.get("message");

      // Lấy phần tử div để hiển thị thông báo
      const messageDiv = document.getElementById("message");

      // console.log(message)
      // Hiển thị thông báo dựa trên giá trị của message
      if (message === "insertSuccess") {
        alert("Update Success");
      } else if (message === "insertFalse") {
        alert("Update False");
      }

      // Sau khi hiển thị thông báo, xóa query string để tránh hiển thị lại khi refresh
      if (message) {
        // Sử dụng window.history để xóa query string mà không refresh lại trang
        const newUrl = window.location.origin + window.location.pathname;
        window.history.replaceState({}, document.title, newUrl);
      }
    </script>

    <!-- Phần phân quyền -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Thêm sự kiện click cho phần tử có id="ThongTinGD"
        const ThongTinGD = document.getElementById("ThongTinGD");

        ThongTinGD.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa"); // Lấy role từ localStorage

          if (isKhoa == 0) {
            // Nếu là đào tạo hoặc tài chính
            window.location.href = "/info2";
          } else {
            window.location.href = "/info";
          }
        });

        // Thêm sự kiện click cho phần tử có id="Home"

        const Home = document.getElementById("Home");

        Home.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa");

          if (isKhoa == 0) {
            // Nếu là đào tạo hoặc tài chính
            window.location.href = "/maindt";
          } else {
            window.location.href = "/mainkhoa";
          }
        });
      });
    </script>

    <script>
      document
        .getElementById("changePasswordLink")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage

          if (tenDangNhap) {
            // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
            window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(
              tenDangNhap
            )}`;
          } else {
            alert("Không tìm thấy TenDangNhap trong localStorage.");
          }
        });
    </script>
    <script>
      $(document).ready(function () {
        $('#NamHoc option[value=""]').remove();
        $('#comboboxki option[value=""]').remove();
        $('#combobox-dot option[value=""]').remove();

        $.ajax({
          url: "/getNamHoc",
          method: "GET",
          success: function (response) {
            if (response.success) {
              response.NamHoc.forEach(function (item) {
                console.log(item.NamHoc);
                $("#NamHoc").append(
                  `<option value="${item.NamHoc}">${item.NamHoc}</option>`
                );
              });

              response.Ki.forEach(function (item) {
                console.log(item.Ki);
                $("#comboboxki").append(
                  `<option value="${item.value}">${item.Ki}</option>`
                );
              });
              response.Dot.forEach(function (item) {
                console.log(item.Dot);
                $("#combobox-dot").append(
                  `<option value="${item.value}">${item.Dot}</option>`
                );
              });
            } else {
              console.error(
                "Không lấy được dữ liệu năm học:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu năm học:", error);
          },
        });
      });
    </script>
    <script>
      $(document).ready(function () {
        const isKhoa = localStorage.getItem("isKhoa");

        // Nếu không phải phòng ban thì ẩn
        if (isKhoa == 1) {
          $("#MaPhongBan").hide(); // ẩn cả label và select nếu bọc trong form-group
          return; // không cần gọi AJAX nữa
        }

        $('#MaPhongBan option[value=""]').remove();
        // Gọi AJAX để lấy dữ liệu JSON từ API
        $.ajax({
          url: "/api/shared/faculty-code-list", // Đường dẫn tới API getPhongBan
          method: "GET",
          success: function (response) {
            // Kiểm tra nếu response thành công
            const MaPhongBan = response.MaPhongBan;
            if (response.success) {
              $("#MaPhongBan").prepend(
                '<option value="ALL">Tất cả khoa</option>'
              );
              // Lặp qua từng mục trong mảng MaPhongBan
              response.MaPhongBan.forEach(function (item) {
                // Nếu item.MaPhongBan bằng boMon.MaPhongBan, hiển thị trước
                console.log(item);
                $("#MaPhongBan").append(
                  `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                );
              });

              // Nếu không có phòng ban nào tương ứng, bạn có thể thêm tùy chọn mặc định ở đây
              if (!$("#MaPhongBan option:selected").length) {
                $("#MaPhongBan").prepend(
                  '<option value="">Chọn Phòng Ban</option>'
                );
              }
            } else {
              console.error(
                "Không lấy được dữ liệu phongBan:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu phongBan:", error);
          },
        });
      });
    </script>
    <script>
      // Chuyển đổi dữ liệu phòng ban thành JSON và lưu vào Local Storage
      //const gvmList = <%- JSON.stringify(gvmoiList) %>;
      const gvmList = JSON.parse(
        document.getElementById("dataContainer").getAttribute("data-gvm-list")
      );

      localStorage.setItem("gvmList", JSON.stringify(gvmList));

      $(document).ready(function () {
        // Cấu hình autocomplete
        $("#search-teacher").autocomplete({
          source: function (request, response) {
            const value = request.term.toLowerCase();

            const gvmList = JSON.parse(localStorage.getItem("gvmList"));

            let suggestions = gvmList.map(
              (item) => `${item.HoTen} - ${item.MaPhongBan}`
            );

            // Nếu có giá trị nhập vào thì lọc
            if (value) {
              suggestions = suggestions.filter((name) =>
                name.toLowerCase().includes(value)
              );
            }

            response(suggestions);
          },
          minLength: 0, // Cho phép hiển thị ngay khi nhấn vào ô input
          select: function (event, ui) {
            let parts = ui.item.value.split("-");
            let processedName = parts[0].trim();
            $("#search-teacher").val(processedName);
            return false;
          },
        });

        // Khi click vào ô input, hiển thị danh sách gợi ý ngay lập tức
        $("#search-teacher").on("focus", function () {
          $(this).autocomplete("search", ""); // Gọi autocomplete với chuỗi rỗng để hiển thị toàn bộ
        });
      });

      /*
            // Hàm gợi ý bộ môn ở ô nhập 
            function showSuggestionsGvm(input) {
              const value = input.value.toLowerCase(); // Lấy giá trị nhập vào và chuyển thành chữ thường
              hideSuggestionsGvm(); // Ẩn gợi ý cũ trước khi hiển thị gợi ý mới

              // Tạo thẻ div chứa gợi ý
              const suggestionsContainer = document.createElement('div');
              suggestionsContainer.className = 'suggestions'; // Đặt class cho khung gợi ý

              // Đặt vị trí cho suggestionsContainer
              const { bottom, left, width } = input.getBoundingClientRect(); // Lấy vị trí của input
              suggestionsContainer.style.position = 'absolute'; // Để đè lên bảng
              suggestionsContainer.style.top = `${bottom + window.scrollY}px`; // Đặt vị trí ngay dưới input
              suggestionsContainer.style.left = `${left + window.scrollX}px`; // Căn trái với input
              suggestionsContainer.style.width = `${width}px`; // Chiều rộng bằng với input
              suggestionsContainer.style.zIndex = '1000'; // Đảm bảo luôn hiển thị trên các thành phần khác
              suggestionsContainer.style.maxHeight = '200px'; // Giới hạn chiều cao để không quá lớn
              suggestionsContainer.style.overflowY = 'auto';  // Cho phép cuộn dọc nếu quá nhiều gợi ý

              // Thêm suggestionsContainer vào DOM
              document.body.appendChild(suggestionsContainer); // Đặt suggestionsContainer vào body thay vì cha của input

              let suggestions = []; // Khởi tạo mảng gợi ý

              // Lấy dữ liệu từ localStorage
              const boMon = JSON.parse(localStorage.getItem("gvmList")) || []; // Giảng viên mời
              console.log(gvmList)

              suggestions = gvmList.map(item => `${item.HoTen} - ${item.MaPhongBan}`);

              console.log("value= " + value);

              // Nếu người dùng nhập dữ liệu, lọc kết quả theo tên giảng viên
              if (value) {
                suggestions = suggestions.filter(name => name.toLowerCase().includes(value));
              }

              // Nếu không có gợi ý, ẩn container
              if (suggestions.length === 0) {
                suggestionsContainer.remove();
                return; // Kết thúc hàm nếu không có gợi ý
              }

              // Tạo gợi ý dưới dạng danh sách (list)
              suggestions.forEach(name => {
                const suggestionItem = document.createElement('div'); // Tạo phần tử cho từng gợi ý
                suggestionItem.className = 'suggestion-item'; // Đặt class để tùy chỉnh giao diện
                suggestionItem.textContent = name; // Hiển thị tên giảng viên kèm theo khoa
                0
                // Thêm sự kiện click để điền tên vào ô input
                // Thêm sự kiện click để điền tên vào ô input
                suggestionItem.onclick = function () {
                  // Giả sử 'name' là giá trị gợi ý bạn nhận được từ suggestionItem
                  const name = suggestionItem.innerText; // Hoặc có thể là suggestionItem.textContent

                  // Tìm vị trí của dấu "-" trong chuỗi
                  const dashIndex = name.indexOf("-");

                  // Nếu không có dấu "-", sử dụng tên gợi ý gốc
                  let processedName = name;

                  if (dashIndex !== -1) {
                    // Lấy phần sau dấu "-" và loại bỏ khoảng trắng
                    //processedName = name.slice(dashIndex + 1).trim().replace(/\s+/g, '');
                    processedName = name.slice(0, dashIndex).trim();

                  }

                  // Điền tên gợi ý đã xử lý vào ô input
                  input.value = processedName;
                  // filterBoMon();

                  hideSuggestionsGvm(); // Ẩn gợi ý sau khi chọn
                };


                suggestionsContainer.appendChild(suggestionItem); // Thêm mục vào danh sách gợi ý
              });

              // Ẩn gợi ý khi input không còn focus
              input.onblur = function () {
                setTimeout(() => {
                  hideSuggestionsGvm();
                }, 100); // Thời gian chờ để nhận diện click
              };
            }

            // Hàm ẩn gợi ý
            function hideSuggestionsGvm() {
              const existingSuggestions = document.querySelectorAll('.suggestions');
              existingSuggestions.forEach(suggestion => suggestion.remove());
            }
              */
    </script>
    <script>
      document
        .getElementById("infome")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const id_User = localStorage.getItem("id_User"); // Lấy id_User từ localStorage\
          if (id_User) {
            // Chuyển hướng đến trang infome và truyền id_User trong URL
            window.location.href = `/infome/${id_User}`;
          } else {
            alert("Không tìm thấy id_User trong localStorage.");
          }
        });
    </script>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const role = localStorage.getItem("userRole");

        // Ẩn button ngay khi trang được tải
        const actionButton = document.getElementById("changeMessage");
        //Ẩn site thêm thông báo
        if (role === "Lãnh đạo khoa" || role === "Duyệt") {
          actionButton.style.display = "";
        } else {
          actionButton.style.display = "none";
        }
      });
    </script>
    <script>
      document
        .getElementById("changeMessage")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

          if (MaPhongBan) {
            // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
            window.location.href = `/changeMessage/${MaPhongBan}`;
          } else {
            alert("Không tìm thấy MaPhongBan trong localStorage.");
          }
        });
    </script>
  </body>
</html>
