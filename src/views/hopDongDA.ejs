<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/gvmList.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">

  <style>
    .teacher-group {
      border: 2px solid black;
      /* Viền đen xung quanh nhóm giảng viên */
      border-collapse: separate;
      margin-bottom: 10px;
    }

    .teacher-group td,
    .teacher-group th {
      padding: 8px;
      text-align: left;
      border: 2px solid black;
      /* Viền đen xung quanh nhóm giảng viên */

    }

    .btn {
      height: 45px;
    }

    .suggestions {
      position: absolute;
      /* Đảm bảo gợi ý nằm bên trên các thành phần khác */
      top: calc(100% + 5px);
      /* Đặt gợi ý phía trên input với một khoảng cách */
      font-size: 12px;
      left: 0;
      background-color: #f0f0f0;
      color: #000;
      border: 1px solid #ccc;
      box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
      z-index: 1000;
      /* Đảm bảo gợi ý nằm trên các thành phần khác */
      border-radius: 4px;
      max-height: 300px;
      overflow-y: auto;
    }

    /* Hiệu ứng lung linh khi hover */
    .suggestions:hover {
      background-color: #e0e0e0;
      /* Thay đổi màu nền khi hover */
      box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
      /* Tăng độ bóng khi hover */
    }


    /* CSS cho từng mục gợi ý */
    .suggestion-item {
      padding: 8px 12px;
      /* Khoảng cách bên trong từng mục */
      cursor: pointer;
      /* Con trỏ chuột thay đổi khi hover */
      transition: background-color 0.2s ease;
      /* Tạo hiệu ứng chuyển đổi mượt mà khi hover */
    }

    /* Hiệu ứng khi người dùng di chuột vào mục gợi ý */
    .suggestion-item:hover {
      background-color: #f0f0f0;
      /* Màu nền khi hover */
    }

    /* Đặt lại một số thuộc tính khi input mất focus */
    input:focus+.suggestions {
      display: block;
      /* Đảm bảo khung hiển thị khi input được focus */
    }

    /* Đảm bảo container gợi ý không bị tràn ra ngoài khung nếu có */
    .suggestions {
      overflow: hidden;
    }
  </style>
</head>

<body>
  <!-- Phần header -->
  <%- include('header') %>

  <!-- Phần nội dung -->

  <div class="d-flex justify-content-center">
    <!-- Main content -->
    <div class="gvmList">
      <div class="m-3">
        <h1>HỢP ĐỒNG ĐỒ ÁN</h1>

        <div class="controls-container d-flex align-items-center">
          <select class="form-select w-100px mx-2 selectop" id="combobox-dot">
        
          </select>
<!-- 
          <select class="form-select w-100px mx-2 selectop" id="comboboxki">
          </select> -->

          <select class="form-select mx-2 selectop" style="width: max-content;" id="NamHoc">
          </select>

          <select class="form-select mx-2 selectop" style="width: max-content;" id="MaPhongBan">
            <option value="">Chọn khoa</option>
          </select>
          <input type="text" class="form-control w-200px mx-2" id="search-teacher" oninput="showSuggestionsGvm(this)" onclick="showSuggestionsGvm(this)" placeholder="Tìm kiếm giảng viên">

          <select id="loaiHopDong" name="loaiHopDong" class="form-select w-200px mx-2 selectop">
         
            <option value="Đồ án">Đồ án</option>
          </select>

          <button type="button" class="btn mx-2" id="exportButton2"><i class="fas fa-file-export me-2"></i>Xuất Hợp
            Đồng</button>
        </div>
     
        <script>
          // Trong file exportHD.ejs
          document.getElementById("exportButton2").addEventListener("click", function () {
            const dot = document.getElementById("combobox-dot").value;
            // const ki = document.getElementById("comboboxki").value;
            const namHoc = document.getElementById("NamHoc").value;
            const khoa = document.getElementById("MaPhongBan").value;
            const teacherName = document.getElementById("search-teacher").value;
            const loaiHopDong = document.getElementById("loaiHopDong").value; // Lấy giá trị từ combobox "Loại hợp đồng"
        
            if (!dot ||  !namHoc) {
              alert("Vui lòng chọn đầy đủ thông tin đợt và năm học.");
              return;
            }
        
            let url = `/exportHDDA/Dowload?dot=${encodeURIComponent(dot)}&namHoc=${encodeURIComponent(namHoc)}`;
        
            if (khoa) {
              url += `&khoa=${encodeURIComponent(khoa)}`;
            }
        
            if (teacherName) {
              url += `&teacherName=${encodeURIComponent(teacherName)}`;
            }
        
            // Thêm loại hợp đồng vào URL
            if (loaiHopDong) {
              url += `&loaiHopDong=${encodeURIComponent(loaiHopDong)}`;
            }
        
            window.location.href = url;
          });
        </script>
        </form>
      </div>
    </div>

    </form>
  </div>
  </div>





  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>


  <script>
    // Lấy query string từ URL
    const urlParams = new URLSearchParams(window.location.search);
    const message = urlParams.get('message');

    // Lấy phần tử div để hiển thị thông báo
    const messageDiv = document.getElementById('message');

    // console.log(message)
    // Hiển thị thông báo dựa trên giá trị của message
    if (message === 'insertSuccess') {
      alert("Update Success")
    } else if (message === 'insertFalse') {
      alert("Update False")
    }

    // Sau khi hiển thị thông báo, xóa query string để tránh hiển thị lại khi refresh
    if (message) {
      // Sử dụng window.history để xóa query string mà không refresh lại trang
      const newUrl = window.location.origin + window.location.pathname;
      window.history.replaceState({}, document.title, newUrl);
    }

  </script>


  <!-- Phần phân quyền -->
  <script>
    document.addEventListener('DOMContentLoaded', () => {

      // Thêm sự kiện click cho phần tử có id="ThongTinGD"
      const ThongTinGD = document.getElementById("ThongTinGD");

      ThongTinGD.addEventListener("click", function (event) {
        event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

        const isKhoa = localStorage.getItem("isKhoa"); // Lấy role từ localStorage

        if (isKhoa == 0) { // Nếu là đào tạo hoặc tài chính
          window.location.href = "/info2";

        } else {
          window.location.href = "/info";
        }
      });

      // Thêm sự kiện click cho phần tử có id="Home"

      const Home = document.getElementById("Home");

      Home.addEventListener("click", function (event) {
        event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

        const isKhoa = localStorage.getItem("isKhoa")

        if (isKhoa == 0) { // Nếu là đào tạo hoặc tài chính
          window.location.href = "/maindt";
        } else {
          window.location.href = "/mainkhoa";
        }
      });
    });

  </script>

  <script>
    // Thêm sự kiện click cho phần tử có id="Home"

    const Home = document.getElementById("Home");

    Home.addEventListener("click", function (event) {
      event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

      const isKhoa = localStorage.getItem("isKhoa")

      if (isKhoa == 0) { // Nếu là đào tạo hoặc tài chính
        window.location.href = "/maindt";
      } else {
        window.location.href = "/mainkhoa";
      }
    });


  </script>

  <script>
    document.getElementById("changePasswordLink").addEventListener("click", function (event) {
      event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
      const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage

      if (tenDangNhap) {
        // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
        window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(tenDangNhap)}`;
      } else {
        alert("Không tìm thấy TenDangNhap trong localStorage.");
      }
    });
  </script>

  <!-- <script>
    $(document).ready(function () {
      // Xóa tùy chọn rỗng nếu có
      $('#NamHoc option[value=""]').remove();

      $.ajax({
        url: '/getNamHoc',
        method: 'GET',
        success: function (response) {
          if (response.success) {
            const namHocList = response.NamHoc; // Giả sử NamHoc là một mảng
            console.log(namHocList);

            // Xóa tất cả các tùy chọn hiện có để tránh trùng lặp
            $('#NamHoc').empty();

            // Thêm các tùy chọn từ dữ liệu trả về
            namHocList.forEach(function (item) {
              $('#NamHoc').append(
                `<option value="${item.NamHoc}">${item.NamHoc}</option>`
              );
            });

            // Kiểm tra và thêm tùy chọn mặc định nếu không có tùy chọn nào được chọn
            if ($('#NamHoc option:selected').length === 0) {
              $('#NamHoc').prepend('<option value="">Chọn Năm Học</option>');
            }
          } else {
            console.error("Không thể lấy năm học:", response.message);
          }
        },
        error: function (xhr, status, error) {
          console.error("Lỗi khi gọi API:", error);
        }
      });
    });
  </script> -->

  <script>
    $(document).ready(function () {
      $('#NamHoc option[value=""]').remove();
      $('#comboboxki option[value=""]').remove();
      $('#combobox-dot option[value=""]').remove();

      $.ajax({
        url: '/getNamHoc',
        method: 'GET',
        success: function (response) {
          if (response.success) {

            response.NamHoc.forEach(function (item) {
              console.log(item.NamHoc);
              $('#NamHoc').append(
                `<option value="${item.NamHoc}">${item.NamHoc}</option>`
              );
            });

            response.Ki.forEach(function (item) {
              console.log(item.Ki);
              $('#comboboxki').append(
                `<option value="${item.value}">${item.Ki}</option>`
              );
            });
            response.Dot.forEach(function (item) {
              console.log(item.Dot);
              $('#combobox-dot').append(
                `<option value="${item.value}">${item.Dot}</option>`
              );
            });
          } else {
            console.error("Không lấy được dữ liệu năm học:", response.message);
          }

        },
        error: function (error) {
          console.error("Lỗi khi lấy dữ liệu năm học:", error);
        }
      });
    });
  </script>



  <script>
    $(document).ready(function () {
      $('#MaPhongBan option[value=""]').remove();
      // Gọi AJAX để lấy dữ liệu JSON từ API
      $.ajax({
        url: '/getPhongBan', // Đường dẫn tới API getPhongBan
        method: 'GET',
        success: function (response) {
          // Kiểm tra nếu response thành công
          const MaPhongBan = response.MaPhongBan;
          if (response.success) {
            $('#MaPhongBan').prepend('<option value="ALL">Tất cả khoa</option>');
            // Lặp qua từng mục trong mảng MaPhongBan
            response.MaPhongBan.forEach(function (item) {
              // Nếu item.MaPhongBan bằng boMon.MaPhongBan, hiển thị trước
              console.log(item);
              $('#MaPhongBan').append(
                `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
              );
            }
            );

            // Nếu không có phòng ban nào tương ứng, bạn có thể thêm tùy chọn mặc định ở đây
            if (!$('#MaPhongBan option:selected').length) {
              $('#MaPhongBan').prepend('<option value="">Chọn Phòng Ban</option>');
            }
          } else {
            console.error("Không lấy được dữ liệu phongBan:", response.message);
          }
        },
        error: function (error) {
          console.error("Lỗi khi lấy dữ liệu phongBan:", error);
        }
      });
    });
  </script>

<script>
  // Chuyển đổi dữ liệu phòng ban thành JSON và lưu vào Local Storage
const gvmList = <%- JSON.stringify(gvmoiList) %>;
localStorage.setItem("gvmList", JSON.stringify(gvmList));
console.log("Dữ liệu phòng ban đã được lưu vào Local Storage:", gvmList);

  // Hàm gợi ý bộ môn ở ô nhập 
  function showSuggestionsGvm(input) {
    const value = input.value.toLowerCase(); // Lấy giá trị nhập vào và chuyển thành chữ thường
    hideSuggestionsGvm(); // Ẩn gợi ý cũ trước khi hiển thị gợi ý mới

    // Tạo thẻ div chứa gợi ý
    const suggestionsContainer = document.createElement('div');
    suggestionsContainer.className = 'suggestions'; // Đặt class cho khung gợi ý

    // Đặt vị trí cho suggestionsContainer
    const { bottom, left, width } = input.getBoundingClientRect(); // Lấy vị trí của input
    suggestionsContainer.style.position = 'absolute'; // Để đè lên bảng
    suggestionsContainer.style.top = `${bottom + window.scrollY}px`; // Đặt vị trí ngay dưới input
    suggestionsContainer.style.left = `${left + window.scrollX}px`; // Căn trái với input
    suggestionsContainer.style.width = `${width}px`; // Chiều rộng bằng với input
    suggestionsContainer.style.zIndex = '1000'; // Đảm bảo luôn hiển thị trên các thành phần khác
    suggestionsContainer.style.maxHeight = '200px'; // Giới hạn chiều cao để không quá lớn
    suggestionsContainer.style.overflowY = 'auto';  // Cho phép cuộn dọc nếu quá nhiều gợi ý

    // Thêm suggestionsContainer vào DOM
    document.body.appendChild(suggestionsContainer); // Đặt suggestionsContainer vào body thay vì cha của input

    let suggestions = []; // Khởi tạo mảng gợi ý

    // Lấy dữ liệu từ localStorage
    const boMon = JSON.parse(localStorage.getItem("gvmList")) || []; // Giảng viên mời
    console.log(gvmList)

    suggestions = gvmList.map(item => `${item.HoTen} - ${item.MaPhongBan}`);


    // Nếu người dùng nhập dữ liệu, lọc kết quả theo tên giảng viên
    if (value) {
      suggestions = suggestions.filter(name => name.toLowerCase().includes(value));
    }

    // Nếu không có gợi ý, ẩn container
    if (suggestions.length === 0) {
      suggestionsContainer.remove();
      return; // Kết thúc hàm nếu không có gợi ý
    }

    // Tạo gợi ý dưới dạng danh sách (list)
    suggestions.forEach(name => {
      const suggestionItem = document.createElement('div'); // Tạo phần tử cho từng gợi ý
      suggestionItem.className = 'suggestion-item'; // Đặt class để tùy chỉnh giao diện
      suggestionItem.textContent = name; // Hiển thị tên giảng viên kèm theo khoa

      // Thêm sự kiện click để điền tên vào ô input
      // Thêm sự kiện click để điền tên vào ô input
      suggestionItem.onclick = function () {
        // Giả sử 'name' là giá trị gợi ý bạn nhận được từ suggestionItem
        const name = suggestionItem.innerText; // Hoặc có thể là suggestionItem.textContent

        // Tìm vị trí của dấu "-" trong chuỗi
        const dashIndex = name.indexOf("-");

        // Nếu không có dấu "-", sử dụng tên gợi ý gốc
        let processedName = name;

        if (dashIndex !== -1) {
          // Lấy phần sau dấu "-" và loại bỏ khoảng trắng
          //processedName = name.slice(dashIndex + 1).trim().replace(/\s+/g, '');
          processedName = name.slice(0, dashIndex).trim();

        }

        // Điền tên gợi ý đã xử lý vào ô input
        input.value = processedName;
        // filterBoMon();
        if (input.id == 'search-teacher') {
          filterKhoa();
        }
        hideSuggestionsGvm(); // Ẩn gợi ý sau khi chọn
      };


      suggestionsContainer.appendChild(suggestionItem); // Thêm mục vào danh sách gợi ý
    });

    // Ẩn gợi ý khi input không còn focus
    input.onblur = function () {
      setTimeout(() => {
        hideSuggestionsGvm();
      }, 100); // Thời gian chờ để nhận diện click
    };
  }

  // Hàm ẩn gợi ý
  function hideSuggestionsGvm() {
    const existingSuggestions = document.querySelectorAll('.suggestions');
    existingSuggestions.forEach(suggestion => suggestion.remove());
  }

  // calculateTotals();


</script>


  </script>
  <script>
    document.getElementById("infome").addEventListener("click", function (event) {
      event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
      const id_User = localStorage.getItem("id_User"); // Lấy id_User từ localStorage\
      if (id_User) {
        // Chuyển hướng đến trang infome và truyền id_User trong URL
        window.location.href = `/infome/${id_User}`;
      } else {
        alert("Không tìm thấy id_User trong localStorage.");
      }
    });
  </script>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const role = localStorage.getItem("userRole");

      // Ẩn button ngay khi trang được tải
      const actionButton = document.getElementById('changeMessage');
      //Ẩn site thêm thông báo
      if (role === "Duyệt") {
        actionButton.style.display = '';
      } else {
        actionButton.style.display = 'none';
      }
    });
  </script>
  <script>
    document.getElementById("changeMessage").addEventListener("click", function (event) {
      event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
      const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

        if (MaPhongBan) {
            // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
            window.location.href = `/changeMessage/${MaPhongBan}`;
        } else {
            alert("Không tìm thấy MaPhongBan trong localStorage.");
        }
      });
    </script>



  </body>
          
</html>