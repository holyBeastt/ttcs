<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <style>
      .card-item {
        width: 30%;
      }
      .notification {
        max-width: 500px;
        border-width: 1px;
        border-color: rgba(219, 234, 254, 1);
        border-radius: 1rem;
        background-color: rgba(255, 255, 255, 1);
        padding: 1rem;
        display: none;
        /* Ẩn form ban đầu */
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        border-radius: 10px;
        /* Góc tròn */
        padding: 20px;
        background-color: white;
        z-index: 2000;
        width: 500px;
        box-shadow: 0px 6px 16px rgba(0, 0, 0, 0.2);
        /* Tăng bóng đổ */
        font-family: Arial, sans-serif;
      }
      .header {
        display: flex;
        align-items: center;
        grid-gap: 1rem;
        gap: 1rem;
      }

      .icon {
        flex-shrink: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 9999px;
        background-color: rgba(96, 165, 250, 1);
        padding: 0.5rem;
        color: rgba(255, 255, 255, 1);
      }

      .icon svg {
        height: 1rem;
        width: 1rem;
      }

      .alert {
        font-weight: 600;
        color: rgba(107, 114, 128, 1);
      }

      .message {
        margin-top: 1rem;
        color: rgba(107, 114, 128, 1);
      }

      .actions {
        margin-top: 1.5rem;
      }

      .actions button {
        text-decoration: none;
      }

      .mark-as-read,
      .read {
        display: inline-block;
        border-radius: 0.5rem;
        width: 100%;
        padding: 0.75rem 1.25rem;
        text-align: center;
        font-size: 0.875rem;
        line-height: 1.25rem;
        font-weight: 600;
      }

      .read {
        background-color: rgba(59, 130, 246, 1);
        color: rgba(255, 255, 255, 1);
        border: none;
      }

      .mark-as-read {
        margin-top: 0.5rem;
        background-color: rgba(249, 250, 251, 1);
        color: rgba(107, 114, 128, 1);
        transition: all 0.15s ease;
      }

      .mark-as-read:hover {
        background-color: rgb(230, 231, 233);
      }
    </style>
        <style>
          /* Định dạng cho bảng */
          .table {
            width: 70%;
            border-collapse: separate;
            border-spacing: 0;
            margin-top: 20px;
            font-size: 0.9em;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
            border-radius: 8px;
            overflow: hidden;
            justify-self: center;
          }
    
          .table th,
          .table td {
            padding: 10px;
            text-align: left;
            border: 1px solid #dee2e6;
            border-right: 2px solid #dee2e6;
            border-left: 2px solid #dee2e6;
          }
    
          .table th {
            background-color: blue;
            color: white;
            font-weight: bold;
            border-right: 2px solid #fff;
          }
    
          .table th:last-child {
            border-right: 2px solid #dee2e6;
          }
    
          .table tbody tr {
            border-bottom: 1px solid #dddddd;
            transition: all 0.3s ease;
          }
    
          .table tbody tr:nth-child(even) {
            background-color: #f3f3f3;
          }
    
          .table tbody tr:last-of-type {
            border-bottom: 2px solid #009879;
          }
    
          .table tbody tr:hover {
            background-color: #f5f5f5;
            transform: scale(1.01);
          }
    
          /* Định dạng cho biểu đồ */
          .chart {
            width: 80%;
            margin-left: 10%;
          }
    
          /* Định dạng cho tiêu đề */
          h3 {
            color: #009879;
            text-align: center;
            margin: 30px 0;
            font-weight: 600;
            position: relative;
            padding-bottom: 10px;
          }
    
          h3:after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 3px;
            background: #009879;
          }
    
          /* Định dạng cho tổng số tiết */
          .total-label {
            background: #f8f9fa;
            padding: 15px 20px;
            border-radius: 8px;
            margin: 20px auto;
            width: fit-content;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            font-weight: bold;
            color: #009879;
          }
    
          .value {
            color: #dc3545;
            font-size: 1.1em;
            margin-left: 5px;
          }
    
          /* Container cho các controls */
          .controls-container {
            display: flex;
            justify-content: start;
            align-items: center;
            gap: 10px;
            margin: 20px;
            flex-wrap: wrap;
          }
    
          /* Responsive design */
          @media (max-width: 768px) {
            #thongkethonghopCanvas {
              width: 70%;
              height: 300px;
            }
    
            .table {
              font-size: 0.8em;
            }
          }
    
          /* Thêm container cho 2 biểu đồ tất cả khoa */
          .charts-container {
            display: flex;
            justify-content: flex-start;
            align-items: flex-start;
            gap: 20px;
            margin: 5px 0;
            flex-wrap: wrap; /* Đảm bảo tương thích với màn hình nhỏ */
          }
    
          .chart-wrapper {
            flex: 1; /* Chia đều chiều rộng */
            min-width: 300px; /* Đảm bảo kích thước tối thiểu */
            max-width: 33%; /* Đảm bảo không vượt quá 33% chiều rộng */
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 15px;
          }
        </style>
  </head>

  <body>
    <%- include('header') %>
    
    <div class="d-flex justify-content-start align-items-end mb-3">

      <!-- Combo box kì -->
      <select class="form-select mx-1 selectop" id="comboboxki">
        <option value="ALL">Cả năm</option>
      </select>

      <!-- Combo box Năm -->
      <select
        class="form-select mx-1 selectop"
        style="width: 200px"
        id="NamHoc"
      >
        <option value="ALL">Tất cả năm</option>
      </select>
    </div>
    <!-- Phần nội dung -->

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <div class="chart">
      <h3>Thống kê tổng hợp</h3>
      <canvas id="chart"></canvas>
    </div>
    <div class="charts-container">
      <!-- Biểu đồ tròn 1: Số tiết mời giảng -->
      <div class="chart-wrapper">
        <h3>Phần trăm số tiết mời giảng</h3>
        <canvas id="moiGiangPieChart"></canvas>
      </div>

      <!-- Biểu đồ tròn 2: Số tiết vượt giờ -->
      <div class="chart-wrapper">
        <h3>Phần trăm số tiết vượt giờ</h3>
        <canvas id="vuotGioPieChart"></canvas>
      </div>

      <!-- Biểu đồ tròn 3: Tổng số tiết -->
      <div class="chart-wrapper">
        <h3>Tổng số tiết (Mời giảng + Vượt giờ)</h3>
        <canvas id="tongTietPieChart"></canvas>
      </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      async function fetchData1() {
        try {
          const ki = document.getElementById("comboboxki").value;
          const nam = document.getElementById("NamHoc").value;

          const response = await fetch(
            `/api/thongketonghop-data?kihoc=${ki}&namhoc=${nam}`
          );
          const data = await response.json();
          console.log("Dữ liệu nhận được:", data);

          const labels = data.map((item) => item.Khoa);
          const moiGiangData = data.map((item) => item.TongSoTietMoiGiang);
          const vuotGioData = data.map((item) => item.TongSoTiet);

          // Xóa dữ liệu cũ
          if (!data || data.length === 0) {
            console.log("Không có dữ liệu");
            document.getElementById("chart").style.display = "none";
            return;
          }

          // Destroy existing chart if it exists
          if (window.myChart) {
            window.myChart.destroy();
          }

          // Tạo biểu đồ
          const ctx = document.getElementById("chart").getContext("2d");
          window.myChart = new Chart(ctx, {
            type: "bar",
            data: {
              labels: labels,
              datasets: [
                {
                  label: "Tổng số tiết mời giảng",
                  data: moiGiangData,
                  backgroundColor: "red",
                  borderColor: "rgba(75, 192, 192, 1)",
                  borderWidth: 1,
                },
                {
                  label: "Tổng số tiết tính vượt giờ",
                  data: vuotGioData,
                  backgroundColor: "blue",
                  borderColor: "rgba(255, 99, 132, 1)",
                  borderWidth: 1,
                },
              ],
            },
            options: {
              responsive: true,
              plugins: {
                legend: {
                  position: "top",
                },
              },
              scales: {
                x: {
                  stacked: true, // Chồng cột trên trục X
                  title: {
                    display: true,
                    text: "Khoa",
                  },
                },
                y: {
                  stacked: true, // Chồng cột trên trục Y
                  title: {
                    display: true,
                    text: "Số tiết",
                  },
                  beginAtZero: true,
                },
              },
            },
          });
        } catch (error) {
          console.error("Lỗi khi tải dữ liệu:", error);
        }
      }

      fetchData1();
    </script>

    <h3 style="margin-top: 30px; text-align: center">
      Chi tiết số tiết giảng dạy
    </h3>
    <table
      class="table table-bordered my-2"
      border="1"
      id="thongketonghopTable"
    >
      <thead>
        <tr>
          <th>Khoa</th>
          <th>Số tiết mời giảng</th>
          <th>Số tiết tính vượt giờ</th>
          <th>
            <span title="Mời giảng + Vượt giờ">Tổng số</span>
          </th>
        </tr>
      </thead>
      <tbody id="detailTable">
        <!-- Dữ liệu sẽ được thêm vào đây -->
      </tbody>
    </table>

    <script>
      async function fetchThongKeMGData() {
        try {
          const ki = document.getElementById("comboboxki").value;
          const nam = document.getElementById("NamHoc").value;

          const response = await fetch(
            `/api/thongketonghop-data?kihoc=${ki}&namhoc=${nam}`
          );
          const data = await response.json();
          console.log("Dữ liệu nhận được:", data);
          // Cập nhật bảng
          const tableBody = document.querySelector("table tbody");
          tableBody.innerHTML = ""; // Xóa nội dung cũ của bảng
          if (!data || data.length === 0) {
            console.log("Không có dữ liệu");
            const row = tableBody.insertRow();
            const cell = row.insertCell(0);
            cell.colSpan = 4;
            cell.style.textAlign = "center";
            cell.textContent = "Không có dữ liệu cho khoảng thời gian này";
            return;
          }

          data.forEach((item) => {
            const row = document.createElement("tr");
            row.innerHTML = `
                <td>${item.Khoa}</td>
                <td>${item.TongSoTietMoiGiang}</td>
                <td>${item.TongSoTiet}</td>
                <td>${item.Tongso}</td>
            `;
            tableBody.appendChild(row);
          });
        } catch (error) {
          console.error("Lỗi khi tải dữ liệu:", error);
        }
      }

      fetchThongKeMGData();
    </script>

    <script>
      async function fetchData2() {
        try {
          const ki = document.getElementById("comboboxki").value;
          const nam = document.getElementById("NamHoc").value;

          const response = await fetch(
            `/api/thongketonghop-data?kihoc=${ki}&namhoc=${nam}`
          );
          const data = await response.json();
          console.log("Dữ liệu nhận được:", data);

          if (!data || data.length === 0) {
            console.log("Không có dữ liệu");
            document.getElementById("moiGiangPieChart").style.display = "none";
            document.getElementById("vuotGioPieChart").style.display = "none";
            document.getElementById("tongTietPieChart").style.display = "none";
            return;
          }

          const labels = data.map((item) => item.Khoa);
          const moiGiangData = data.map((item) =>
            parseFloat(item.TongSoTietMoiGiang)
          );
          const vuotGioData = data.map((item) => parseFloat(item.TongSoTiet));
          const tongSoTietData = data.map((item) => parseFloat(item.Tongso));

          // Định nghĩa màu sắc cố định cho các khoa
          const colors = [
            "#FF6384", // Màu đỏ
            "#36A2EB", // Màu xanh dương
            "#FFCE56", // Màu vàng
            "#4BC0C0", // Màu xanh ngọc
            "#9966FF", // Màu tím
            "#FF9F40", // Màu cam
            "#C9CBCF", // Màu xám
          ];
          // Destroy existing pie charts if they exist
          if (window.moiGiangPieChart instanceof Chart) {
            window.moiGiangPieChart.destroy();
          }
          if (window.vuotGioPieChart instanceof Chart) {
            window.vuotGioPieChart.destroy();
          }
          if (window.tongTietPieChart instanceof Chart) {
            window.tongTietPieChart.destroy();
          }
          // Biểu đồ tròn: Số tiết mời giảng
          const moiGiangCtx = document
            .getElementById("moiGiangPieChart")
            .getContext("2d");
          window.moiGiangPieChart = new Chart(moiGiangCtx, {
            type: "pie",
            data: {
              labels: labels,
              datasets: [
                {
                  label: "Số tiết mời giảng",
                  data: moiGiangData,
                  backgroundColor: colors,
                },
              ],
            },
            options: {
              responsive: true,
              plugins: {
                legend: { position: "top" },
              },
            },
          });

          // Biểu đồ tròn: Số tiết vượt giờ
          const vuotGioCtx = document
            .getElementById("vuotGioPieChart")
            .getContext("2d");
          window.vuotGioPieChart = new Chart(vuotGioCtx, {
            type: "pie",
            data: {
              labels: labels,
              datasets: [
                {
                  label: "Số tiết tính vượt giờ",
                  data: vuotGioData,
                  backgroundColor: colors,
                },
              ],
            },
            options: {
              responsive: true,
              plugins: {
                legend: { position: "top" },
              },
            },
          });

          // Biểu đồ tròn: Tổng số tiết
          const tongTietCtx = document
            .getElementById("tongTietPieChart")
            .getContext("2d");
          window.tongTietPieChart = new Chart(tongTietCtx, {
            type: "pie",
            data: {
              labels: labels,
              datasets: [
                {
                  label: "Tổng số tiết",
                  data: tongSoTietData,
                  backgroundColor: colors,
                },
              ],
            },
            options: {
              responsive: true,
              plugins: {
                legend: { position: "top" },
              },
            },
          });
        } catch (error) {
          console.error("Lỗi khi tải dữ liệu:", error);
        }
      }

      fetchData2();
    </script>

    <script>
      $(document).ready(function () {
          // Khởi tạo các combobox
          function initializeComboboxes() {
              // Lấy dữ liệu cho combobox Năm và Kỳ
              $.ajax({
                  url: '/getNamHocTH',
                  method: 'GET',
                  success: function (response) {
                      if (response.success) {
                          // Populate combobox NamHoc
                          $('#NamHoc').empty();
                          response.NamHoc.forEach(function (item) {
                              $('#NamHoc').append(
                                  `<option value="${item.NamHoc}">${
                                      item.NamHoc === "ALL" ? "Tất cả năm" : item.NamHoc
                                  }</option>`
                              );
                          });

                          // Đặt giá trị mặc định là năm lớn nhất
                          if (response.MaxNamHoc) {
                              $('#NamHoc').val(response.MaxNamHoc).trigger('change');
                          }

                          // Populate combobox Ki
                          $('#comboboxki').empty();
                          response.Ki.forEach(function (item) {
                              $('#comboboxki').append(
                                  `<option value="${item.Ki}">${
                                      item.Ki === "ALL" ? "Cả năm" : item.Ki
                                  }</option>`
                              );
                          });
                      }
                  },
                  error: function (xhr, status, error) {
                      console.error("Lỗi khi tải dữ liệu:", error);
                  }
              });
          }

          // Gọi hàm khởi tạo khi trang được tải
          initializeComboboxes();

          // Lắng nghe sự kiện thay đổi trên các combobox
          $('#comboboxki, #NamHoc').on('change', function () {
              fetchThongKeData(); // Gọi hàm để lấy dữ liệu mới
          });

          async function fetchThongKeData() {
              const ki = $('#comboboxki').val();
              const nam = $('#NamHoc').val();

              let url = '/api/thongketonghop-data';
              const params = new URLSearchParams();

              // Chỉ thêm tham số nếu không phải là "ALL"
              if (ki && ki !== 'ALL') params.append('kihoc', ki);
              if (nam && nam !== 'ALL') params.append('namhoc', nam);

              // Nếu có tham số, thêm vào URL
              if (params.toString()) {
                  url += '?' + params.toString();
              }

              try {
                  const response = await fetch(url);
                  const data = await response.json();
                  // Cập nhật bảng và biểu đồ với dữ liệu mới
                  fetchData1();
                  fetchThongKeMGData();
                  fetchData2();
              } catch (error) {
                  console.error("Lỗi khi tải dữ liệu:", error);
              }
          }
       });

       <!-- Thêm event listeners cho các combo box -->
       document.getElementById('comboboxki').addEventListener('change', () => {
         fetchData1();
         fetchThongKeMGData();
         fetchData2();
        });

        document.getElementById('NamHoc').addEventListener('change', () => {
          fetchData1();
          fetchThongKeMGData();
          fetchData2();
        });
    </script>
   
    <!-- Tab thông báo -->
    <div id="notifications-container"></div>
   
   

   

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        loadMessage();
      });
    </script>
    <script>
      async function loadMessage() {
        try {
          const response = await fetch(`/getMessage`, {
            method: "GET", // Gửi yêu cầu GET
          });
          if (!response.ok) {
            throw new Error(
              `Error: ${response.status} - ${response.statusText}`
            );
          }
          const data = await response.json(); // Lấy dữ liệu từ server
          console.log(data);
          if (data.success) {
            if (data.Message && data.Message.length > 0) {
              console.log("Dữ liệu thông báo:", data);
              showNotifications(data);
            }
          } else {
            alert("Không tìm thấy dữ liệu!");
          }
        } catch (error) {
          console.error("Có lỗi xảy ra khi lấy dữ liệu:", error);
        }
      }
    </script>
    <script>
      function showNotifications(messages) {
        const container = document.getElementById("notifications-container");

        // Xóa nội dung cũ (nếu có)
        container.innerHTML = "";

        // Render từng thông báo
        let i = 0;
        messages.Message.forEach((message, index) => {
          if (message.HetHan === 1) {
            return; // Bỏ qua thông báo nếu đã hết hạn hoặc hoàn thành
          }

          const notification = document.createElement("div");
          notification.className = "notification";
          notification.style.display = "block";


          // Nội dung thông báo
          notification.innerHTML = `
      <div class="header">
        <span class="icon">
          <svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
            <path clip-rule="evenodd" d="M18 3a1 1 0 00-1.447-.894L8.763 6H5a3 3 0 000 6h.28l1.771 5.316A1 1 0 008 18h1a1 1 0 001-1v-4.382l6.553 3.276A1 1 0 0018 15V3z" fill-rule="evenodd"></path>
          </svg>
        </span>
        <p class="alert" style="margin-top: 16px; font-size: 20px;">Thông báo mới !</p>
      </div>
      <p class="message">
        <strong style="font-size: 24px; text-transform: uppercase;">${
          message.Title
        }</strong> <br>
        <strong>Khoa (Phòng Ban): ${message.MaPhongBan} thông báo </strong> <br>
        <strong>Lời nhắn:</strong> ${message.LoiNhan}<br>
        <strong>Hạn chót:</strong><span style = "color:red"> ${new Date(
          message.Deadline
        ).toLocaleString("vi-VN", {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric",
          hour: "2-digit",
          minute: "2-digit",
        })}</span>
      </p>
      <div class="actions">
        <button class="read" onclick="closeNotification(${i})">Đã xem</button>
      </div>
    `;

          // Thêm thông báo vào container
          container.appendChild(notification);
          i++;
        });

        // Hiển thị container
        container.style.display = "block";
      }

      // Hàm đóng thông báo cụ thể
      function closeNotification(index) {
        const container = document.getElementById("notifications-container");

        if (!container) {
          console.error("Không tìm thấy container thông báo!");
          return;
        }

        const notifications = container.querySelectorAll(".notification");

        // Kiểm tra xem thông báo tại index có tồn tại
        if (!notifications[index]) {
          console.error(`Không tìm thấy thông báo tại index ${index}`);
          return; // Nếu không còn thông báo nào để đóng, dừng lại
        }

        // Ẩn thông báo tại vị trí index
        notifications[index].style.display = "none";

        // Kiểm tra nếu tất cả thông báo đã bị ẩn
        const allHidden = Array.from(notifications).every(
          (notif) => notif.style.display === "none"
        );

        if (allHidden) {
          container.style.display = "none"; // Ẩn container nếu không còn thông báo
          console.log("Tất cả thông báo đã được đóng.");
        }
      }
    </script>
    <!-- 
  <script>
    // handle event click
    const Import = (href) => {
      window.location.href = href;
    };

    const ThongTinGD = (href) => {
      window.location.href = href;
    };
  </script> -->
    <!-- 8. Chữ mờ và nút quay về đầu trang -->
    <div class="container-fluid m-4">
      <footer class="text-center">
        <p class="text-muted">
          © 2024 Phòng Đào Tạo. Tất cả các quyền được bảo lưu.
        </p>
        <button onclick="topFunction()" id="backToTopBtn" class="btn">
          Quay về đầu trang
        </button>
      </footer>
    </div>

    <script>
      // Nút quay về đầu trang
      var backToTopBtn = document.getElementById("backToTopBtn");

      // Khi nhấn vào nút, cuộn về đầu trang
      function topFunction() {
        document.body.scrollTop = 0; // Cho Safari
        document.documentElement.scrollTop = 0; // Cho Chrome, Firefox, IE và Opera
      }
    </script>

    <!-- Phần phân quyền -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Thêm sự kiện click cho phần tử có id="ThongTinGD"
        const ThongTinGD = document.getElementById("ThongTinGD");

        ThongTinGD.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa"); // Lấy role từ localStorage

          if (isKhoa == 0) {
            // Nếu là đào tạo hoặc tài chính
            window.location.href = "/info2";
          } else {
            window.location.href = "/info";
          }
        });

        // Thêm sự kiện click cho phần tử có id="Home"

        const Home = document.getElementById("Home");

        Home.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa");

          if (isKhoa == 0) {
            // Nếu là đào tạo hoặc tài chính
            window.location.href = "/maindt";
          } else {
            window.location.href = "/mainkhoa";
          }
        });
      });
    </script>

    <script>
      document
        .getElementById("changePasswordLink")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage

          if (tenDangNhap) {
            // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
            window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(
              tenDangNhap
            )}`;
          } else {
            alert("Không tìm thấy TenDangNhap trong localStorage.");
          }
        });
    </script>
    <script>
      document
        .getElementById("infome")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const id_User = localStorage.getItem("id_User"); // Lấy id_User từ localStorage\
          if (id_User) {
            // Chuyển hướng đến trang infome và truyền id_User trong URL
            window.location.href = `/infome/${id_User}`;
          } else {
            alert("Không tìm thấy id_User trong localStorage.");
          }
        });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const role = localStorage.getItem("userRole");

        // Ẩn button ngay khi trang được tải
        const actionButton = document.getElementById("changeMessage");
        //Ẩn site thêm thông báo
        if (role === "Duyệt") {
          actionButton.style.display = "";
        } else {
          actionButton.style.display = "none";
        }
      });
    </script>
    <script>
      document
        .getElementById("changeMessage")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

          if (MaPhongBan) {
            // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
            window.location.href = `/changeMessage/${MaPhongBan}`;
          } else {
            alert("Không tìm thấy MaPhongBan trong localStorage.");
          }
        });
    </script>
  </body>
</html>
``` 
