<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <style>
      /* CSS cho bảng */
      .table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
      }

      .table th,
      .table td {
        padding: 10px;
        text-align: left;
        border: 1px solid #dee2e6;
        white-space: normal;
        word-wrap: break-word;
      }

      .table th {
        background-color: #007bff;
        color: white;
        font-weight: bold;
        position: sticky;
        top: 0;
        z-index: 10;
      }

      .table tbody tr:nth-child(even) {
        background-color: #f8f9fa;
      }

      .table tbody tr:hover {
        background-color: #e2e6ea;
      }

      .table td {
        vertical-align: middle;
      }

      .bg-custom {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
      }

      .spinner-border {
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
      }

      .header-actions {
        display: flex;
        /* Flexbox container */
        flex-wrap: wrap;
        /* Wrap items if they don't fit in one line */
        align-items: center;
        /* Vertically center items */
        gap: 10px;
        /* Space between the elements */
        justify-content: space-between;
      }

      .right {
        margin-top: 20px;
      }

      .btn {
        height: 45px;
        margin-left: 5px;
      }

      /* cảnh báo khi thiếu dữ liệu */
      .warning-row {
        background-color: #ffe6e6;
        /* Màu nền cảnh báo nhạt */
        color: #ff0000;
        /* Màu chữ cảnh báo */
      }

      /* nút xuất file */
      /* Định dạng cho dropdown */
      #file-format-menu {
        top: 800px;
        background-color: white;
        border: 1px solid #ddd;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        padding: 10px;
        transform: translateX(255%);
      }

      .dropdown-item {
        padding: 8px 12px;
        cursor: pointer;
      }

      .dropdown-item:hover {
        background-color: #f8f9fa;
      }
    </style>
    <style>
      .input-full {
        width: 100%;
        margin-top: 5px;
        padding: 5px;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      .row {
        display: flex;
        gap: 10px;
        margin-bottom: 10px;
      }

      .column-80 {
        flex: 4; /* 80% */
        display: flex;
        flex-direction: column;
      }

      .column-20 {
        flex: 1; /* 20% */
        display: flex;
        flex-direction: column;
      }

      .column-2 {
        flex: 1;
        display: flex;
        flex-direction: column;
      }

      .btn {
        padding: 6px 12px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      .save {
        background-color: #28a745;
        color: white;
      }

      .cancel {
        background-color: #dc3545;
        color: white;
      }

      .btn:hover {
        opacity: 0.8;
      }

      .custom-header {
        display: flex;
        justify-content: center; /* Căn giữa nội dung */
        align-items: center; /* Căn giữa theo chiều dọc */
        text-align: center !important;
      }
    </style>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  </head>

  <body>
    <!-- Phần header -->
    <%- include('header') %>

    <!-- Phần nội dung -->

    <div class="container-fluid my-4" style="padding-left: 0px">
      <div class="flex-grow-1">
        <div class="header-actions">
          <div class="left">
            <button
              class="btn"
              id="them-vao-qc-du-kien"
              style="margin-bottom: 0px; display: none"
            >
              Thêm vào quy chuẩn dự kiến
            </button>
          </div>

          <div class="right" style="margin-top: 0px">
            <div class="loc d-flex align-items-center">
              <select class="selectop" id="combobox-dot">
                <option value="">Đợt</option>
              </select>

              <!-- Combo box kì -->
              <select class="selectop" id="comboboxki">
                <option value="">Kì</option>
              </select>

              <!-- Combo box Năm -->
              <select class="selectop" id="NamHoc">
                <option value="">Chọn năm học</option>
              </select>
              <select class="selectop" id="departmentFilter">
                <option value="">Chọn khoa</option>
              </select>
              <button
                onclick="getDataTable()"
                class="btn text-nowrap"
                id="render"
                style="margin-top: 17px"
              >
                Hiển thị
              </button>
              <button
                class="btn text-nowrap"
                id="xoa-TKB"
                style="margin-top: 17px"
              >
                Xóa
              </button>
            </div>
          </div>
        </div>

        <div>
          <div
            id="table-container"
            class="ag-theme-alpine"
            style="height: 500px; width: 100%"
          >
            <table
              style="width: 100%; border-collapse: collapse"
              class="table table-bordered"
            >
              <thead>
                <tr id="table-header"></tr>
              </thead>
              <tbody id="data-table-body"></tbody>
            </table>
          </div>
          <div style="margin-top: 20px">
            <button
              class="btn text-nowrap"
              id="add-row-btn"
              onclick="addNewRow()"
            >
              Thêm dòng mới
            </button>
            <button class="btn text-nowrap" id="export-file-btn">
              Xuất file excel quy chuẩn
            </button>
          </div>
          <div
            id="overlay"
            style="
              display: none;
              position: fixed;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: rgba(0, 0, 0, 0.5);
              z-index: 999;
            "
          ></div>

          <!-- Menu dropdown ẩn và hiện ra khi click vào nút -->
          <div
            id="file-format-menu"
            class="dropdown-menu"
            aria-labelledby="export-file-btn"
            style="display: none; position: absolute"
          >
            <!-- <button class="dropdown-item" onclick="exportToPDF()">PDF</button> -->
            <button class="dropdown-item" onclick="exportSingleWorksheet()">
              1 worksheet
            </button>
            <button class="dropdown-item" onclick="exportMultipleWorksheet()">
              Nhiều worksheet
            </button>
          </div>
        </div>

        <div id="action-modal" style="display: none">
          <div
            style="
              position: fixed;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: rgba(0, 0, 0, 0.6);
              display: flex;
              justify-content: center;
              align-items: center;
              z-index: 10000000000;
            "
          >
            <div
              style="
                background: #ffffff;
                padding: 25px;
                border-radius: 12px;
                max-width: 450px;
                width: 90%;
                text-align: center;
                box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.2);
              "
            >
              <p
                id="modal-message"
                style="font-size: 16px; color: #333; margin-bottom: 20px"
              >
                Đây là nội dung của modal.
              </p>
              <button
                id="btn-delete"
                style="
                  background-color: #e74c3c;
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  margin: 5px;
                  border-radius: 6px;
                  cursor: pointer;
                  font-size: 14px;
                  transition: background-color 0.3s;
                "
                onmouseover="this.style.backgroundColor='#c0392b'"
                onmouseout="this.style.backgroundColor='#e74c3c'"
              >
                Xóa
              </button>
              <button
                id="btn-append"
                style="
                  background-color: #3498db;
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  margin: 5px;
                  border-radius: 6px;
                  cursor: pointer;
                  font-size: 14px;
                  transition: background-color 0.3s;
                "
                onmouseover="this.style.backgroundColor='#2980b9'"
                onmouseout="this.style.backgroundColor='#3498db'"
              >
                Chèn
              </button>
              <button
                id="btn-cancel"
                style="
                  background-color: #95a5a6;
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  margin: 5px;
                  border-radius: 6px;
                  cursor: pointer;
                  font-size: 14px;
                  transition: background-color 0.3s;
                "
                onmouseover="this.style.backgroundColor='#7f8c8d'"
                onmouseout="this.style.backgroundColor='#95a5a6'"
              >
                Hủy
              </button>
            </div>
          </div>
        </div>

        <div
          id="no-data-message"
          class="text-center my-3"
          style="display: none"
        >
          Không có dữ liệu để hiển thị.
        </div>
      </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Link script Sweet alert 2 -->
    <!-- SweetAlert2 CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css"
      rel="stylesheet"
    />
    <!-- SweetAlert2 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>

    <!-- link thư viện excel  -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>

    <!-- AG Grid Styles -->
    <link
      rel="stylesheet"
      href="https://unpkg.com/ag-grid-community/styles/ag-grid.css"
    />
    <link
      rel="stylesheet"
      href="https://unpkg.com/ag-grid-community/styles/ag-theme-alpine.css"
    />

    <!-- AG Grid Script -->
    <!-- <script src="https://unpkg.com/ag-grid-community@29.3.2/dist/ag-grid-community.min.js"></script> -->

    <script src="/js/TKB/ag-grid-community.min.js"></script>

    <!-- Toastify  -->
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css"
    />


    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const isKhoa = localStorage.getItem("isKhoa");
        const role = localStorage.getItem("userRole");

        // hideButton2 ẩn các chức năng thêm sửa xóa
        hideButtonTKB(role);
      });

      function hideButtonTKB(role) {
        if (role != "<%= APP_ROLES.troLy_phong %>" && role != "<%= APP_ROLES.lanhDao_phong %>") {
          const deleteTKB = document.getElementById("xoa-TKB");
          const themBtn = document.getElementById("add-row-btn");
          const addToQCDK = document.getElementById("them-vao-qc-du-kien");
          //const xuatFileBtn = document.getElementById("export-file-btn");

          if (deleteTKB) {
            deleteTKB.style.display = "none"; // Ẩn ngay lập tức
            setTimeout(() => deleteTKB.remove(), 100); // Xóa sau 100ms để tránh lag
          }
          if (themBtn) themBtn.remove();
          //xuatFileBtn.style.display = "none";

          if (addToQCDK) addToQCDK.remove();
        } else {
          const addToQCDK = document.getElementById("them-vao-qc-du-kien");
          if (addToQCDK) addToQCDK.style.display = "block";
        }
      }
    </script>

    <!-- render bảng -->
    <script>
      // Biến chung để lưu dữ liệu render
      var renderData = [];
      // Mảng khoa ( để validate bảng)
      var khoaArray = [];

      async function getDataTable() {
        let Dot = document.getElementById("combobox-dot").value;
        let Ki = document.getElementById("comboboxki").value;
        let Nam = document.getElementById("NamHoc").value;
        let Khoa = document.getElementById("departmentFilter").value;

        const body = {
          Khoa: Khoa,
          Dot: Dot,
          Ki: Ki,
          Nam: Nam,
        };

        try {
          const response = await fetch("/api/v1/tkb/data-tkb-to-render", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(body),
          });

          if (!response.ok) {
            throw new Error(
              "Network response was not ok: " + response.statusText
            );
          }

          const data = await response.json();
          renderData = data; // Lưu dữ liệu vào biến renderData

          // Gọi hàm renderTable để hiển thị dữ liệu
          renderTable();
        } catch (error) {
          console.error("Error fetching data:", error);
          alert("Có lỗi xảy ra khi gọi API: " + error.message);
        }
      }

      let gridOptions; // Khai báo biến toàn cục

      function renderTable() {
        const role = localStorage.getItem("userRole");
        const rowHeight = 50; // Chiều cao mỗi dòng

        if (renderData.length === 0) {
          document.getElementById("table-container").innerHTML =
            "<p>Không có dữ liệu</p>";
          return;
        }

        const headersMap = {
          id: { name: "ID", width: 70 },
          major: { name: "Khoa", width: 100 },
          ll_code: {
            name: "CTĐT",
            width: 0,
          },
          ll_total: { name: "LL", width: 50 },
          student_quantity: { name: "Số SV", width: 70 },
          student_bonus: { name: "HS lớp đông", width: 100 },
          bonus_time: { name: "HS T7/CN", width: 90 },
          course_id: { name: "Mã học phần", width: 100 },
          lecturer: { name: "Giảng viên theo TKB", width: 150 },
          credit_hours: { name: "Số TC", width: 80 },
          course_name: { name: "Lớp học phần", width: 250 },
          course_code: { name: "Mã học phần", width: 100 },
          start_date: { name: "Ngày bắt đầu", width: 110 },
          end_date: { name: "Ngày kết thúc", width: 110 },
          qc: { name: "QC", width: 70 },
          semester: { name: "Năm học", width: 100 },
        };

        let canEdit = false;

        if (role == "<%= APP_ROLES.troLy_phong %>" || role == "<%= APP_ROLES.lanhDao_phong %>") {
          canEdit = true;
        }

        const columnDefs = [
          {
            headerName: "STT",
            field: "stt",
            valueGetter: (params) => params.node.rowIndex + 1, // Đánh số thứ tự
            width: 70,
            editable: false,
            cellStyle: { fontWeight: "bold", textAlign: "center" },
          },
          ...Object.keys(renderData[0])
            .filter((key) => key !== "GhiChu" && key !== "description")
            .map((key) => ({
              field: key,
              headerName: headersMap[key]?.name || key,
              width: headersMap[key]?.width || 100,
              editable: canEdit && key !== "student_bonus" && key !== "id",
              hide: key === "semester" || key === "id" || key === "tt" || key === "course_id" 
              || key === 'dot' || key === 'ki_hoc' || key === 'nam_hoc', // Ẩn cột không cần thiết
              headerClass: "custom-header",
              filter: key === "course_name" ? true : false, // ✅ Chỉ bật filter cho cột course_name
              valueFormatter: (params) => {
                if (
                  params.colDef.field === "start_date" ||
                  params.colDef.field === "end_date"
                ) {
                  if (params.value) {
                    const date = new Date(params.value);
                    if (!isNaN(date)) {
                      return date.toLocaleDateString("vi-VN"); // Hiển thị đúng định dạng dd/mm/yyyy
                    }
                  }
                }
                return params.value;
              },

              valueGetter: (params) => {
                if (
                  params.colDef.field === "start_date" ||
                  params.colDef.field === "end_date"
                ) {
                  const value = params.data[params.colDef.field];
                  if (value) {
                    const date = new Date(value);
                    if (!isNaN(date)) {
                      return date.toLocaleDateString("vi-VN"); // Giữ nguyên định dạng khi click vào
                    }
                  }
                }
                return params.data[params.colDef.field];
              },
              valueSetter: (params) => {
                const field = params.colDef.field;
                const oldValue = params.data[field];
                const value = params.newValue ? params.newValue.trim() : "";

                // ✅ Xử lý riêng cho cột "start_date" và "end_date"
                if (field === "start_date" || field === "end_date") {
                  if (!value) return false; // Không cập nhật nếu giá trị rỗng

                  const parts = value.split("/");
                  if (parts.length === 3) {
                    const formattedDate = `${parts[2]}-${parts[1]}-${parts[0]}`;
                    const date = new Date(formattedDate);

                    if (!isNaN(date)) {
                      params.data[field] = value; // Lưu giá trị mới
                      return true;
                    }
                  }

                  params.data[field] = oldValue; // Giữ nguyên giá trị cũ nếu sai định dạng
                  return false;
                }

                // ✅ Xử lý các cột khác (nếu có)
                if (value !== oldValue) {
                  params.data[field] = value; // Lưu giá trị mới
                  return true;
                }

                return false; // Không cập nhật nếu không thay đổi
              },

              cellEditor: "agTextCellEditor",
              cellEditorParams: {
                useFormatter: true, // Giữ nguyên định dạng khi chỉnh sửa
              },
            })),
        ];
        // Thêm cột "Hành động" nếu role là "<%= APP_ROLES.troLy_phong %>" hoặc "<%= APP_ROLES.lanhDao_phong %>"
        if (role === "<%= APP_ROLES.troLy_phong %>" || role === "<%= APP_ROLES.lanhDao_phong %>") {
          columnDefs.push({
            headerName: "Xóa",
            field: "actions",
            editable: false,
            width: 60,
            cellRenderer: (params) => {
              const id = params.data.id; // Lấy ID từ dữ liệu
              const tt = params.data.tt; // Lấy giá trị `tt` từ dữ liệu
              const dot = params.data.dot; // Lấy giá trị `dot` từ dữ liệu
              const ki_hoc = params.data.ki_hoc; // Lấy giá trị `ki_hoc` từ dữ liệu
              const nam_hoc = params.data.nam_hoc; // Lấy giá trị `nam_hoc` từ dữ liệu
              const stt = params.node.rowIndex + 1; // Lấy STT của dòng
              return `<button onclick="deleteRow('${id}', '${tt}', '${dot}', '${ki_hoc}', '${nam_hoc}', ${stt})">Xóa</button>`;
            },
          });
        }

        // Xử lý khi ô được chỉnh sửa
        async function onCellValueChanged(event) {
          const { data, colDef, newValue } = event;
          const id = data.id;
          const tt = data.tt;
          const dot = data.dot;
          const ki_hoc = data.ki_hoc;
          const nam_hoc = data.nam_hoc;

          const field = colDef.field;

          try {
            const response = await fetch("/api/v1/tkb/update-row", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ tt, dot, ki_hoc, nam_hoc, field, value: newValue, data }),
            });

            const updatedRow = await response.json();

            if (response.ok) {
              const rowNode = gridOptions.api.getRowNode(id);
              if (rowNode) {
                rowNode.setData(updatedRow);
              } else {
                console.error(
                  "⚠️ Không tìm thấy dòng để cập nhật:",
                  updatedRow
                );
              }

              // ✅ Hiển thị thông báo thành công
              Toastify({
                text: "✅ Cập nhật thành công!",
                duration: 1000, // Hiển thị trong 3 giây
                gravity: "top", // Đưa thông báo lên trên
                position: "right", // Căn lề bên phải
                backgroundColor: "#4CAF50", // Màu xanh lá (thành công)
              }).showToast();
            } else {
              Swal.fire({
                title: "❌ Lỗi",
                html: updatedRow.message,
                icon: "error",
                confirmButtonText: "OK",
                width: "auto",
                padding: "20px",
              });
            }
          } catch (error) {
            console.error("❌ Lỗi kết nối server:", error);
          }
        }

        // Tạo bảng AG Grid
        gridOptions = {
          getRowId: (params) => params.data.id, // Xác định dòng theo `id`
          columnDefs: columnDefs,
          rowData: renderData,

          defaultColDef: {
            resizable: true,
            sortable: true,
            filter: false,
            editable: true, // Cho phép sửa tất cả các cột
            cellStyle: {
              fontSize: "14px", // Giảm cỡ chữ
              whiteSpace: "normal", // Cho phép xuống dòng
              wordWrap: "break-word", // Tự động ngắt dòng nếu quá dài
              textAlign: "center", // Căn giữa nội dung ô
            },
          },
          rowHeight: rowHeight,
          onCellValueChanged: onCellValueChanged, // Gọi khi ô thay đổi
          singleClickEdit: true, // Nhấn vào ô là có thể sửa ngay
          enterMovesDownAfterEdit: true, // Nhấn Enter hoặc mũi tên xuống sẽ xuống ô tiếp theo
          suppressClickEdit: false, // Cho phép click vào ô để sửa ngay
        };

        const tableContainer = document.getElementById("table-container");
        tableContainer.innerHTML = ""; // Xóa nội dung cũ trước khi tạo bảng mới
        new agGrid.Grid(tableContainer, gridOptions);

        // ✅ Tự động căn chỉnh cột
        setTimeout(() => {
          gridOptions.api.sizeColumnsToFit();
        }, 100);
      }

      async function addNewRow() {
        let Dot = document.getElementById("combobox-dot").value;
        let Ki = document.getElementById("comboboxki").value;
        let Nam = document.getElementById("NamHoc").value;
        let Khoa = document.getElementById("departmentFilter").value;

        try {
          const response = await fetch("/api/v1/TKB/add-new_row", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              dot: Dot,
              ki_hoc: Ki,
              nam_hoc: Nam,
              major: Khoa,
              course_name: "Môn học mới",
              lecturer: "Giảng viên",
              ll_code: "00",
              ll_total: 0,
            }),
          });

          const newRow = await response.json();

          if (response.ok) {
            console.log("✅ Đã thêm dòng mới:", newRow);

            // ✅ Thêm dòng mới vào bảng AG Grid
            gridOptions.api.applyTransaction({ add: [newRow.data] });

            // ✅ Lấy số lượng hàng hiện tại và cuộn xuống dòng cuối cùng
            setTimeout(() => {
              const lastRowIndex = gridOptions.api.getDisplayedRowCount() - 1;
              gridOptions.api.ensureIndexVisible(lastRowIndex);
            }, 100);
          } else {
            console.error("❌ Lỗi khi thêm dòng:", newRow.message);
          }
        } catch (error) {
          console.error("❌ Lỗi kết nối server:", error);
        }
      }


      async function deleteRow(id, tt, dot, ki_hoc, nam_hoc, stt) {

        if (confirm(`Bạn có chắc chắn muốn xóa dòng ${stt} ?`)) {
          try {
            const response = await fetch(`/TKB-delete-row?tt=${tt}&dot=${dot}&ki_hoc=${ki_hoc}&nam_hoc=${nam_hoc}`, {
              method: "DELETE",
              headers: {
                "Content-Type": "application/json",
              },
            });

            if (!response.ok) {
              throw new Error(`Xóa dòng thất bại: ${response.statusText}`);
            }

            console.log(`data`, renderData);

            // Cập nhật lại dữ liệu cục bộ
            renderData = renderData.filter((row) => row.tt != tt);

            // Cập nhật lại bảng AG Grid
            gridOptions.api.setRowData(renderData);

            // Hiển thị thông báo thành công
            Toastify({
              text: "✅ Xóa thành công!",
              duration: 1000,
              gravity: "top",
              position: "right",
              backgroundColor: "#4CAF50",
            }).showToast();
          } catch (error) {
            console.error("Lỗi khi xóa dòng:", error);
            alert(`Có lỗi xảy ra khi xóa: ${error.message}`);
          }
        }
      }

      // Xóa
      document.getElementById("xoa-TKB").addEventListener("click", async () => {
        const major = document.getElementById("departmentFilter").value;
        const dotValue = document.getElementById("combobox-dot").value;
        const kiValue = document.getElementById("comboboxki").value;
        const namValue = document.getElementById("NamHoc").value;

        // 🔥 Hiển thị hộp thoại xác nhận trước khi xóa
        const result = await Swal.fire({
          title: "Xác nhận xóa",
          html: `Bạn có chắc chắn muốn xóa dữ liệu cho khoa <b>${major}</b> - <b>${dotValue}, ${kiValue}, ${namValue}</b>?`,
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#d33",
          cancelButtonColor: "#3085d6",
          confirmButtonText: "Xóa ngay",
          cancelButtonText: "Hủy",
        });

        // Nếu người dùng chọn "Hủy", thoát khỏi hàm
        if (!result.isConfirmed) return;

        try {
          const response = await fetch(`/api/v1/tkb/all?major=${major}&dot=${dotValue}&ki_hoc=${kiValue}&nam_hoc=${namValue}`, {
            method: "DELETE",
            headers: {
              "Content-Type": "application/json",
            },
          });

          const data = await response.json();

          if (!response.ok) {
            throw new Error(data.error || "Xóa thất bại!");
          }

          // ✅ Hiển thị thông báo thành công
          Swal.fire({
            title: "Thông báo",
            html: data.message,
            icon: "success",
            confirmButtonText: "OK",
            width: "auto",
            padding: "20px",
          });
        } catch (error) {
          Swal.fire({
            title: "Lỗi",
            html: "Xóa thất bại: " + error.message,
            icon: "error",
            confirmButtonText: "OK",
          });
          console.error("Lỗi:", error);
        }
      });
    </script>

    <!-- phần ban hành -->
    <script>
      // Hàm kiểm tra dữ liệu tồn tại trên server
      function checkDataExistence(khoaValue, dotValue, kiValue, namValue) {

        fetch(`/api/v1/tkb/check-data-qcdk-exist?dot=${dotValue}&ki_hoc=${kiValue}&nam_hoc=${namValue}&major=${khoaValue}`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Kiểm tra dữ liệu thất bại");
            }
            return response.json();
          })
          .then((data) => {
            // Nếu bảng TKB ko có dữ liệu thì dừng luôn
            if (!data.valid) {
              Swal.fire({
                title: "Thông báo",
                html: data.message,
                icon: "info",
                confirmButtonText: "OK",
                width: "auto", // Tự động điều chỉnh chiều rộng
                padding: "20px", // Giữ khoảng cách cho nội dung
              });
            }

            if (data.exists) {
              showModal(khoaValue, dotValue, kiValue, namValue);
            } else {
              saveDataAll(khoaValue, dotValue, kiValue, namValue);
            }
          })
          .catch((error) => {
            alert("Kiểm tra dữ liệu file quy chuẩn thất bại!");
            console.error("Error:", error);
          });
      }

      // Hàm hiển thị modal và xử lý sự kiện "Xóa" và "Chèn"
      function showModal(khoaValue, dotValue, kiValue, namValue) {
        const modal = document.getElementById("action-modal");
        const message = `Đã tồn tại dữ liệu của Khoa ${khoaValue}, Đợt ${dotValue}, Kì ${kiValue}, Năm ${namValue}. Thực hiện XÓA file cũ hay CHÈN thêm file mới?
      Lưu ý : XÓA sẽ loại bỏ file cũ và chèn thêm, CHÈN sẽ không loại bỏ file cũ và chèn thêm`;
        document.getElementById("modal-message").innerText = message;
        modal.style.display = "block";

        // Xử lý sự kiện "Xóa"
        const deleteButton = document.getElementById("btn-delete");
        deleteButton.onclick = function handleDeleteClick() {
          modal.style.display = "none";
          deleteFile(khoaValue, dotValue, kiValue, namValue);
        };

        // Xử lý sự kiện "Chèn"
        const appendButton = document.getElementById("btn-append");
        appendButton.onclick = function handleAppendClick() {
          modal.style.display = "none";
          saveDataAll(khoaValue, dotValue, kiValue, namValue);
        };

        // Xử lý sự kiện "Hủy"
        document.getElementById("btn-cancel").onclick = function () {
          modal.style.display = "none";
        };
      }

      // Hàm gửi yêu cầu xóa dữ liệu
      function deleteFile(khoaValue, dotValue, kiValue, namValue) {
        const body = {
          Khoa: khoaValue,
          Dot: dotValue,
          Ki: kiValue,
          Nam: namValue,
        };

        fetch("/xoa-file", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(body),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Xóa dữ liệu thất bại");
            }
            saveDataAll(khoaValue, dotValue, kiValue, namValue);
            // alert("Xóa thành công!");
            //location.reload();
          })
          .catch((error) => {
            Swal.fire({
              title: "Thông báo",
              html: "Xóa dữ liệu thất bại",
              icon: "error",
              confirmButtonText: "OK",
              width: "auto", // Tự động điều chỉnh chiều rộng
              padding: "20px", // Giữ khoảng cách cho nội dung
            });
            console.error("Error:", error);
          });
      }

      function saveDataAll(khoaValue, dotValue, kiValue, namValue) {
        const updatedData = {
          major: khoaValue,
          dot: dotValue,
          ki_hoc: kiValue,
          nam_hoc: namValue,
        };

        fetch("/api/v1/tkb/save-data-to-qcdk", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(updatedData),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Gửi dữ liệu thất bại");
            }
            return response.json();
          })
          .then((data) => {
            let iconAlert = "info";
            if (data.status === "success") {
              iconAlert = "success";
            } else if (data.status === "warning") {
              iconAlert = "warning";
            } else if (data.status === "error") {
              iconAlert = "error";
            }

            Swal.fire({
              title: "Thông báo",
              html: data.message,
              icon: iconAlert,
              confirmButtonText: "OK",
              width: "auto", // Tự động điều chỉnh chiều rộng
              padding: "20px", // Giữ khoảng cách cho nội dung
            });
            
          })
          .catch((error) => {
            console.error("Error:", error);
            Swal.fire({
              title: "Thông báo",
              html: "Gửi dữ liệu thất bại",
              icon: "error",
              confirmButtonText: "OK",
              width: "auto", // Tự động điều chỉnh chiều rộng
              padding: "20px", // Giữ khoảng cách cho nội dung
            });
          });
      }

      // Gắn sự kiện cho nút "import"
      document
        .getElementById("them-vao-qc-du-kien")
        .addEventListener("click", function () {
          const khoaValue = document.getElementById("departmentFilter").value;
          const dotValue = document.getElementById("combobox-dot").value;
          const kiValue = document.getElementById("comboboxki").value;
          const namValue = document.getElementById("NamHoc").value;

          if (khoaValue !== "ALL") {
            checkDataExistence(khoaValue, dotValue, kiValue, namValue);
          } else {
            saveDataAll(khoaValue, dotValue, kiValue, namValue);
          }
        });
    </script>
    <script>
      document
        .getElementById("changePasswordLink")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage

          if (tenDangNhap) {
            // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
            window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(
              tenDangNhap
            )}`;
          } else {
            alert("Không tìm thấy TenDangNhap trong localStorage.");
          }
        });
    </script>

    <script>
      $(document).ready(function () {
        $('#NamHoc option[value=""]').remove();
        $('#comboboxki option[value=""]').remove();
        $('#combobox-dot option[value=""]').remove();

        $.ajax({
          url: "/getNamHoc",
          method: "GET",
          success: function (response) {
            if (response.success) {
              response.NamHoc.forEach(function (item) {
                $("#NamHoc").append(
                  `<option value="${item.NamHoc}">${item.NamHoc}</option>`
                );
              });

              response.Ki.forEach(function (item) {
                $("#comboboxki").append(
                  `<option value="${item.value}">${item.Ki}</option>`
                );
              });
              response.Dot.forEach(function (item) {
                $("#combobox-dot").append(
                  `<option value="${item.value}">${item.Dot}</option>`
                );
              });
            } else {
              console.error(
                "Không lấy được dữ liệu năm học:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu năm học:", error);
          },
        });
      });
    </script>
    <script>
      $(document).ready(function () {
        $('#departmentFilter option[value=""]').remove();
        // Gọi AJAX để lấy dữ liệu JSON từ API
        $.ajax({
          url: "/api/TKB/getKhoaList", // Đường dẫn tới API getPhongBan
          method: "GET",
          success: function (response) {
            // Kiểm tra nếu response thành công
            const MaPhongBan = response.MaPhongBan;
            localStorage.setItem("MaPhongBanList", JSON.stringify(MaPhongBan));
            if (response.success) {
              $("#departmentFilter").prepend(
                '<option value="ALL">Tất cả khoa</option>'
              );
              // Lặp qua từng mục trong mảng MaPhongBan
              response.MaPhongBan.forEach(function (item) {
                // Nếu item.MaPhongBan bằng boMon.MaPhongBan, hiển thị trước
                // Push vào mảng Khoa để validate bảng
                khoaArray.push(item.MaPhongBan);
                $("#departmentFilter").append(
                  `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                );
              });
              // Thêm phòng ban "Khác" vào cuối danh sách
              $("#departmentFilter").append(
                '<option value="Khac">Khác</option>'
              );

              // Nếu không có phòng ban nào tương ứng, bạn có thể thêm tùy chọn mặc định ở đây
              if (!$("#departmentFilter option:selected").length) {
                $("#departmentFilter").prepend(
                  '<option value="">Chọn Phòng Ban</option>'
                );
              }
            } else {
              console.error(
                "Không lấy được dữ liệu phongBan:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu phongBan:", error);
          },
        });
      });
    </script>
    <script>
      document
        .getElementById("infome")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const id_User = localStorage.getItem("id_User"); // Lấy id_User từ localStorage\
          if (id_User) {
            // Chuyển hướng đến trang infome và truyền id_User trong URL
            window.location.href = `/infome/${id_User}`;
          } else {
            alert("Không tìm thấy id_User trong localStorage.");
          }
        });
    </script>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const role = localStorage.getItem("userRole");

        // Ẩn button ngay khi trang được tải
        const actionButton = document.getElementById("changeMessage");
        //Ẩn site thêm thông báo
        if (role === "<%= APP_ROLES.troLy_phong %>" || role === "<%= APP_ROLES.lanhDao_phong %>") {
          actionButton.style.display = "";
        } else {
          actionButton.style.display = "none";
        }
      });
    </script>
    <script>
      document
        .getElementById("changeMessage")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

          if (MaPhongBan) {
            // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
            window.location.href = `/changeMessage/${MaPhongBan}`;
          } else {
            alert("Không tìm thấy MaPhongBan trong localStorage.");
          }
        });
    </script>
    <script>
      document
        .getElementById("export-file-btn")
        .addEventListener("click", function (event) {
          // Toggle menu hiển thị
          const menu = document.getElementById("file-format-menu");
          menu.style.display = menu.style.display === "none" ? "block" : "none";

          // Đảm bảo menu không bị ẩn khi click ra ngoài
          window.addEventListener("click", function (event) {
            if (
              !event.target.closest("#file-format-menu") &&
              !event.target.closest("#export-file-btn")
            ) {
              menu.style.display = "none";
            }
          });
        });

      async function exportMultipleWorksheet() {
        let dot = document.getElementById("combobox-dot").value;
        let ki_hoc = document.getElementById("comboboxki").value;
        let nam_hoc = document.getElementById("NamHoc").value;
        let major = document.getElementById("departmentFilter").value;

        const response = await fetch(`/api/v1/tkb/export-multiple-worksheet?dot=${dot}&ki_hoc=${ki_hoc}&nam_hoc=${nam_hoc}&major=${major}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          alert("Xuất file thất bại!");
          return;
        }

        // Tạo link tải file
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `quy_chuan_${dot}_${ki_hoc}_${nam_hoc}.xlsx`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      }

      // renderData là biến var
      async function exportSingleWorksheet() {
        let dot = document.getElementById("combobox-dot").value;
        let ki_hoc = document.getElementById("comboboxki").value;
        let nam_hoc = document.getElementById("NamHoc").value;
        let major = document.getElementById("departmentFilter").value;


        const response = await fetch(`/api/v1/tkb/export-single-worksheet?dot=${dot}&ki_hoc=${ki_hoc}&nam_hoc=${nam_hoc}&major=${major}`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });

        if (!response.ok) {
          alert("Xuất file thất bại!");
          return;
        }

        // Tạo link tải file
        const blob = await response.blob();
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `quy_chuan_${dot}_${ki_hoc}_${nam_hoc}.xlsx`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      }
    </script>
  </body>
</html>
