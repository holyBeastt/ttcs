<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="/css/gvmList.css" />
  <link rel="stylesheet" href="/css/table.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
  <style>
    .filter-container {
        display: flex; /* Sử dụng Flexbox */
        justify-content: space-between; /* Chia đều không gian giữa hai phần */
        margin-bottom: 20px; /* Khoảng cách dưới cùng */
    }

    .left-container, .right-container {
        display: flex; /* Sử dụng Flexbox cho các phần tử bên trong */
        align-items: center; /* Căn giữa theo chiều dọc */
        gap: 10px; /* Khoảng cách giữa các phần tử */
    }

    .form-select{
        margin-top: 0;
    }
  </style>
</head>

<body>
  <%- include('header') %>

  <!-- Bộ lọc theo thời gian -->
  <div class="filter-container d-flex justify-content-between">
      
      <div class="left-container d-flex align-items-center">
          <select class="form-select mx-2" id="comboboxki">
              <option value="ki1">Kỳ 1</option>
              <option value="ki2">Kỳ 2</option>
            </select>
            
            <select class="form-select mx-2" id="NamHoc">
            </select>
            
            <select class="form-select mx-2" id="Khoa">
            </select>
            
            <button id="showButton" class="btn btn-primary mx-2" style="margin-top: 15px;">Hiển thị</button>
        </div>
        <div class="right-container d-flex align-items-center">
            <label for="startDate">Từ Ngày:</label>
            <input type="date" id="startDate" class="mx-2">
            <label for="endDate">Đến Ngày:</label>
            <input type="date" id="endDate" class="mx-2">
            <button id="filterButton" class="btn btn-primary" style="margin-top: 15px; margin-right: 10px;">Lọc</button>
        </div>
</div>

  <table class="table table-bordered my-2" border="1" id="logTable" style="display: none;">
    <thead>
        <tr>
            <th>STT</th>
            <th>ID Nhân Viên</th>
            <th>Tên Nhân Viên</th>
            <th>Loại Thông Tin</th>
            <th>Nội Dung Thay Đổi</th>
            <th>Thời Gian Thay Đổi</th>
        </tr>
    </thead>
    <tbody id="logTableBody"></tbody>
</table>




  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    async function fetchLogData(startDate, endDate, ki, namHoc, khoa) {
        try {
            const response = await fetch('/api/log'); // Gọi đến API
            const data = await response.json(); // Chuyển đổi dữ liệu thành JSON

            const tableBody = document.getElementById('logTableBody');
            tableBody.innerHTML = ''; // Xóa nội dung bảng trước khi thêm dữ liệu mới

            // Lấy danh sách ID nhân viên có MaPhongBan tương ứng
            const responseNhanVien = await fetch('/api/nhanvien');
            const nhanVienData = await responseNhanVien.json();
            const validUserIds = nhanVienData
                .filter(nv => nv.MaPhongBan === khoa)
                .map(nv => nv.id_User);

            const filteredData = data.filter(item => {
                const itemDate = new Date(item.ThoiGianThayDoi);
                const year = itemDate.getFullYear();
                const month = itemDate.getMonth() + 1; // Tháng bắt đầu từ 0

                // Kiểm tra xem namHoc có giá trị hợp lệ
                if (!namHoc || !namHoc.includes('-')) {
                    return false; // Nếu namHoc không hợp lệ, bỏ qua
                }

                // Kiểm tra ngày bắt đầu và ngày kết thúc
                const isWithinDateRange = (!startDate || itemDate >= new Date(startDate)) &&
                                          (!endDate || itemDate <= new Date(endDate));

                // Xác định kỳ dựa trên năm học
                let isInTerm = false;
                const startYear = parseInt(namHoc.split('-')[0]);
                if (ki === 'ki1') {
                    isInTerm = (month >= 8 && year === startYear) || (month <= 1 && year === startYear + 1); // Kỳ 1
                } else if (ki === 'ki2') {
                    isInTerm = (month >= 2 && year === startYear + 1) && (year === startYear + 1); // Kỳ 2
                }

                // Lọc theo ID Nhân Viên và ngày
                return isInTerm && validUserIds.includes(item.id_User) && isWithinDateRange; // Kiểm tra kỳ, ID Nhân Viên và ngày
            });

            if (filteredData.length > 0) {
                filteredData.forEach((item, index) => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${item.MaLichSuNhap}</td>
                        <td>${item.id_User}</td>
                        <td>${item.TenNhanVien}</td>
                        <td>${item.LoaiThongTin}</td>
                        <td>${item.NoiDungThayDoi}</td>
                        <td>${new Date(item.ThoiGianThayDoi).toLocaleString()}</td>
                    `;
                    tableBody.appendChild(row);
                });
            } else {
                tableBody.innerHTML = '<tr><td colspan="6" class="text-center">Không có dữ liệu</td></tr>';
            }
        } catch (error) {
            console.error('Lỗi khi fetch dữ liệu:', error);
        }
    }

    document.getElementById('filterButton').addEventListener('click', () => {
        const startDate = document.getElementById('startDate').value;
        const endDate = document.getElementById('endDate').value;
        const ki = document.getElementById('comboboxki').value;
        const namHoc = document.getElementById('NamHoc').value;
        const khoa = document.getElementById('Khoa').value;
        fetchLogData(startDate, endDate, ki, namHoc, khoa); // Gọi hàm với các tham số
        document.getElementById('logTable').style.display = 'table'; // Hiển thị bảng
    });

    async function fetchNamHocData() {
        const response = await fetch('/api/namhoc'); // Gọi đến API để lấy năm học
        const data = await response.json();
        const namHocSelect = document.getElementById('NamHoc');
        data.forEach(item => {
            const option = document.createElement('option');
            option.value = item.NamHoc; // Giả sử cột là NamHoc
            option.textContent = item.NamHoc;
            namHocSelect.appendChild(option);
        });
    }

    async function fetchKhoaData() {
        const response = await fetch('/api/nhanvien'); // Gọi đến API để lấy dữ liệu nhân viên
        const data = await response.json();
        const khoaSelect = document.getElementById('Khoa');
        const uniqueDepartments = new Set(); // Sử dụng Set để loại bỏ trùng lặp

        data.forEach(item => {
            uniqueDepartments.add(item.MaPhongBan); // Thêm MaPhongBan vào Set
        });

        uniqueDepartments.forEach(department => {
            const option = document.createElement('option');
            option.value = department; // Giá trị là MaPhongBan
            option.textContent = department; // Hiển thị là MaPhongBan
            khoaSelect.appendChild(option);
        });
    }

    document.getElementById('showButton').addEventListener('click', () => {
        const ki = document.getElementById('comboboxki').value;
        const namHoc = document.getElementById('NamHoc').value;
        const khoa = document.getElementById('Khoa').value;
        fetchLogData(null, null, ki, namHoc, khoa); // Gọi hàm với các tham số
        document.getElementById('logTable').style.display = 'table'; // Hiển thị bảng
    });

    // Gọi hàm khi trang được tải
    window.onload = async () => {
        await fetchNamHocData(); // Tải dữ liệu năm học
        await fetchKhoaData(); // Tải dữ liệu khoa
        fetchLogData(); // Tự động gọi hàm fetchLogData khi trang tải
    };
  </script>
</body>