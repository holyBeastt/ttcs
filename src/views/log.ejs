<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link rel="stylesheet" href="/css/gvmList.css" />
    <link rel="stylesheet" href="/css/table.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link
      href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>
    <style>
      .filter-container {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
        align-items: center; /* Căn giữa theo chiều dọc */
      }

      .left-container,
      .right-container {
        display: flex;
        align-items: center;
        gap: 10px; /* Khoảng cách giữa các phần tử */
      }

      /* Đặt kích thước và căn chỉnh đồng đều cho các phần tử */
      .form-select,
      input[type="date"],
      .btn,
      .right-container label {
        height: 38px; /* Chiều cao cố định */
        font-size: 14px; /* Kích thước chữ đồng đều */
        line-height: 1.5; /* Căn giữa chữ theo chiều dọc */
        margin: 0; /* Loại bỏ margin mặc định */
        padding: 6px 12px; /* Padding đồng đều */
        box-sizing: border-box; /* Đảm bảo kích thước tính cả padding và border */
      }

      .form-select {
        width: 150px; /* Chiều rộng cố định cho dropdown */
      }

      input[type="date"] {
        width: 150px; /* Chiều rộng cố định cho input date */
      }

      .right-container label {
        margin-top: 25px;
        display: flex;
        align-items: center; /* Căn giữa nhãn theo chiều dọc */
        padding: 0 6px; /* Padding nhẹ để cân đối */
      }

      .btn {
        display: flex;
        align-items: center;
        justify-content: center; /* Căn giữa nội dung nút */
      }

      .loading-container {
        display: none;
        text-align: center;
        padding: 20px;
        margin: 10px 0;
      }

      .spinner {
        position: relative;
        width: 80px;
        height: 16px;
        margin: 0 auto;
      }

      .spinner div {
        position: absolute;
        width: 16px;
        height: 16px;
        background-color: #004dff;
        border-radius: 50%;
        animation: spinner-4t3wzl 2s infinite linear;
      }

      .spinner div:nth-child(1) {
        left: 0;
        animation-delay: 0.15s;
        background-color: rgba(0, 77, 255, 0.9);
      }

      .spinner div:nth-child(2) {
        left: 25%;
        animation-delay: 0.3s;
        background-color: rgba(0, 77, 255, 0.8);
      }

      .spinner div:nth-child(3) {
        left: 50%;
        animation-delay: 0.45s;
        background-color: rgba(0, 77, 255, 0.7);
      }

      .spinner div:nth-child(4) {
        left: 75%;
        animation-delay: 0.6s;
        background-color: rgba(0, 77, 255, 0.6);
      }

      .spinner div:nth-child(5) {
        left: 100%;
        animation-delay: 0.75s;
        background-color: rgba(0, 77, 255, 0.5);
      }

      @keyframes spinner-4t3wzl {
        0% {
          transform: rotate(0deg) translateX(-100%);
        }
        100% {
          transform: rotate(360deg) translateX(-100%);
        }
      }

      .loading-text {
        display: block;
        margin-top: 15px;
        color: #004dff;
        font-weight: bold;
      }

      /* Đảm bảo z-index của modal và backdrop */
      .modal {
        z-index: 1055 !important;
      }

      .modal-backdrop {
        z-index: 1050 !important;
        opacity: 0.5 !important;
      }

      .swal2-container {
        z-index: 1000 !important;
      }
    </style>
  </head>

  <body>
    <%- include('header') %>

    <!-- Bộ lọc theo thời gian -->
    <div class="filter-container d-flex justify-content-between">
      <div class="left-container d-flex align-items-center">
        <select class="form-select mx-2" id="comboboxki">
          <option value="ki1">Kỳ 1</option>
          <option value="ki2">Kỳ 2</option>
        </select>

        <select class="form-select" id="NamHoc"></select>

        <select class="form-select" id="Khoa"></select>

        <select class="form-select" id="loaiThongTin">
          <option value="ALL">Tất cả</option>
        </select>

        <button
          id="showButton"
          class="btn btn-primary"
        >
          Hiển thị
        </button>
      </div>
      <div class="right-container d-flex align-items-center">
        <label for="startDate">Từ Ngày:</label>
        <input type="date" id="startDate" class="mx-2" />
        <label for="endDate">Đến Ngày:</label>
        <input type="date" id="endDate" class="mx-2" />
        <button
          id="filterButton"
          class="btn btn-primary"
        >
          Lọc
        </button>
        <button id="downloadButton" class="btn btn-success">
          <i class="bi bi-download"></i> Tải file log
        </button>
      </div>
    </div>
    <!-- Modal hiển thị danh sách file -->
    <div class="modal fade" id="logFilesModal" tabindex="-1" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Chọn file log để tải về</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="list-group" id="logFilesList">
              <!-- Danh sách file sẽ được thêm ở đây -->
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
          </div>
        </div>
      </div>
    </div>
    <!-- Thêm loading indicator -->
    <div class="loading-container" id="loadingIndicator">
      <div class="spinner">
        <div></div>
        <div></div>
        <div></div>
        <div></div>
        <div></div>
      </div>
    </div>

    <table
      class="table table-bordered my-2"
      border="1"
      id="logTable"
      style="display: none"
    >
      <thead>
        <tr>
          <th>STT</th>
          <th>Khoa/ Phòng ban</th>
          <th>Tên Nhân Viên</th>
          <th>Loại Thông Tin</th>
          <th>Nội Dung Thay Đổi</th>
          <th>Thời Gian Thay Đổi</th>
        </tr>
 “

      </thead>
      <tbody id="logTableBody"></tbody>
    </table>

    <!-- Loading indicator cho load more -->
    <div class="text-center mt-3" id="loadMoreContainer" style="display: none;">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Đang tải...</span>
      </div>
      <p class="mt-2">Đang tải thêm dữ liệu...</p>
    </div>

    <!-- Nút tải thêm thủ công -->
    <div class="text-center mt-3" id="loadMoreButton" style="display: none;">
      <button class="btn btn-outline-primary" onclick="loadMoreData()">
        <i class="bi bi-arrow-down-circle"></i> Tải thêm dữ liệu
      </button>
    </div>

    <!-- Thông tin tổng số bản ghi -->
    <div class="text-center mt-2" id="recordInfo" style="display: none;">
      <small class="text-muted"></small>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      let currentPage = 1;
      let isLoading = false;
      let hasMoreData = true;
      let currentFilters = {};
      let allLoadedData = []; // Lưu tất cả dữ liệu đã load

      async function fetchLogData(startDate, endDate, ki, namHoc, khoa, page = 1, isLoadMore = false) {
        if (isLoading) return;
        
        try {
          isLoading = true;
          
          // Nếu không phải load more thì reset dữ liệu
          if (!isLoadMore) {
            allLoadedData = [];
            currentPage = 1;
            hasMoreData = true;
            document.getElementById("logTableBody").innerHTML = "";
          }
          
          // Hiển thị loading indicator
          if (isLoadMore) {
            document.getElementById("loadMoreContainer").style.display = "block";
          }

          // Lưu filters hiện tại
          currentFilters = { startDate, endDate, ki, namHoc, khoa };

          // Gọi API với phân trang
          const response = await fetch(`/api/log?page=${page}&limit=30`);
          const result = await response.json();
          
          const data = result.data;
          const pagination = result.pagination;

          // Lấy danh sách ID nhân viên có MaPhongBan tương ứng
          const responseNhanVien = await fetch("/api/nhanvien");
          const nhanVienData = await responseNhanVien.json();

          // Lọc danh sách nhân viên theo khoa nếu không phải ALL
          const validUserIds =
            khoa === "ALL"
              ? nhanVienData.map((nv) => nv.id_User) // Lấy tất cả ID nếu là ALL
              : nhanVienData
                  .filter((nv) => nv.MaPhongBan === khoa)
                  .map((nv) => nv.id_User);

          const filteredData = data.filter((item) => {
            const itemDate = new Date(item.ThoiGianThayDoi);
            const year = itemDate.getFullYear();
            const month = itemDate.getMonth() + 1;

            if (!namHoc || !namHoc.includes("-")) {
              return false;
            }

            // Kiểm tra ngày bắt đầu và ngày kết thúc
            const isWithinDateRange =
              (!startDate || itemDate >= new Date(startDate)) &&
              (!endDate || itemDate <= new Date(endDate));

            // Xác định kỳ dựa trên năm học
            let isInTerm = false;
            const startYear = parseInt(namHoc.split("-")[0]);
            if (ki === "ki1") {
              isInTerm =
                (month >= 8 && year === startYear) ||
                (month <= 1 && year === startYear + 1);
            } else if (ki === "ki2") {
              isInTerm =
                month >= 2 && year === startYear + 1 && year === startYear + 1;
            }

            const loaiThongTin = document.getElementById("loaiThongTin").value;
            const matchesLoaiThongTin =
              loaiThongTin === "ALL" || item.LoaiThongTin === loaiThongTin;

            return (
              isInTerm &&
              validUserIds.includes(item.id_User) &&
              isWithinDateRange &&
              matchesLoaiThongTin
            );
          });

          // Thêm dữ liệu mới vào danh sách đã load
          allLoadedData = [...allLoadedData, ...filteredData];
          
          // Cập nhật hasMoreData
          hasMoreData = pagination.hasNext && filteredData.length > 0;
          currentPage = pagination.currentPage;

          const tableBody = document.getElementById("logTableBody");
          
          // Hiển thị dữ liệu
          if (filteredData.length > 0) {
            filteredData.forEach((item, index) => {
              const row = document.createElement("tr");
              // STT chính là MaLichSuNhap từ database
              row.innerHTML = `
                        <td>${item.MaLichSuNhap}</td>
                        <td>${item.khoa}</td>
                        <td>${item.TenNhanVien}</td>
                        <td>${item.LoaiThongTin}</td>
                        <td>${item.NoiDungThayDoi}</td>
                        <td>${new Date(
                          item.ThoiGianThayDoi
                        ).toLocaleString()}</td>
                    `;
              tableBody.appendChild(row);
            });
          } else if (!isLoadMore) {
            tableBody.innerHTML =
              '<tr><td colspan="6" class="text-center">Không có dữ liệu</td></tr>';
          }

          // Cập nhật thông tin
          updateRecordInfo();
        } catch (error) {
          console.error("Lỗi khi fetch dữ liệu:", error);
        } finally {
          isLoading = false;
          document.getElementById("loadMoreContainer").style.display = "none";
        }
      }

      // Hàm cập nhật thông tin số bản ghi
      function updateRecordInfo() {
        const recordInfo = document.getElementById("recordInfo");
        const loadMoreButton = document.getElementById("loadMoreButton");
        
        recordInfo.style.display = "block";
        recordInfo.querySelector("small").textContent = 
          `Đã hiển thị ${allLoadedData.length} bản ghi${hasMoreData ? ' - Kéo xuống hoặc click để tải thêm' : ' - Đã hiển thị hết'}`;
        
        // Hiển thị/ẩn nút tải thêm
        if (hasMoreData && allLoadedData.length > 0) {
          loadMoreButton.style.display = "block";
        } else {
          loadMoreButton.style.display = "none";
        }
      }

      // Hàm load more data
      function loadMoreData() {
        if (hasMoreData && !isLoading) {
          fetchLogData(
            currentFilters.startDate,
            currentFilters.endDate,
            currentFilters.ki,
            currentFilters.namHoc,
            currentFilters.khoa,
            currentPage + 1,
            true // isLoadMore = true
          );
        }
      }

      // Thêm scroll listener để tự động load more
      let scrollTimeout = null;
      window.addEventListener('scroll', function() {
        // Throttle scroll events
        if (scrollTimeout) return;
        
        scrollTimeout = setTimeout(() => {
          // Kiểm tra nếu user scroll gần đến cuối trang (còn 500px)
          if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight - 500) {
            loadMoreData();
          }
          scrollTimeout = null;
        }, 200);
      });

      // Hàm hiển thị/ẩn loading
      function toggleLoading(show) {
        document.getElementById("loadingIndicator").style.display = show
          ? "block"
          : "none";
      }

      // Sửa lại event listener cho nút hiển thị
      document
        .getElementById("showButton")
        .addEventListener("click", async () => {
          try {
            toggleLoading(true); // Hiển thị loading

            const ki = document.getElementById("comboboxki").value;
            const namHoc = document.getElementById("NamHoc").value;
            const khoa = document.getElementById("Khoa").value;
            const loaiThongTin = document.getElementById("loaiThongTin").value;

            await fetchLogData(null, null, ki, namHoc, khoa);
            document.getElementById("logTable").style.display = "table";
          } catch (error) {
            console.error("Lỗi:", error);
            alert("Có lỗi xảy ra khi tải dữ liệu");
          } finally {
            toggleLoading(false); // Ẩn loading
          }
        });

      // Sửa lại event listener cho nút lọc
      document
        .getElementById("filterButton")
        .addEventListener("click", async () => {
          try {
            toggleLoading(true); // Hiển thị loading

            const startDate = document.getElementById("startDate").value;
            const endDate = document.getElementById("endDate").value;
            const ki = document.getElementById("comboboxki").value;
            const namHoc = document.getElementById("NamHoc").value;
            const khoa = document.getElementById("Khoa").value;
            const loaiThongTin = document.getElementById("loaiThongTin").value;

            await fetchLogData(startDate, endDate, ki, namHoc, khoa);
            document.getElementById("logTable").style.display = "table";
          } catch (error) {
            console.error("Lỗi:", error);
            alert("Có lỗi xảy ra khi lọc dữ liệu");
          } finally {
            toggleLoading(false); // Ẩn loading
          }
        });

      async function fetchNamHocData() {
        $('#NamHoc option[value=""]').empty();
        $.ajax({
          url: "/getNamHoc",
          method: "GET",
          success: function (response) {
            if (response.success) {
              response.NamHoc.forEach(function (item) {
                console.log(item.NamHoc);
                $("#NamHoc").append(
                  `<option value="${item.NamHoc}">${item.NamHoc}</option>`
                );
              });
            } else {
              console.error(
                "Không lấy được dữ liệu năm học:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu năm học:", error);
          },
        });
      }

      async function fetchKhoaData() {
        const response = await fetch("/api/khoa"); // Gọi đến API để lấy dữ liệu nhân viên
        const data = await response.json();
        const khoaSelect = document.getElementById("Khoa");
        const uniqueDepartments = new Set(); // Sử dụng Set để loại bỏ trùng lặp

        // Thêm option "Tất cả khoa"
        const allOption = document.createElement("option");
        allOption.value = "ALL";
        allOption.textContent = "Tất cả khoa";
        khoaSelect.appendChild(allOption);

        data.forEach((item) => {
          uniqueDepartments.add(item.MaPhongBan); // Thêm MaPhongBan vào Set
        });

        uniqueDepartments.forEach((department) => {
          const option = document.createElement("option");
          option.value = department; // Giá trị là MaPhongBan
          option.textContent = department; // Hiển thị là MaPhongBan
          khoaSelect.appendChild(option);
        });
      }

      async function fetchLoaiThongTinData() {
        try {
          const response = await fetch("/api/loaithongtin");
          const data = await response.json();
          const loaiThongTinSelect = document.getElementById("loaiThongTin");

          data.forEach((item) => {
            const option = document.createElement("option");
            option.value = item.LoaiThongTin;
            option.textContent = item.LoaiThongTin;
            loaiThongTinSelect.appendChild(option);
          });
        } catch (error) {
          console.error("Lỗi khi lấy dữ liệu loại thông tin:", error);
        }
      }

      // Gọi hàm khi trang được tải
      window.onload = async () => {
        await fetchNamHocData();
        await fetchKhoaData();
        await fetchLoaiThongTinData();
        fetchLogData();
      };

      // Hàm hiển thị danh sách file log
      async function showLogFiles() {
        try {
          // Hiển thị một thông báo đang tải
          Swal.fire({
            title: 'Đang xử lý...',
            text: 'Vui lòng đợi trong khi tạo và tải danh sách file log',
            allowOutsideClick: false,
            didOpen: () => {
              Swal.showLoading();
            }
          });

          try {
            // Gọi API để tạo file log mới
            const response = await fetch('/api/log/files?export=true');
            
            if (!response.ok) {
              const errorData = await response.json();
              throw new Error(errorData.message || 'Không thể tạo file log');
            }
            
            const files = await response.json();
            
            // Đóng thông báo đang tải
            Swal.close();
            
            if (files.length === 0) {
              Swal.fire('Thông báo', 'Không có file log nào', 'info');
              return;
            }

            const filesList = document.getElementById('logFilesList');
            filesList.innerHTML = '';

            files.forEach(file => {
              const fileSize = (file.size / 1024).toFixed(2); // Convert to KB
              const createdDate = new Date(file.createdAt).toLocaleString('vi-VN'); // Format date to Vietnamese locale
              const item = document.createElement('a');
              item.href = '#';
              item.className = 'list-group-item list-group-item-action';
              item.innerHTML = `
                <div class="d-flex w-100 justify-content-between">
                  <h6 class="mb-1">${file.name}</h6>
                  <small>${fileSize} KB</small>
                </div>
                <small>Tạo lúc: ${createdDate}</small><br>
                <small>Click để tải về</small>
              `;
              item.addEventListener('click', () => {
                window.location.href = `/api/log/download/${file.name}`;
              });
              filesList.appendChild(item);
            });

            // Hiển thị modal
            const logFilesModal = new bootstrap.Modal(document.getElementById('logFilesModal'));
            logFilesModal.show();
          } catch (error) {
            Swal.close();
            console.error('Lỗi khi tạo hoặc lấy danh sách file log:', error);
            Swal.fire('Lỗi', 'Không thể tạo file log. Vui lòng thử lại sau.', 'error');
          }
        } catch (error) {
          console.error('Lỗi khi hiển thị danh sách file log:', error);
          Swal.fire('Lỗi', 'Có lỗi xảy ra. Vui lòng thử lại sau.', 'error');
        }
      }

      // Thêm sự kiện cho nút tải về
      document.getElementById('downloadButton').addEventListener('click', showLogFiles);
    </script>
  </body>
</html>
