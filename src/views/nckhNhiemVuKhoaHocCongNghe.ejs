<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link rel="stylesheet" href="/css/admin.css" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <link rel="stylesheet" href="/css/nckh.css" />
  </head>

  <body>
    <!-- Phần header -->
    <%- include('header') %>

    <div class="my-3 box formNckh">
      <h2 class="titleNckh">Nhiệm vụ khoa học và công nghệ khác</h2>

      <div class="tabs">
        <ul class="tabs-nav">
          <li class="tab-item">
            <a
              href="#formTab"
              class="tab-link"
              id="tab-form"
              onclick="toggleTabs(event, 'formTab', 'tab-form')"
              >Nhập
            </a>
          </li>
          <li class="tab-item">
            <a
              href="#viewTab"
              class="tab-link"
              id="tab-view"
              onclick="toggleTabs(event, 'viewTab', 'tab-view')"
              >Xem số tiết quy đổi</a
            >
          </li>
        </ul>
      </div>

      <!-- form tab -->
      <div id="formTab" class="tab-content py-4">
        <form id="formData" class="">
          <!-- Cấp đề tài và Năm học (cùng trên 1 dòng) -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="phanLoai">Phân loại</label>
              <select id="phanLoai" name="phanLoai" required></select>
            </div>
            <div class="flex-item">
              <label for="namHocForm">Năm học</label>
              <select class="namHoc" id="namHocForm" name="namHoc" required>
                <!-- Các năm học sẽ được thêm vào đây bằng JavaScript -->
              </select>
            </div>
            <!-- <div class="flex-item">
              <label for="MaPhongBanForm">Khoa</label>
              <select id="MaPhongBanForm" class="MaPhongBan" style="width: 100% !important;" required>
              </select>
            </div> -->
          </div>

          <!-- Tên đề tài -->
          <div class="form-group">
            <label for="tenNhiemVu">Tên nhiệm vụ</label>
            <input
              type="text"
              id="tenNhiemVu"
              name="tenNhiemVu"
              placeholder="Nhập tên đề tài"
              required
            />
          </div>

          <!-- Mã đề tài -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="maNhiemVu">Mã số nhiệm vụ</label>
              <input
                type="text"
                id="maNhiemVu"
                name="maNhiemVu"
                placeholder="VD: 06/2022/CB"
                required
              />
            </div>

            <div class="flex-item">
              <label for="ngayNghiemThu">Ngày nghiệm thu</label>
              <input
                type="date"
                id="ngayNghiemThu"
                name="ngayNghiemThu"
                required
              />
            </div>

            <div class="flex-item">
              <label for="ketQua">Kết quả</label>
              <select id="ketQua" style="width: 100% !important" required>
                <option value="Đạt">Đạt</option>
                <option value="Giỏi">Giỏi</option>
                <option value="Xuất sắc">Xuất sắc</option>
              </select>
            </div>
          </div>

          <!-- Chủ nhiệm -->
          <div class="form-group flex-container" id="div-chunhiem">
            <div class="flex-item">
              <label for="chuNhiem">
                Chủ tịch
                <input
                  type="checkbox"
                  id="chuNhiemCheckbox"
                  name="chuNhiemCheckbox"
                />
                <span class="faded-text"
                  >(Check nếu là giảng viên ngoài viện và điền đơn vị công
                  tác)</span
                >
              </label>
              <div
                id="chuNhiem-suggestions"
                class="suggestions-container"
              ></div>
              <input
                type="text"
                id="chuNhiem"
                name="chuNhiem"
                placeholder="Nhập tên chủ nhiệm"
                required
              />
            </div>
            <div class="flex-item combo-box-wrapper">
              <label for="chuNhiemComboBox">Đơn vị công tác (Chủ tịch)</label>
              <input
                type="text"
                id="chuNhiemComboBox"
                name="chuNhiemComboBox"
                class="combo-box"
                placeholder="Nhập đơn vị"
                required
              />
            </div>
          </div>

          <!-- Phản biện -->
          <div class="form-group flex-container" id="div-phanBien">
            <div class="flex-item">
              <label for="phanBien">
                Phản biện
                <input
                  type="checkbox"
                  id="phanBienCheckbox"
                  name="phanBienCheckbox"
                />
              </label>
              <div
                id="phanBien-suggestions"
                class="suggestions-container"
              ></div>
              <input
                type="text"
                id="phanBien"
                name="phanBien"
                placeholder="Nhập tên phản biện"
                class="input-field"
                required
              />
            </div>
            <div class="flex-item combo-box-wrapper">
              <label for="phanBienComboBox">Đơn vị công tác (Phản biện)</label>
              <input
                type="text"
                id="phanBienComboBox"
                name="phanBienComboBox"
                class="combo-box"
                placeholder="Nhập đơn vị"
                required
              />
            </div>
          </div>

          <div
            id="phanBienListDisplay"
            class="member-list-display form-group"
          ></div>

          <!-- Thư ký -->
          <div class="form-group flex-container" id="div-thuky">
            <div class="flex-item">
              <label for="thuKy">
                Thư ký khoa học
                <input
                  type="checkbox"
                  id="thuKyCheckbox"
                  name="thuKyCheckbox"
                />
              </label>
              <div id="thuKy-suggestions" class="suggestions-container"></div>
              <input
                type="text"
                id="thuKy"
                name="thuKy"
                placeholder="Nhập tên thư ký"
                required
              />
            </div>
            <div class="flex-item combo-box-wrapper">
              <label for="thuKyComboBox">Đơn vị công tác (Thư ký)</label>
              <input
                type="text"
                id="thuKyComboBox"
                name="thuKyComboBox"
                class="combo-box"
                placeholder="Nhập đơn vị"
                required
              />
            </div>
          </div>

          <!-- Ủy viên -->
          <div class="form-group flex-container" id="div-uyVien">
            <div class="flex-item">
              <label for="uyVien">
                Ủy viên
                <input
                  type="checkbox"
                  id="uyVienCheckbox"
                  name="uyVienCheckbox"
                />
              </label>
              <div id="uyVien-suggestions" class="suggestions-container"></div>
              <input
                type="text"
                id="uyVien"
                name="uyVien"
                placeholder="Nhập tên ủy viên"
                class="input-field"
                required
              />
            </div>
            <div class="flex-item combo-box-wrapper">
              <label for="uyVienComboBox">Đơn vị công tác (Ủy viên)</label>
              <input
                type="text"
                id="uyVienComboBox"
                name="uyVienComboBox"
                class="combo-box"
                placeholder="Nhập đơn vị"
                required
              />
            </div>
          </div>

          <div
            id="uyVienListDisplay"
            class="member-list-display form-group"
          ></div>

          <!-- Thành viên -->
          <div class="form-group flex-container" id="div-thanhvien">
            <div class="flex-item">
              <label for="thanhVien">
                Thành viên
                <input
                  type="checkbox"
                  id="thanhVienCheckbox"
                  name="thanhVienCheckbox"
                />
              </label>
              <div
                id="themThanhVien-suggestions"
                class="suggestions-container-dstv"
              ></div>
              <input
                type="text"
                id="thanhVien"
                name="thanhVien"
                placeholder="Nhập tên thành viên"
                class="input-field"
                required
              />
            </div>
            <div class="flex-item combo-box-wrapper">
              <label for="thanhVienComboBox"
                >Đơn vị công tác (Thành viên)</label
              >
              <input
                type="text"
                id="thanhVienComboBox"
                name="thanhVienComboBox"
                class="combo-box"
                placeholder="Nhập đơn vị"
                required
              />
            </div>
          </div>

          <div
            id="memberListDisplay"
            class="member-list-display form-group"
          ></div>

          <button type="button" class="btn" id="submitBtn">Gửi</button>
        </form>
      </div>

      <!-- view tab  -->
      <div id="viewTab" class="tab-content py-4 hidden">
        <h2 class="titleNckh"></h2>
        <div class="flex-container-view">
          <div class="flex-item">
            <label for="namHocXem">Chọn Năm Học:</label>
            <select id="namHocXem" class="namHoc"></select>
          </div>
          <!-- <div class="flex-item">
            <label for="MaPhongBanView">Khoa</label>
            <select id="MaPhongBanView" class="MaPhongBan" style="width: 150px; height: 35px;">
              <option value="ALL">Tất cả khoa</option>
            </select>
          </div> -->
          <div class="flex-item-view">
            <button onclick="" class="btn text-nowrap" id="render">
              Hiển thị
            </button>
          </div>
        </div>

        <div class="table-container">
          <div id="table-container"></div>
        </div>
      </div>
    </div>
    <!-- SweetAlert2 CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css"
      rel="stylesheet"
    />
    <!-- SweetAlert2 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Link thư viện tabulator -->
    <script src="https://cdn.jsdelivr.net/npm/luxon@3.0.1/build/global/luxon.min.js"></script>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/css/tabulator.min.css"
      rel="stylesheet"
    />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/js/tabulator.min.js"></script>
    <!-- fix ngày -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <!-- Flatpickr CSS -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.6.13/flatpickr.min.css"
    />
    <!-- Flatpickr JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flatpickr/4.6.13/flatpickr.min.js"></script>
    <!-- nckh view -->
    <script>
      var table;
      var year;

      document
        .getElementById("render")
        .addEventListener("click", async function () {
          year = document.getElementById("namHocXem").value;
          // const department = document.getElementById("MaPhongBanView").value;
          let department;
          if (
            localStorage.getItem("MaPhongBan") == APP_DEPARTMENTS.daoTao ||
            localStorage.getItem("MaPhongBan") == APP_DEPARTMENTS.ncHtpt
          ) {
            department = "ALL";
          } else {
            department = localStorage.getItem("MaPhongBan");
          }
          const url = `/nhiemvukhoahoccongnghe/${year}/${department}`;

          try {
            const response = await fetch(url);
            const data = await response.json();

            // Lấy thông tin từ localStorage
            const userRole = localStorage.getItem("userRole");
            const userPhongBan = localStorage.getItem("MaPhongBan");

            let columns;

            // Nếu tài khoản là "<%= APP_ROLES.gv %>" hoặc "<%= APP_ROLES.thuong %>", tất cả các cột chỉ ở chế độ xem (editor: "false")
            if (userRole === APP_ROLES.gv || userRole === APP_ROLES.thuong) {
              columns = [
                {
                  title: "Phân Loại",
                  field: "PhanLoai",
                  editor: "false",
                },
                {
                  title: "Tên NV",
                  field: "TenNhiemVu",
                  editor: "false",
                },
                {
                  title: "Mã Số",
                  field: "MaNhiemVu",
                  editor: "false",
                  width: "7%",
                },
                {
                  title: "Chủ Nhiệm",
                  field: "ChuNhiem",
                  editor: "false",
                  width: "10%",
                },
                {
                  title: "Phản Biện",
                  field: "PhanBien",
                  editor: "false",
                  width: "10%",
                },
                {
                  title: "Thư Ký",
                  field: "ThuKy",
                  editor: "false",
                  width: "10%",
                },
                {
                  title: "Ủy Viên",
                  field: "UyVien",
                  editor: "false",
                  width: "10%",
                },
                {
                  title: "Danh Sách Thành Viên",
                  field: "DanhSachThanhVien",
                  editor: "false",
                },
                {
                  title: "Ngày Nghiệm Thu",
                  field: "NgayNghiemThu",
                  editor: "false",
                  formatter: "datetime",
                  formatterParams: {
                    inputFormat: "iso",
                    outputFormat: "dd/MM/yyyy",
                  },
                  width: "7%",
                },
                {
                  title: "KQ",
                  field: "KetQua",
                  editor: "false",
                  width: "7%",
                },
              ];
            } else {
              // Nếu tài khoản có quyền chỉnh sửa
              columns = [
                {
                  title: "Phân Loại",
                  field: "PhanLoai",
                  editor: "input",
                  editable: (cell) => cell.getRow().getData().DaoTaoDuyet != 1,
                },
                {
                  title: "Tên NV",
                  field: "TenNhiemVu",
                  editor: "input",
                  editable: (cell) => cell.getRow().getData().DaoTaoDuyet != 1,
                },
                {
                  title: "Mã Số",
                  field: "MaNhiemVu",
                  editor: "input",
                  editable: (cell) => cell.getRow().getData().DaoTaoDuyet != 1,
                  width: "7%",
                },
                {
                  title: "Chủ Nhiệm",
                  field: "ChuNhiem",
                  editor: "input",
                  editable: (cell) => cell.getRow().getData().DaoTaoDuyet != 1,
                  width: "10%",
                },
                {
                  title: "Phản Biện",
                  field: "PhanBien",
                  editor: "input",
                  editable: (cell) => cell.getRow().getData().DaoTaoDuyet != 1,
                  width: "10%",
                },
                {
                  title: "Thư Ký",
                  field: "ThuKy",
                  editor: "input",
                  editable: (cell) => cell.getRow().getData().DaoTaoDuyet != 1,
                  width: "10%",
                },
                {
                  title: "Ủy Viên",
                  field: "UyVien",
                  editor: "input",
                  editable: (cell) => cell.getRow().getData().DaoTaoDuyet != 1,
                  width: "10%",
                },
                {
                  title: "Danh Sách Thành Viên",
                  field: "DanhSachThanhVien",
                  editor: "input",
                  editable: (cell) => cell.getRow().getData().DaoTaoDuyet != 1,
                },
                {
                  title: "Ngày Nghiệm Thu",
                  field: "NgayNghiemThu",
                  editor: customDateEditor,
                  formatter: "datetime",
                  formatterParams: {
                    inputFormat: "iso",
                    outputFormat: "MM/dd/yyyy",
                  },
                  editable: (cell) => cell.getRow().getData().DaoTaoDuyet != 1,
                  width: "7%",
                },
                {
                  title: "KQ",
                  field: "KetQua",
                  editor: "input",
                  width: "7%",
                  editable: (cell) => cell.getRow().getData().DaoTaoDuyet != 1,
                },
              ];
            }

            // Nếu department == "ALL" thì thêm cột "Khoa"
            if (department == "ALL") {
              columns.push({
                title: "Khoa",
                field: "Khoa",
                editor:
                  userRole === APP_ROLES.gv || userRole === APP_ROLES.thuong
                    ? "false"
                    : "input",
                editable: (cell) => cell.getRow().getData().DaoTaoDuyet != 1,
                width: "10%",
              });
            }

            // Cột Hành Động: chỉ hiển thị nếu tài khoản có quyền xóa (ví dụ: Duyệt, GV_CNBM, Lãnh đạo khoa)
            if (
              ((userRole === APP_ROLES.troLy_phong || userRole === APP_ROLES.lanhDao_phong) && MaPhongBan == APP_DEPARTMENTS.ncHtpt) ||
              userRole === APP_ROLES.gv_cnbm_khoa ||
              userRole === APP_ROLES.lanhDao_khoa
            ) {
              columns.push({
                title: "Xóa",
                field: "actions",
                formatter: actionFormatter,
                hozAlign: "center",
                headerSort: false,
                width: "5%",
              });
            }

            // Nếu tài khoản có quyền Duyệt, thêm cột Duyệt
            if ((userRole === APP_ROLES.troLy_phong || userRole === APP_ROLES.lanhDao_phong) && MaPhongBan == APP_DEPARTMENTS.ncHtpt) {
              columns.push({
                title: "Duyệt",
                field: "DaoTaoDuyet",
                // formatter: checkboxFormatter,
                formatter: "tickCross", // Sử dụng formatter mặc định của Tabulator để hiển thị checkbox
                editor: "tickCross",
                cellClick: function (e, cell) {
                  // Cho phép chỉnh sửa nếu dòng chưa được duyệt
                  cell.edit();
                },
                width: "7%",
              });
            }

            table = new Tabulator("#table-container", {
              data: data,
              dependencies: { luxon: luxon.DateTime },
              index: "ID",
              layout: "fitColumns",
              columns: columns,
            });

            table.on("cellEdited", async function (cell) {
              const field = cell.getField();
              const row = cell.getRow();
              let updatedData = row.getData();
              console.log(row.getData());
              if (field === "NgayNghiemThu" && updatedData.NgayNghiemThu) {
                const isoDate = convertDMYtoISO(updatedData.NgayNghiemThu);
                if (isoDate) updatedData.NgayNghiemThu = isoDate;
              }
              if (field === "DaoTaoDuyet") {
                // Nếu check box được chọn, chuyển thành 1 để gửi lên sv
                updatedData.DaoTaoDuyet =
                  updatedData.DaoTaoDuyet == false ? 1 : 0;
              }
              updatedData.namHoc = year;
              await saveData(updatedData.ID, updatedData, row);
            });
          } catch (error) {
            console.error("Lỗi khi lấy dữ liệu:", error);
          }
        });

      // Hàm tạo custom editor cho Tabulator
      function customDateEditor(
        cell,
        onRendered,
        success,
        cancel,
        editorParams
      ) {
        var cellValue = cell.getValue();
        var formattedValue = cellValue
          ? moment(cellValue).format("MM/DD/YYYY")
          : "";

        var input = document.createElement("input");
        input.setAttribute("type", "text");
        input.style.padding = "3px";
        input.style.width = "100%";
        input.style.boxSizing = "border-box";
        input.value = formattedValue;

        // Gọi flatpickr khi editor được render
        onRendered(function () {
          input.focus();
          flatpickr(input, {
            dateFormat: "m/d/Y", // Định dạng mm/dd/yyyy
            defaultDate: formattedValue,
            allowInput: true, // ✅ Cho phép nhập tay từ bàn phím
            clickOpens: true, // Mở lịch khi click vào input
            onChange: function (selectedDates, dateStr) {
              success(
                selectedDates.length
                  ? moment(selectedDates[0]).toISOString()
                  : ""
              );
            },
            onClose: function (selectedDates, dateStr) {
              if (!selectedDates.length) cancel();
            },
          });
        });

        return input;
      }

      // Formatter cho cột "<%= APP_ROLES.troLy_phong %>" hiển thị input checkbox
      function checkboxFormatter(cell, formatterParams, onRendered) {
        let value = cell.getValue();
        // Chuyển đổi giá trị: nếu là 1 hoặc true thì đánh dấu checked
        let checked = value == 1 || value == true ? "checked" : "";
        return `<input type="checkbox" ${checked}/>`;
      }

      // Formatter cho cột Hành Động: không hiển thị nút xóa nếu đã duyệt
      function actionFormatter(cell) {
        const rowData = cell.getRow().getData();
        if (rowData.DaoTaoDuyet == 1) {
          return "";
        }
        const id = rowData.ID;
        const button = document.createElement("button");
        button.innerHTML = '<i class="fas fa-trash-alt"></i>';
        button.classList.add("btn", "btn-delete");
        button.addEventListener("click", () =>
          deleteRow(id, cell.getRow(), year)
        );
        return button;
      }

      async function saveData(id, updatedData, row) {
        const MaBang = "nhiemvukhoahoccongnghe";
        try {
          const response = await fetch(`/nckh/edit/${id}/${MaBang}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedData),
          });
          const result = await response.json();
          if (result.success) {
            Swal.fire({
              toast: true,
              position: "top-end",
              icon: "success",
              title: "Thông báo",
              text: result.message,
              showConfirmButton: false,
              timer: 3000,
              timerProgressBar: true,
            });
            document.getElementById("render").click(); // Hiển thị lại bảng
          } else {
            Swal.fire({
              toast: true,
              position: "top-end",
              icon: "error",
              title: "Thất bại",
              text: result.message,
              showConfirmButton: false,
              timer: 3000,
              timerProgressBar: true,
            });
          }
        } catch (error) {
          console.error("Lỗi khi cập nhật dữ liệu:", error);
        }
      }

      async function deleteRow(id, row, year) {
        try {
          const response = await fetch(
            `/nckh/delete/${id}/${year}/nhiemvukhoahoccongnghe`,
            { method: "POST" }
          );
          const result = await response.json();
          if (result.success) {
            Swal.fire({
              toast: true,
              position: "top-end",
              icon: "success",
              title: "Thông báo",
              text: result.message,
              showConfirmButton: false,
              timer: 3000,
              timerProgressBar: true,
            });
            row.delete();
          } else {
            Swal.fire({
              toast: true,
              position: "top-end",
              icon: "error",
              title: "Thất bại",
              text: result.message,
              showConfirmButton: false,
              timer: 3000,
              timerProgressBar: true,
            });
          }
        } catch (error) {
          console.error("Lỗi khi xóa dữ liệu:", error);
        }
      }

      function convertDMYtoISO(dateString) {
        const parts = dateString.split("/");
        if (parts.length !== 3) return null;
        const [day, month, year] = parts.map(Number);
        return new Date(Date.UTC(year, month - 1, day)).toISOString();
      }
    </script>
    <!-- nckh form -->
    <script>
      // giảng viên cơ hữu của trường, để gợi ý tên
      var giangVienCoHuu = [];
      var role = localStorage.getItem("userRole");
      var MaPhongBan = localStorage.getItem("MaPhongBan");

      // check thì mới cho nhập đơn vị
      document.addEventListener("DOMContentLoaded", function () {
        // Lấy các checkbox và ô nhập đơn vị
        const chuNhiemCheckbox = document.getElementById("chuNhiemCheckbox");
        const thuKyCheckbox = document.getElementById("thuKyCheckbox");
        const thanhVienCheckbox = document.getElementById("thanhVienCheckbox");
        const phanBienCheckbox = document.getElementById("phanBienCheckbox"); // Phản biện
        const uyVienCheckbox = document.getElementById("uyVienCheckbox"); // Ủy viên

        const chuNhiemComboBox = document.getElementById("chuNhiemComboBox");
        const thuKyComboBox = document.getElementById("thuKyComboBox");
        const thanhVienComboBox = document.getElementById("thanhVienComboBox");
        const phanBienComboBox = document.getElementById("phanBienComboBox"); // Phản biện
        const uyVienComboBox = document.getElementById("uyVienComboBox"); // Ủy viên

        // Hàm disable hoặc enable ô nhập đơn vị
        function toggleComboBoxDisabled() {
          // Chủ nhiệm
          if (chuNhiemCheckbox.checked) {
            chuNhiemComboBox.disabled = false;
          } else {
            chuNhiemComboBox.disabled = true;
            chuNhiemComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }

          // Thư ký
          if (thuKyCheckbox.checked) {
            thuKyComboBox.disabled = false;
          } else {
            thuKyComboBox.disabled = true;
            thuKyComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }

          // Thành viên
          if (thanhVienCheckbox.checked) {
            thanhVienComboBox.disabled = false;
          } else {
            thanhVienComboBox.disabled = true;
            thanhVienComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }

          // Phản biện
          if (phanBienCheckbox.checked) {
            phanBienComboBox.disabled = false;
          } else {
            phanBienComboBox.disabled = true;
            phanBienComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }

          // Ủy viên
          if (uyVienCheckbox.checked) {
            uyVienComboBox.disabled = false;
          } else {
            uyVienComboBox.disabled = true;
            uyVienComboBox.value = ""; // Xóa giá trị đã nhập trong ô nhập đơn vị
          }
        }

        // Disable các ô nhập đơn vị khi tải trang
        toggleComboBoxDisabled();

        // Thêm sự kiện thay đổi (change) cho các checkbox
        chuNhiemCheckbox.addEventListener("change", toggleComboBoxDisabled);
        thuKyCheckbox.addEventListener("change", toggleComboBoxDisabled);
        thanhVienCheckbox.addEventListener("change", toggleComboBoxDisabled);
        phanBienCheckbox.addEventListener("change", toggleComboBoxDisabled); // Phản biện
        uyVienCheckbox.addEventListener("change", toggleComboBoxDisabled); // Ủy viên
      });
      // =================================================================

      // check thì tắt gợi ý
      document.addEventListener("DOMContentLoaded", function () {
        // Lấy các phần tử
        const chuNhiemInput = document.getElementById("chuNhiem");
        const chuNhiemSuggestions = document.getElementById(
          "chuNhiem-suggestions"
        );
        const chuNhiemCheckbox = document.getElementById("chuNhiemCheckbox");
        const thuKyCheckbox = document.getElementById("thuKyCheckbox");
        const thuKyInput = document.getElementById("thuKy");
        const thuKySuggestions = document.getElementById("thuKy-suggestions");
        const thanhVienCheckbox = document.getElementById("thanhVienCheckbox");
        const thanhVienInput = document.getElementById("thanhVien");
        const thanhVienSuggestions = document.getElementById(
          "themThanhVien-suggestions"
        );
        // Phản biện
        const phanBienCheckbox = document.getElementById("phanBienCheckbox");
        const phanBienInput = document.getElementById("phanBien");
        const phanBienSuggestions = document.getElementById(
          "phanBien-suggestions"
        );
        // Ủy viên
        const uyVienCheckbox = document.getElementById("uyVienCheckbox");
        const uyVienInput = document.getElementById("uyVien");
        const uyVienSuggestions = document.getElementById("uyVien-suggestions");

        // Thêm sự kiện lắng nghe khi chuNhiemCheckbox thay đổi
        chuNhiemCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox chủ nhiệm được đánh dấu, ẩn phần gợi ý chủ nhiệm
            chuNhiemSuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý chủ nhiệm
            chuNhiemSuggestions.style.display = "block";
          }
        });

        // Thêm sự kiện lắng nghe khi thuKyCheckbox thay đổi
        thuKyCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox thư ký được đánh dấu, ẩn phần gợi ý thư ký
            thuKySuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý thư ký
            thuKySuggestions.style.display = "block";
          }
        });

        // Thêm sự kiện lắng nghe khi thanhVienCheckbox thay đổi
        thanhVienCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox thành viên được đánh dấu, ẩn phần gợi ý thành viên
            thanhVienSuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý thành viên
            thanhVienSuggestions.style.display = "block";
          }
        });

        // Thêm sự kiện lắng nghe khi phanBienCheckbox thay đổi
        phanBienCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox phản biện được đánh dấu, ẩn phần gợi ý phản biện
            phanBienSuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý phản biện
            phanBienSuggestions.style.display = "block";
          }
        });

        // Thêm sự kiện lắng nghe khi uyVienCheckbox thay đổi
        uyVienCheckbox.addEventListener("change", function () {
          if (this.checked) {
            // Nếu checkbox ủy viên được đánh dấu, ẩn phần gợi ý ủy viên
            uyVienSuggestions.style.display = "none";
          } else {
            // Nếu checkbox không được đánh dấu, hiển thị phần gợi ý ủy viên
            uyVienSuggestions.style.display = "block";
          }
        });
      });

      // =================================================================
      // thực hiện gắn hàm gợi ý khi load trang
      document.addEventListener("DOMContentLoaded", () => {
        // Hàm xử lý sự kiện nhập liệu
        function handleInput(inputId, suggestionId, comboBoxId, checkboxId) {
          const inputElement = document.getElementById(inputId);
          const suggestionContainer = document.getElementById(suggestionId);
          const comboBoxElement = document.getElementById(comboBoxId);
          const checkboxElement = document.getElementById(checkboxId); // Lấy checkbox
          const errorMessage = document.createElement("div");

          let isSuggestionSelected = false; // Biến theo dõi việc chọn gợi ý

          // Gợi ý khi người dùng nhập
          inputElement.addEventListener("input", () => {
            const query = inputElement.value.trim(); // Trim đầu và cuối chuỗi của input
            suggestionContainer.innerHTML = ""; // Xóa gợi ý cũ

            if (!checkboxElement.checked && query) {
              // Nếu checkbox không được chọn và có nhập liệu
              const suggestions = giangVienCoHuu.filter(
                (item) =>
                  item.HoTen.toLowerCase().trim().includes(query.toLowerCase()) // So sánh không phân biệt hoa thường
              );

              suggestions.forEach((item) => {
                const suggestionItem = document.createElement("div");
                suggestionItem.textContent = item.HoTen;
                suggestionItem.className = "suggestion-item";

                suggestionItem.addEventListener("click", () => {
                  // Điền tên và đơn vị vào input theo định dạng "Tên - Đơn vị"
                  const unit = comboBoxElement.value; // Lấy giá trị từ combo box
                  inputElement.value = `${item.HoTen.trim()} - KMA`; // Điền giá trị vào ô input
                  suggestionContainer.innerHTML = ""; // Xóa gợi ý sau khi chọn
                  isSuggestionSelected = true; // Đánh dấu là gợi ý đã được chọn
                  if (inputId == "thanhVien") {
                    addMember(inputElement.value);
                  } else if (inputId == "phanBien") {
                    addPhanBien(inputElement.value);
                  } else if (inputId == "uyVien") {
                    addUyVien(inputElement.value);
                  }
                });

                suggestionContainer.appendChild(suggestionItem);
              });
            }
          });

          // Kiểm tra giá trị khi người dùng nhấn Enter hoặc click ra ngoài (blur)
          inputElement.addEventListener("blur", () => {
            // Nếu gợi ý đã được chọn, ngừng xử lý sự kiện blur
            if (isSuggestionSelected) {
              isSuggestionSelected = false; // Reset lại trạng thái
              return; // Không thực hiện cảnh báo
            }

            // Nếu checkbox được đánh dấu, cho phép nhấn Enter để nhập trực tiếp
            if (checkboxElement.checked) {
              const value = inputElement.value.trim(); // Trim input value (không chuyển thành lowercase)
              const isValid = giangVienCoHuu.some(
                (item) =>
                  item.HoTen.trim().toLowerCase() === value.toLowerCase() // So sánh không phân biệt hoa thường và trim cả hai đầu
              );
              // Không hiển thị cảnh báo nếu nhập không đúng nữa
            }
          });

          // Xử lý khi nhấn Enter
          inputElement.addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
              event.preventDefault(); // Ngừng hành động mặc định của phím Enter
              // Nếu checkbox được đánh dấu, tự động điền giá trị vào input và gọi addMember
              if (checkboxElement.checked) {
                const query = inputElement.value.trim();
                // Kiểm tra xem người dùng đã nhập tên hay chưa
                if (query) {
                  const unit = comboBoxElement.value; // Lấy giá trị từ combo box
                  inputElement.value = `${query} - ${unit}`; // Điền giá trị vào ô input theo định dạng "Tên - Đơn vị"
                  suggestionContainer.innerHTML = ""; // Xóa gợi ý sau khi nhấn Enter

                  if (inputId == "thanhVien") {
                    addMember(inputElement.value);
                  } else if (inputId == "phanBien") {
                    addPhanBien(inputElement.value);
                  } else if (inputId == "uyVien") {
                    addUyVien(inputElement.value);
                  }
                }
              }
            }
          });

          // Ngăn chặn sự kiện blur khi đang hiển thị gợi ý
          inputElement.addEventListener("focus", () => {
            suggestionContainer.innerHTML = ""; // Dọn gọn gợi ý cũ khi focus lại vào input
          });

          // Ẩn gợi ý nếu checkbox được chọn
          checkboxElement.addEventListener("change", () => {
            if (checkboxElement.checked) {
              suggestionContainer.innerHTML = ""; // Ẩn gợi ý
            }
          });
        }

        // Gọi hàm cho từng cặp ô nhập liệu và container gợi ý, truyền thêm combo box và checkbox
        handleInput(
          "chuNhiem",
          "chuNhiem-suggestions",
          "chuNhiemComboBox",
          "chuNhiemCheckbox"
        );
        handleInput(
          "thuKy",
          "thuKy-suggestions",
          "thuKyComboBox",
          "thuKyCheckbox"
        );
        handleInput(
          "thanhVien",
          "themThanhVien-suggestions",
          "thanhVienComboBox",
          "thanhVienCheckbox"
        );
        handleInput(
          "phanBien",
          "phanBien-suggestions",
          "phanBienComboBox",
          "phanBienCheckbox"
        );
        handleInput(
          "uyVien",
          "uyVien-suggestions",
          "uyVienComboBox",
          "uyVienCheckbox"
        );
      });
      // =================================================================

      // lấy dữ liệu giảng viên cơ hữu
      document.addEventListener("DOMContentLoaded", async () => {
        try {
          const response = await fetch("/giangviencohuu"); // Gọi API
          if (!response.ok) {
            throw new Error("Không thể lấy dữ liệu từ API.");
          }

          // Thông báo nếu cần (chỉnh sửa alert nếu cần)
          // alert("Dữ liệu đã được tải thành công!");

          // Chuyển đổi dữ liệu sang JSON
          const data = await response.json();
          console.log(data);

          // Gán dữ liệu vào mảng giangVienCoHuu
          giangVienCoHuu = data;
        } catch (error) {
          console.error("Lỗi khi gọi API:", error);
        }
      });

      // gửi form lên sv
      document
        .getElementById("submitBtn")
        .addEventListener("click", function () {
          // Lấy dữ liệu từ form
          const formData = {
            phanLoai: document.getElementById("phanLoai").value,
            namHoc: document.getElementById("namHocForm").value,
            tenNhiemVu: document.getElementById("tenNhiemVu").value,
            maNhiemVu: document.getElementById("maNhiemVu").value,
            chuNhiem: document.getElementById("chuNhiem").value,
            thuKy: document.getElementById("thuKy").value,
            ngayNghiemThu: document.getElementById("ngayNghiemThu").value,
            // khoa: document.getElementById("MaPhongBanForm").value,
            khoa: localStorage.getItem("MaPhongBan"),
            thanhVien: Array.from(
              document.querySelectorAll("#memberListDisplay span")
            ).map((member) => member.textContent),
            phanBien: Array.from(
              document.querySelectorAll("#phanBienListDisplay span")
            ).map((phanBien) => phanBien.textContent),
            uyVien: Array.from(
              document.querySelectorAll("#uyVienListDisplay span")
            ).map((uyVien) => uyVien.textContent),
            ketQua: document.getElementById("ketQua").value,
          };

          // Phần quyền nhập
          if (role == APP_ROLES.gv || role == APP_ROLES.thuong || MaPhongBan == APP_DEPARTMENTS.vanPhong) {
            alert("Bạn không có quyền truy cấp chức năng này");
            return;
          }

          // // Validate form
          // let missing = 0;

          // for (let key of Object.keys(formData)) {
          //   // Skip the 'thuKy', 'phanBien', and 'uyVien' keys
          //   if (key === "thuKy" || key === "phanBien" || key === "uyVien") {
          //     continue;
          //   }
          //   // Check if the key is missing a value
          //   if (!formData[key]) {
          //     missing++;
          //   }
          // }

          // if (missing > 2) {
          //   alert("Vui lòng nhập đủ thông tin");
          //   return;
          // }

          console.log(formData);

          // Gửi dữ liệu lên server
          fetch("/nhiemvukhoahoccongnghe", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Gửi dữ liệu thất bại!");
              }
              return response.json();
            })
            .then((data) => {
              if (data.success) {
                Swal.fire({
                  title: "Thông báo",
                  html: `${data.message}`,
                  icon: "success",
                  confirmButtonText: "OK",
                  width: "auto",
                  padding: "20px",
                  timer: 3000, // Tự động đóng sau 3 giây
                  timerProgressBar: true, // Hiển thị thanh đếm thời gian
                  didClose: () => {
                    document.getElementById("formData").reset();
                    document.getElementById("memberListDisplay").innerHTML = "";
                    document.getElementById("phanBienListDisplay").innerHTML =
                      "";
                    document.getElementById("uyVienListDisplay").innerHTML = "";
                    members = [];
                    phanBiens = [];
                    uyViens = [];
                    location.reload();
                  },
                });
              }
            })
            .catch((error) => {
              console.error("Lỗi:", error);
              alert("Có lỗi xảy ra: " + error.message);
            });
        });

      // =================================================================
      // Thêm vào phần script sau phần khai báo mảng members
      let members = [];
      let phanBiens = []; // Mảng cho phản biện
      let uyViens = []; // Mảng cho ủy viên

      // Hàm thêm thành viên vào mảng member để hiển thị
      function addMember(memberName) {
        if (memberName) {
          // Thêm thành viên vào mảng members
          console.log(memberName);
          members.push(memberName);
          // Cập nhật danh sách thành viên hiển thị trên form
          updateFormMemberList();
          // Xóa nội dung ô input sau khi thêm thành viên
          document.getElementById("thanhVien").value = "";
        }
      }

      // Hàm thêm phản biện vào mảng phanBiens để hiển thị
      function addPhanBien(phanBienName) {
        if (phanBienName) {
          // Thêm phản biện vào mảng phanBiens
          console.log(phanBienName);
          phanBiens.push(phanBienName);
          // Cập nhật danh sách phản biện hiển thị trên form
          updateFormPhanBienList();
          // Xóa nội dung ô input sau khi thêm phản biện
          document.getElementById("phanBien").value = "";
        }
      }

      // Hàm thêm ủy viên vào mảng uyViens để hiển thị
      function addUyVien(uyVienName) {
        if (uyVienName) {
          // Thêm ủy viên vào mảng uyViens
          console.log(uyVienName);
          uyViens.push(uyVienName);
          // Cập nhật danh sách ủy viên hiển thị trên form
          updateFormUyVienList();
          // Xóa nội dung ô input sau khi thêm ủy viên
          document.getElementById("uyVien").value = "";
        }
      }

      // Hàm cập nhật danh sách thành viên và hiển thị lên form (giữ nguyên)
      function updateFormMemberList() {
        const memberListDisplay = document.getElementById("memberListDisplay");
        memberListDisplay.innerHTML = ""; // Xóa danh sách cũ
        // Duyệt qua mảng members để hiển thị từng thành viên
        members.forEach((member, index) => {
          const memberContainer = document.createElement("div");
          memberContainer.style.display = "flex"; // Đảm bảo các phần tử được hiển thị trên cùng một dòng
          memberContainer.style.alignItems = "center"; // Căn giữa tên và nút xóa
          memberContainer.style.justifyContent = "space-between"; // Đảm bảo tên thành viên và nút xóa được căn lề
          // Tạo phần tử hiển thị tên thành viên
          const span = document.createElement("span");
          span.textContent = member;
          span.style.flexGrow = 1; // Cho phép tên thành viên chiếm hết không gian còn lại trong div
          // Thêm nút xóa cho từng thành viên
          const removeButton = document.createElement("button");
          removeButton.innerHTML = '<i class="fa fa-times"></i>';
          removeButton.onclick = () => removeMember(index); // Gắn sự kiện xóa
          // Thêm tên thành viên và nút xóa vào giao diện
          memberContainer.appendChild(span);
          memberContainer.appendChild(removeButton);
          // Thêm container chứa thành viên vào danh sách hiển thị
          memberListDisplay.appendChild(memberContainer);
        });
      }

      // Hàm cập nhật danh sách phản biện và hiển thị lên form
      function updateFormPhanBienList() {
        const phanBienListDisplay = document.getElementById(
          "phanBienListDisplay"
        );
        phanBienListDisplay.innerHTML = ""; // Xóa danh sách cũ
        // Duyệt qua mảng phanBiens để hiển thị từng phản biện
        phanBiens.forEach((phanBien, index) => {
          const phanBienContainer = document.createElement("div");
          phanBienContainer.style.display = "flex"; // Đảm bảo các phần tử được hiển thị trên cùng một dòng
          phanBienContainer.style.alignItems = "center"; // Căn giữa tên và nút xóa
          phanBienContainer.style.justifyContent = "space-between"; // Đảm bảo tên phản biện và nút xóa được căn lề
          // Tạo phần tử hiển thị tên phản biện
          const span = document.createElement("span");
          span.textContent = phanBien;
          span.style.flexGrow = 1; // Cho phép tên phản biện chiếm hết không gian còn lại trong div
          // Thêm nút xóa cho từng phản biện
          const removeButton = document.createElement("button");
          removeButton.innerHTML = '<i class="fa fa-times"></i>';
          removeButton.onclick = () => removePhanBien(index); // Gắn sự kiện xóa
          // Thêm tên phản biện và nút xóa vào giao diện
          phanBienContainer.appendChild(span);
          phanBienContainer.appendChild(removeButton);
          // Thêm container chứa phản biện vào danh sách hiển thị
          phanBienListDisplay.appendChild(phanBienContainer);
        });
      }

      // Hàm cập nhật danh sách ủy viên và hiển thị lên form
      function updateFormUyVienList() {
        const uyVienListDisplay = document.getElementById("uyVienListDisplay");
        uyVienListDisplay.innerHTML = ""; // Xóa danh sách cũ
        // Duyệt qua mảng uyViens để hiển thị từng ủy viên
        uyViens.forEach((uyVien, index) => {
          const uyVienContainer = document.createElement("div");
          uyVienContainer.style.display = "flex"; // Đảm bảo các phần tử được hiển thị trên cùng một dòng
          uyVienContainer.style.alignItems = "center"; // Căn giữa tên và nút xóa
          uyVienContainer.style.justifyContent = "space-between"; // Đảm bảo tên ủy viên và nút xóa được căn lề
          // Tạo phần tử hiển thị tên ủy viên
          const span = document.createElement("span");
          span.textContent = uyVien;
          span.style.flexGrow = 1; // Cho phép tên ủy viên chiếm hết không gian còn lại trong div
          // Thêm nút xóa cho từng ủy viên
          const removeButton = document.createElement("button");
          removeButton.innerHTML = '<i class="fa fa-times"></i>';
          removeButton.onclick = () => removeUyVien(index); // Gắn sự kiện xóa
          // Thêm tên ủy viên và nút xóa vào giao diện
          uyVienContainer.appendChild(span);
          uyVienContainer.appendChild(removeButton);
          // Thêm container chứa ủy viên vào danh sách hiển thị
          uyVienListDisplay.appendChild(uyVienContainer);
        });
      }

      // Hàm xóa thành viên (giữ nguyên)
      function removeMember(index) {
        members.splice(index, 1); // Xóa thành viên khỏi mảng
        updateFormMemberList(); // Cập nhật lại danh sách hiển thị
      }

      // Hàm xóa phản biện
      function removePhanBien(index) {
        phanBiens.splice(index, 1); // Xóa phản biện khỏi mảng
        updateFormPhanBienList(); // Cập nhật lại danh sách hiển thị
      }

      // Hàm xóa ủy viên
      function removeUyVien(index) {
        uyViens.splice(index, 1); // Xóa ủy viên khỏi mảng
        updateFormUyVienList(); // Cập nhật lại danh sách hiển thị
      }

      // =================================================================
    </script>
    <!-- lấy dữ liệu vào thẻ cấp đề tài dự án và ẩn các div -->
    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        try {
          const response = await fetch("/data/nhiemvukhoahoccongnghe"); // Gọi API
          if (!response.ok) {
            throw new Error("Không thể lấy dữ liệu từ API.");
          }

          // Chuyển đổi dữ liệu sang JSON
          const data = await response.json();
          console.log(data);

          // Lấy thẻ select
          const selectElement = document.getElementById("phanLoai");

          // Xóa các option cũ (nếu có)
          selectElement.innerHTML = "";

          // Thêm option mới từ dữ liệu API
          data.forEach((item) => {
            const option = document.createElement("option");
            option.value = item.NhiemVuKhoaHocCongNghe; // Giá trị option
            option.textContent = item.NhiemVuKhoaHocCongNghe; // Nội dung hiển thị
            selectElement.appendChild(option);
          });

          handlePhanLoaiChange();
        } catch (error) {
          console.error("Lỗi khi gọi API:", error);
        }
      });

      function handlePhanLoaiChange() {
        const capDeTaiSelect = document.getElementById("phanLoai");
        const selectedIndex = capDeTaiSelect.selectedIndex;
        const totalOptions = capDeTaiSelect.options.length;

        const chuNhiem = document.getElementById("div-chunhiem");
        const thuKy = document.getElementById("div-thuky");
        const thanhVien = document.getElementById("div-thanhvien");
        const phanBien = document.getElementById("div-phanBien");
        const uyVien = document.getElementById("div-uyVien");
        const suggestThanhVien = document.getElementById("memberListDisplay");
        const suggestPhanBien = document.getElementById("phanBienListDisplay");
        const suggestUyVien = document.getElementById("uyVienListDisplay");

        if (selectedIndex >= totalOptions - 5) {
          thanhVien.style.display = "flex";
          phanBien.style.display = "none";
          uyVien.style.display = "none";
          chuNhiem.style.display = "none";
          thuKy.style.display = "none";
          suggestThanhVien.hidden = false;
          suggestPhanBien.hidden = true;
          suggestUyVien.hidden = true;
        } else {
          thanhVien.style.display = "none";
          phanBien.style.display = "flex";
          uyVien.style.display = "flex";
          chuNhiem.style.display = "flex";
          thuKy.style.display = "flex";
          suggestThanhVien.hidden = true;
          suggestPhanBien.hidden = false;
          suggestUyVien.hidden = false;
        }
      }

      document
        .getElementById("phanLoai")
        .addEventListener("change", handlePhanLoaiChange);
    </script>

    <!-- nckh tab chuyển tab -->
    <script src="/js/nckh/nckh.js"></script>
    <!-- link href -->
    <script src="/js/nckh/href.js"></script>
    <!-- srcipt năm học, khoa -->
    <script src="/js/nckh/getdata.js"></script>
  </body>
</html>
