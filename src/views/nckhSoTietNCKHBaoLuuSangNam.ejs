<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="/css/admin.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
  <link rel="stylesheet" href="/css/nckh.css" />
</head>

<body>
  <!-- Phần header -->
  <%- include('header') %>

    <div class="my-3 box formNckh">
      <h2 class="titleNckh">Số tiết NCKH bảo lưu sang năm</h2>

      <div class="tabs">
        <ul class="tabs-nav">
          <li class="tab-item">
            <!-- <a href="#formTab" class="tab-link" id="tab-form" onclick="toggleTabs(event, 'formTab', 'tab-form')">Xem số tiết NCKH bảo lưu -->
            </a>
          </li>
          <!-- <li class="tab-item">
            <a href="#viewTab" class="tab-link" id="tab-view" onclick="toggleTabs(event, 'viewTab', 'tab-view')">Xem số
              giờ quy đổi</a>
          </li> -->
        </ul>
      </div>

      <!-- form tab -->
      <div id="formTab" class="tab-content py-4">
        <form id="formData" class="">
          <!-- Cấp đề tài và Năm học (cùng trên 1 dòng) -->
          <div class="form-group flex-container">
            <div class="flex-item">
              <label for="capDeTai">Tên nhiệm vụ</label>
              <select id="capDeTai" name="tenNhiemVu" required></select>
            </div>
            <div class="flex-item">
              <label for="namHocForm">Năm học</label>
              <select class="namHoc" id="namHocForm" name="namHoc" onclick="getDataSoTietNCKHBaoLuuSangNam()">
                <!-- Các năm học sẽ được thêm vào đây bằng JavaScript -->
              </select>
            </div>
          </div>


          <!-- Chủ nhiệm -->
          <!-- <div class="form-group flex-container">
            <div class="flex-item">
              <label for="giangVien">
                Tên giảng viên
              </label>
              <div id="giangVien-suggestions" class="suggestions-container"></div>
              <input type="text" id="giangVien" name="giangVien" placeholder="Nhập tên giảng viên" required />
            </div>
          </div> -->
          <div id="table"></div>
          <!-- <button type="button" class="btn" id="submitBtn">Gửi</button> -->
        </form>

      </div>

      <!-- view tab  -->
      <div id="viewTab" class="tab-content py-4 hidden">
        <h2 class="titleNckh"></h2>
        <div class="flex-container-view">
          <div class="flex-item">
            <label for="namHocXem">Chọn Năm Học:</label>
            <select id="namHocXem" class="namHoc"></select>
          </div>
          <!-- <div class="flex-item">
                        <label for="MaPhongBanView">Khoa</label>
                        <select id="MaPhongBanView" class="MaPhongBan" style="width: 150px; height: 35px;">
                            <option value="ALL">Tất cả khoa</option>
                        </select>
                    </div> -->
          <div class="flex-item-view">
            <button onclick="" class="btn text-nowrap" id="render">Hiển thị</button>
          </div>
        </div>

        <div class="table-container">
          <div id="table-container"></div>
        </div>
      </div>
    </div>
    <!-- SweetAlert2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css" rel="stylesheet" />
    <!-- SweetAlert2 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Link thư viện tabulator -->
    <script src="https://cdn.jsdelivr.net/npm/luxon@3.0.1/build/global/luxon.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/css/tabulator.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tabulator/5.5.2/js/tabulator.min.js"></script>
    <!-- lấy dữ liệu vào thẻ cấp đề tài dự án -->

    <!-- nckh view -->
    <script>
      var table;

      document.getElementById("render").addEventListener("click", async function () {
        const year = document.getElementById("namHocXem").value;
        // const department = document.getElementById("MaPhongBanView").value;
        let department;
        if (localStorage.getItem("MaPhongBan") == "DAOTAO" || localStorage.getItem("MaPhongBan") == "KHCN&HTPT") {
          department = "ALL";
        } else {
          department = localStorage.getItem("MaPhongBan");
        };
        const url = `/sotietnckhbaoluusangnam/${year}/${department}`;

        try {
          const response = await fetch(url);
          const data = await response.json();

          // Lấy thông tin từ localStorage
          const userRole = localStorage.getItem("userRole");
          const userPhongBan = localStorage.getItem("MaPhongBan");

          let columns;

          // Cấp quyền sửa
          if (userRole === "GV" || userRole === "Thường") {
            columns = [
              {
                title: "Tên nhiệm vụ",
                field: "TenNhiemVu",
                editor: "false",
              },
              {
                title: "Năm học",
                field: "NamHoc",
                editor: "false",
              },
              {
                title: "Tên giảng viên",
                field: "GiangVien",
                editor: "false",
              },
              {
                title: "Tổng số tiết NCKH",
                field: "TongSoTietNCKHTrongNam",
                editor: "false",
              },
              {
                title: "Số tiết vượt định mức",
                field: "SoTietVuotDinhMuc",
                editor: "false",
              },
              {
                title: "Số tiết được bảo lưu sang năm",
                field: "SoTietBaoLuuSangNamSau",
                editor: "false",
              }
            ];
          } else {
            columns = [
              {
                title: "Tên nhiệm vụ",
                field: "TenNhiemVu",
                editor: "input",
                editable: cell => cell.getRow().getData().DaoTaoDuyet != 1,
              },
              {
                title: "Tên giảng viên",
                field: "GiangVien",
                editor: "input",
                editable: cell => cell.getRow().getData().DaoTaoDuyet != 1,
              },
              {
                title: "Tổng số tiết NCKH",
                field: "TongSoTietNCKHTrongNam",
                editor: "input",
                editable: cell => cell.getRow().getData().DaoTaoDuyet != 1,
              },
              {
                title: "Số tiết vượt định mức",
                field: "SoTietVuotDinhMuc",
                editor: "input",
                editable: cell => cell.getRow().getData().DaoTaoDuyet != 1,
              },
              {
                title: "Số tiết được bảo lưu sang năm",
                field: "SoTietBaoLuuSangNamSau",
                editor: "input",
                editable: cell => cell.getRow().getData().DaoTaoDuyet != 1,
              }
            ];
          }

          // Nếu department == "ALL" thì thêm cột khoa
          if (department === "ALL") {
            columns.push({
              title: "Khoa",
              field: "Khoa",
              editor: "input",
              editable: cell => cell.getRow().getData().DaoTaoDuyet != 1,
              width: "10%"
            });
          }

          // Cấp quyền xóa
          if (userRole === "Duyệt" && MaPhongBan == "KHCN&HTPT" || userRole === "GV_CNBM" || userRole === "Lãnh đạo khoa") {
            columns.push({
              title: "Xóa",
              field: "actions",
              formatter: actionFormatter,
              hozAlign: "center",
              headerSort: false,
              width: "5%"
            });
          }

          // Cấp quyền duyệt
          if (userRole === "Duyệt" && MaPhongBan == "KHCN&HTPT") {
            columns.push({
              title: "Duyệt",
              field: "DaoTaoDuyet",
              // formatter: checkboxFormatter,
              formatter: "tickCross", // Sử dụng formatter mặc định của Tabulator để hiển thị checkbox
              editor: "tickCross",
              cellClick: function (e, cell) {
                // Cho phép chỉnh sửa nếu dòng chưa được duyệt
                cell.edit();
              },
              width: "7%"
            });
          }


          table = new Tabulator("#table-container", {
            data: data,
            index: "ID",
            layout: "fitColumns",
            columns: columns
          });

          table.on("cellEdited", async function (cell) {
            const field = cell.getField();
            const row = cell.getRow();
            let updatedData = row.getData();
            console.log(row.getData())
            if (field === "DaoTaoDuyet") {
              // Nếu check box được chọn, chuyển thành 1 để gửi lên sv
              updatedData.DaoTaoDuyet = updatedData.DaoTaoDuyet == false ? 1 : 0;
            }
            updatedData.namHoc = year;
            await saveData(updatedData.ID, updatedData, row);
          });
        } catch (error) {
          console.error("Lỗi khi lấy dữ liệu:", error);
        }
      });

      // Formatter cho cột "Duyệt" hiển thị input checkbox
      function checkboxFormatter(cell, formatterParams, onRendered) {
        let value = cell.getValue();
        // Chuyển đổi giá trị: nếu là 1 hoặc true thì đánh dấu checked
        let checked = (value == 1 || value == true) ? "checked" : "";
        return `<input type="checkbox" ${checked}/>`;
      }

      // Formatter cho cột Hành Động: không hiển thị nút xóa nếu đã duyệt
      function actionFormatter(cell) {
        const rowData = cell.getRow().getData();
        if (rowData.DaoTaoDuyet == 1) {
          return "";
        }
        const id = rowData.ID;
        const button = document.createElement("button");
        button.innerHTML = "<i class=\"fas fa-trash-alt\"></i>";
        button.classList.add("btn", "btn-delete");
        button.addEventListener("click", () => deleteRow(id, cell.getRow(), year));
        return button;
      }

      async function saveData(id, updatedData, row) {
        const MaBang = 'sotietnckhbaoluusangnam';
        try {
          const response = await fetch(`/nckh/edit/${id}/${MaBang}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(updatedData)
          });
          const result = await response.json();
          if (result.success) {
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'success',
              title: 'Thông báo',
              text: result.message,
              showConfirmButton: false,
              timer: 3000,
              timerProgressBar: true
            });
            document.getElementById("render").click(); // Hiển thị lại bảng
          } else {
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: 'Thất bại',
              text: result.message,
              showConfirmButton: false,
              timer: 3000,
              timerProgressBar: true
            });
          }
        } catch (error) {
          console.error("Lỗi khi cập nhật dữ liệu:", error);
        }
      }

      async function deleteRow(id, row, year) {
        try {
          const response = await fetch(`/nckh/delete/${id}/${year}/sotietnckhbaoluusangnam`, { method: "POST" });
          const result = await response.json();
          if (result.success) {
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'success',
              title: 'Thông báo',
              text: result.message,
              showConfirmButton: false,
              timer: 3000,
              timerProgressBar: true
            });
            row.delete();
          } else {
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: 'Thất bại',
              text: result.message,
              showConfirmButton: false,
              timer: 3000,
              timerProgressBar: true
            });
          }
        } catch (error) {
          console.error("Lỗi khi xóa dữ liệu:", error);
        }
      }

      function convertDMYtoISO(dateString) {
        const parts = dateString.split("/");
        if (parts.length !== 3) return null;
        const [day, month, year] = parts.map(Number);
        return new Date(Date.UTC(year, month - 1, day)).toISOString();
      }
    </script>


    <!-- nckh form -->
    <script>
      // giảng viên cơ hữu của trường, để gợi ý tên
      var giangVienCoHuu = [];
      var role = localStorage.getItem("userRole");
      var MaPhongBan = localStorage.getItem("MaPhongBan");

      // lấy dữ liệu giảng viên cơ hữu
      document.addEventListener("DOMContentLoaded", async () => {
        try {
          const response = await fetch("/giangviencohuu"); // Gọi API
          if (!response.ok) {
            throw new Error("Không thể lấy dữ liệu từ API.");
          }

          // Thông báo nếu cần (chỉnh sửa alert nếu cần)
          // alert("Dữ liệu đã được tải thành công!");

          // Chuyển đổi dữ liệu sang JSON
          const data = await response.json();
          console.log(data);

          // Gán dữ liệu vào mảng giangVienCoHuu
          giangVienCoHuu = data;
        } catch (error) {
          console.error("Lỗi khi gọi API:", error);
        }
      });

      // lấy data tên nhiệm vụ cho vào thẻ select
      async function getTenNhiemVu() {
        try {
          const response = await fetch("/data/sotietnckhbaoluusangnam"); // Gọi API
          if (!response.ok) {
            throw new Error("Không thể lấy dữ liệu từ API.");
          }

          // Chuyển đổi dữ liệu sang JSON
          const data = await response.json();
          console.log(data);

          // Lấy thẻ select
          const selectElement = document.getElementById("capDeTai");
          console.log(selectElement)

          // Xóa các option cũ (nếu có)
          selectElement.innerHTML = "";

          // Thêm option mới từ dữ liệu API
          data.forEach(item => {
            const option = document.createElement("option");
            option.value = item.SoTietNCKHBaoLuuSangNam; // Giá trị option
            option.textContent = item.SoTietNCKHBaoLuuSangNam; // Nội dung hiển thị
            selectElement.appendChild(option);
          });

        } catch (error) {
          console.error("Lỗi khi gọi API:", error);
        }
      }

      // hiển thị 3 số tiết vào bảng
      window.onload = async () => {
        try {
          await getTenNhiemVu();

          // Đảm bảo DOM đã được cập nhật hoàn toàn sau khi getTenNhiemVu() thực thi
          await new Promise(resolve => setTimeout(resolve, 1000)); // Đợi 1000ms

          // Lấy dữ liệu từ form sau khi getTenNhiemVu đã hoàn thành
          const formData = {
            tenNhiemVu: document.getElementById("capDeTai").value,
            namHoc: document.getElementById("namHocForm").value,
            giangVien: localStorage.getItem("TenNhanVien"),
            khoa: localStorage.getItem("MaPhongBan"),
          };

          // Validate form
          let missing = 0;
          for (let key of Object.keys(formData)) {
            if (!formData[key]) {
              missing++;
            }
          }

          if (missing > 0) {
            alert("Vui lòng nhập đủ thông tin");
            return;
          }

          // Gửi dữ liệu lên server
          try {
            const response = await fetch("/sotietnckhbaoluusangnam", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(formData),
            });

            if (!response.ok) {
              throw new Error("Gửi dữ liệu thất bại!");
            }

            const data = await response.json();
            if (data) {
              console.log(data);
              renderTable(data);
            }
          } catch (error) {
            console.error("Lỗi:", error);
            alert("Có lỗi xảy ra: " + error.message);
          }
        } catch (error) {
          console.error("Lỗi khi khởi tạo dữ liệu:", error);
          alert("Không thể tải dữ liệu đề tài. Vui lòng thử lại sau.");
        }
      };


      async function getDataSoTietNCKHBaoLuuSangNam() {
        try {
          await getTenNhiemVu();

          // Đảm bảo DOM đã được cập nhật hoàn toàn sau khi getTenNhiemVu() thực thi
          await new Promise(resolve => setTimeout(resolve, 1000)); // Đợi 1000ms

          // Lấy dữ liệu từ form sau khi getTenNhiemVu đã hoàn thành
          const formData = {
            tenNhiemVu: document.getElementById("capDeTai").value,
            namHoc: document.getElementById("namHocForm").value,
            giangVien: localStorage.getItem("TenNhanVien"),
            khoa: localStorage.getItem("MaPhongBan"),
          };

          // Validate form
          let missing = 0;
          for (let key of Object.keys(formData)) {
            if (!formData[key]) {
              missing++;
            }
          }

          if (missing > 0) {
            alert("Vui lòng nhập đủ thông tin");
            return;
          }

          // Gửi dữ liệu lên server
          try {
            const response = await fetch("/sotietnckhbaoluusangnam", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(formData),
            });

            if (!response.ok) {
              throw new Error("Gửi dữ liệu thất bại!");
            }

            const data = await response.json();
            if (data) {
              console.log(data);
              renderTable(data);
            }
          } catch (error) {
            console.error("Lỗi:", error);
            alert("Có lỗi xảy ra: " + error.message);
          }
        } catch (error) {
          console.error("Lỗi khi khởi tạo dữ liệu:", error);
          alert("Không thể tải dữ liệu đề tài. Vui lòng thử lại sau.");
        }
      }

      function renderTable(data) {
        const tableContainer = document.getElementById("table");

        // Kiểm tra nếu không có dữ liệu hoặc dữ liệu không hợp lệ
        if (!data || typeof data !== 'object') {
          tableContainer.innerHTML = "<p>Không có dữ liệu.</p>";
          return;
        }

        // Tạo bảng chỉ với 3 trường
        const tableHTML = `
    <table class="table table-striped table-bordered">
      <thead class="thead-dark">
        <tr>
          <th scope="col">Họ và tên</th>
          <th scope="col">Tổng số tiết NCKH</th>
          <th scope="col">Số tiết vượt định mức</th>
          <th scope="col">Số tiết bảo lưu sang năm sau</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>${data.name ?? ""}</td>
          <td>${data.tongSoTietNCKH ?? ""}</td>
          <td>${data.soTietVuotDinhMuc ?? ""}</td>
          <td>${data.soTietBaoLuuSangNamSau ?? ""}</td>
        </tr>
      </tbody>
    </table>
  `;

        // Hiển thị bảng trong container
        tableContainer.innerHTML = tableHTML;
      }

      document
        .getElementById("submitBtn")
        .addEventListener("click", function () {
          // Lấy dữ liệu từ form
          const formData = {
            tenNhiemVu: document.getElementById("capDeTai").value,
            namHoc: document.getElementById("namHocForm").value,
            // giangVien: document.getElementById("giangVien").value.trim(),
            // khoa: document.getElementById("MaPhongBanForm").value,
            giangVien: localStorage.getItem("TenNhanVien"),
            khoa: localStorage.getItem("MaPhongBan"),
          };

          // Gửi dữ liệu lên server
          fetch("/sotietnckhbaoluusangnam/save", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(formData),
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Gửi dữ liệu thất bại!");
              }
              return response.json();
            })
            .then((data) => {
              if (data.success) {
                Swal.fire({
                  title: 'Thông báo',
                  html: `${data.message}`,
                  icon: 'success',
                  confirmButtonText: 'OK',
                  width: 'auto',
                  padding: '20px',
                  timer: 3000, // Tự động đóng sau 3 giây
                  timerProgressBar: true, // Hiển thị thanh đếm thời gian
                  didClose: () => {
                    document.getElementById("formData").reset();
                    document.getElementById("memberListDisplay").innerHTML = "";
                    members = [];
                    location.reload();
                  }
                })
              }
            })
            .catch((error) => {
              console.error("Lỗi:", error);
              alert("Có lỗi xảy ra: " + error.message);
            });
        });
    </script>
    <!-- gợi ý tên -->
    <script>
      const input = document.getElementById('giangVien');
      const suggestionsContainer = document.getElementById('giangVien-suggestions');

      // Xử lý sự kiện khi người dùng nhập dữ liệu
      input.addEventListener('input', () => {
        const query = input.value.toLowerCase();
        suggestionsContainer.innerHTML = '';

        if (query) {
          // Lọc các đối tượng có HoTen chứa chuỗi nhập vào
          const filteredItems = giangVienCoHuu.filter(item =>
            item.HoTen.toLowerCase().includes(query)
          );

          filteredItems.forEach(item => {
            const suggestion = document.createElement('div');
            suggestion.textContent = item.HoTen;
            suggestion.classList.add('suggestion-item');

            // Khi nhấp vào gợi ý, điền tên vào ô input
            suggestion.addEventListener('click', () => {
              input.value = item.HoTen;
              suggestionsContainer.innerHTML = '';
            });

            suggestionsContainer.appendChild(suggestion);
          });
        }
      });

      // Ẩn gợi ý khi click bên ngoài ô input hoặc danh sách gợi ý
      document.addEventListener('click', (event) => {
        if (!suggestionsContainer.contains(event.target) && event.target !== input) {
          suggestionsContainer.innerHTML = '';
        }
      });

      // CSS cơ bản để hiển thị gợi ý (thêm vào trong trang)
      document.head.insertAdjacentHTML('beforeend', `
            <style>
                .suggestions-container {
                    border: 1px solid #ccc;
                    max-height: 150px;
                    overflow-y: auto;
                    background-color: #fff;
                    position: absolute;
                    z-index: 1000;
                    width: calc(100% - 2px);
                    box-shadow: 0 2px 5px rgba(0,0,0,0.2);
                }
                .suggestion-item {
                    padding: 8px;
                    cursor: pointer;
                }
                .suggestion-item:hover {
                    background-color: #f0f0f0;
                }
                .flex-item {
                    position: relative;
                }
            </style>
        `);
    </script>

    <!-- nckh tab chuyển tab -->
    <script src="/js/nckh/nckh.js"></script>
    <!-- link href -->
    <script src="/js/nckh/href.js"></script>
    <!-- srcipt năm học, khoa -->
    <script src="/js/nckh/getdata.js"></script>

</body>

</html>