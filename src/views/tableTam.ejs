<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <!-- SweetAlert2 CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css"
      rel="stylesheet"
    />
    <!-- SweetAlert2 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>
    <!-- link thư viện excel  -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.full.min.js"></script>
    <!-- Link thư viện tabulator -->
    <link
      href="https://unpkg.com/tabulator-tables/dist/css/tabulator.min.css"
      rel="stylesheet"
    />
    <script src="https://unpkg.com/tabulator-tables/dist/js/tabulator.min.js"></script>
    <style>
      .spinner-border {
        position: fixed;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        z-index: 1000;
      }

      .header-actions {
        display: flex;
        /* Flexbox container */
        flex-wrap: wrap;
        /* Wrap items if they don't fit in one line */
        align-items: center;
        /* Vertically center items */
        gap: 10px;
        /* Space between the elements */
        justify-content: space-between;
      }

      .right {
        margin-top: 20px;
      }

      .left {
        display: flex;
        align-items: center;
        /* Căn giữa theo chiều dọc */
        /* gap: 10px; */
        /* Khoảng cách giữa các phần tử */
      }

      .btn {
        height: 45px;
        margin-left: 5px;
      }

      /* cảnh báo khi thiếu dữ liệu */
      .warning-row {
        background-color: #ffe6e6;
        /* Màu nền cảnh báo nhạt */
        color: #ff0000;
        /* Màu chữ cảnh báo */
      }

      /* nút xuất file */
      /* Định dạng cho dropdown */
      #file-format-menu {
        background-color: white;
        border: 1px solid #ddd;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
        padding: 10px;
        transform: translateX(130%) translateY(80%);
      }

      .dropdown-item {
        padding: 8px 12px;
        cursor: pointer;
      }

      .dropdown-item:hover {
        background-color: #f8f9fa;
      }
    </style>
    <style>
      /* fixed header nhưng chưa được */
      .tabulator > .tabulator-header > .tabulator-col {
        position: sticky !important;
        top: 0 !important;
        z-index: 10000 !important;
      }

      /* phần header */
      .tabulator
        .tabulator-header
        .tabulator-col
        .tabulator-col-content
        .tabulator-col-title {
        /* Ghi đè với thư viện cho đẹp */
        padding: 10px 5px 0px 5px !important;

        text-align: center !important;
        /* Canh giữa văn bản */
        white-space: normal !important;
        /* Cho phép nội dung xuống dòng */
        word-wrap: break-word !important;
        /* Ngắt từ nếu cần */
        overflow: visible !important;
        /* Hiển thị hết nội dung, không cắt */
        word-break: break-word !important;
        /* Ngắt từ dài thành dòng mới */
      }

      /* Đảm bảo bảng có chiều rộng 100% */
      #table-container {
        width: 100% !important;
        font-size: 12px !important;
        /* Thêm style cho bảng nếu cần */
      }

      /* Thay đổi chiều rộng của tiêu đề cột nếu cần */
      .tabulator-col .tabulator-sortable .tabulator-col-sorter-element {
        display: flex !important;
        flex-wrap: wrap !important;
      }
    </style>
  </head>

  <body>
    <!-- Phần header -->
    <%- include('header') %>

    <!-- Phần nội dung -->
    <div class="container-fluid my-4" style="padding-left: 0px">
      <div class="flex-grow-1">
        <div class="header-actions">
          <div class="left">
            <button
              class="btn text-nowrap"
              id="quychuandukien"
              style="width: max-content; margin-bottom: 0px; display: none"
            >
              Thêm file quy chuẩn
            </button>
            <button
              class="btn text-nowrap"
              id="export-file-btn"
              style="width: max-content; margin-bottom: 0px; display: none"
            >
              Xuất file
            </button>
            <button
              class="btn"
              id="ban-hanh"
              style="margin-bottom: 0px; display: none"
            >
              Ban Hành
            </button>
            <div
              id="file-format-menu"
              class="dropdown-menu"
              aria-labelledby="export-file-btn"
              style="display: none; position: absolute"
            >
              <button class="dropdown-item" onclick="exportToExcel()">
                Excel
              </button>
              <button class="dropdown-item" onclick="exportToWord()">
                Word
              </button>
            </div>
          </div>

          <div class="right" style="margin-top: 0px">
            <div class="loc d-flex align-items-center">
              <select class="selectop" id="combobox-dot" style="width: 70px">
                <option value="">Đợt</option>
              </select>
              <select class="selectop" id="comboboxki" style="width: 70px">
                <option value="">Kì</option>
              </select>
              <select class="selectop" id="NamHoc">
                <option value="">Chọn năm học</option>
              </select>
              <select class="selectop" id="MaPhongBan">
                <option value="ALL">Tất cả khoa</option>
              </select>
              <button
                onclick="getDataTable()"
                class="btn text-nowrap"
                id="render"
                style="margin-top: 17px"
              >
                Hiển thị
              </button>
            </div>
          </div>
        </div>

        <div class="left">
          <button class="btn" id="xoa-qc-du-kien" style="display: none">
            Xóa bảng
          </button>
          <button
            class="btn"
            style="display: none"
            id="add-row-btn"
            onclick="addRow()"
          >
            Thêm dòng mới
          </button>
          <button
            class="btn"
            id="save-btn"
            style="display: none"
            onclick="updateDataInServer()"
          >
            Cập nhật
          </button>
        </div>
        <table class="table table-bordered">
          <div id="table-container"></div>
        </table>
      </div>
    </div>
    <!-- hiện các chức năng theo role của site qc dự kiến -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const isKhoa = localStorage.getItem("isKhoa");
        const role = localStorage.getItem("userRole");
        const MaPhongBan = localStorage.getItem("MaPhongBan");

        // hideButton2 ẩn các chức năng thêm sửa xóa
        unhideButton2(role, MaPhongBan);
      });

      function unhideButton2(role, MaPhongBan) {
        if (role == "Duyệt" && MaPhongBan == "DAOTAO") {
          const addBtn = document.getElementById("add-row-btn");
          const exportBtn = document.getElementById("export-file-btn");
          const saveBtn = document.getElementById("save-btn");
          const banHanhBtn = document.getElementById("ban-hanh");
          const toggleSiteBtn = document.getElementById("quychuandukien");
          const deleteQcdkBtn = document.getElementById("xoa-qc-du-kien");

          addBtn.style.display = "block"; //
          exportBtn.style.display = "block"; //
          saveBtn.style.display = "block";
          banHanhBtn.style.display = "block";
          toggleSiteBtn.style.display = "block";
          deleteQcdkBtn.style.display = "block";
        }
      }
    </script>
    <!-- phần xuất file -->
    <script>
      // renderData là biến var
      document
        .getElementById("export-file-btn")
        .addEventListener("click", function (event) {
          // Ngăn chặn lỗi
          if (Array.isArray(renderData) && renderData.length === 0) {
            alert("Không có dữ liệu"); // Hiển thị thông báo khi mảng rỗng
            return;
          }

          // Toggle menu hiển thị
          const menu = document.getElementById("file-format-menu");
          menu.style.display = menu.style.display === "none" ? "block" : "none";

          // Đảm bảo menu không bị ẩn khi click ra ngoài
          window.addEventListener("click", function (event) {
            if (
              !event.target.closest("#file-format-menu") &&
              !event.target.closest("#export-file-btn")
            ) {
              menu.style.display = "none";
            }
          });
        });

      const titleMap = {
        SoTinChi: "Số TC",
        LopHocPhan: "Lớp học phần",
        GiaoVien: "Giáo viên",
        SoTietCTDT: "Số tiết CTĐT",
        SoSinhVien: "Số SV",
        LL: "Số tiết lên lớp theo TKB",
        HeSoT7CN: "Hệ số lên lớp ngoài giờ HC/ Thạc sĩ/ Tiến sĩ",
        HeSoLopDong: "Hệ số lớp đông",
        QuyChuan: "Quy chuẩn",
      };

      async function exportToExcel() {
        const requestData = {
          renderData: renderData,
        };

        try {
          const response = await fetch("/qcdk-export-excel", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(requestData),
          });

          if (!response.ok) {
            throw new Error(`Failed to export: ${response.statusText}`);
          }

          const blob = await response.blob();
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = `file_quy_chuan_du_kien_hoc_ki_${renderData[0].Ki}_nam_hoc_${renderData[0].Nam}.xlsx`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);
        } catch (error) {
          console.error("Error exporting data:", error);
        }
      }

      function exportToWord() {
        // Mảng tiêu đề theo thứ tự mong muốn
        const orderedKeys = [
          "STT",
          "SoTinChi",
          "LopHocPhan",
          "GiaoVien",
          "SoTietCTDT",
          "SoSinhVien",
          "LL",
          "HeSoT7CN",
          "HeSoLopDong",
          "QuyChuan",
          "Khoa",
        ];

        // Map tiêu đề hiển thị
        const titleMap = {
          STT: "STT",
          SoTinChi: "Số TC",
          LopHocPhan: "Lớp học phần",
          GiaoVien: "Giáo Viên",
          SoTietCTDT: "Số tiết theo CTĐT",
          SoSinhVien: "Số SV",
          LL: "Số tiết lên lớp theo TKB",
          HeSoT7CN: "Hệ số lên lớp ngoài giờ HC/ Thạc sĩ/ Tiến sĩ",
          HeSoLopDong: "Hệ số lớp đông",
          QuyChuan: "QC",
          Khoa: "Khoa",
        };

        // Đặt STT và sắp xếp dữ liệu gửi
        const formattedData = renderData.map((item, index) => {
          const row = { TT: index + 1 }; // Thêm STT
          orderedKeys.forEach((key) => {
            if (key !== "TT") {
              row[key] = item[key] || ""; // Gán giá trị, nếu không có thì để trống
            }
          });
          return row;
        });

        // Gửi dữ liệu đến server
        fetch("/qcdk-export-word", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ data: formattedData, titleMap, orderedKeys }),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Lỗi xuất file");
            }
            return response.blob();
          })
          .then((blob) => {
            // Tải xuống file
            const url = window.URL.createObjectURL(blob);
            const link = document.createElement("a");
            link.href = url;
            link.download = `file_quy_chuan_du_kien_hoc_ki_${renderData[0].Ki}_nam_hoc_${renderData[0].Nam}.docx`;
            link.click();
          })
          .catch((error) => {
            console.error("Lỗi khi tải file:", error);
          });
      }
    </script>
    <!-- render bảng -->
    <script>
      var renderData = [];
      // Biến chung để chỉnh sửa bảng
      var localData = [];
      // Mảng khoa ( để validate bảng)
      var khoaArray = [];
      // Khởi tạo table
      var table;

      // Hàm getData từ sv
      async function getDataTable() {
        let Dot = document.getElementById("combobox-dot").value;
        let Ki = document.getElementById("comboboxki").value;
        let Nam = document.getElementById("NamHoc").value;
        let Khoa = document.getElementById("MaPhongBan").value;

        const body = {
          Khoa: Khoa,
          Dot: Dot,
          Ki: Ki,
          Nam: Nam,
        };

        try {
          const response = await fetch("/qcdk", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(body),
          });

          const rs = await response.json();

          if (!rs.success) {
            Swal.fire({
              title: "Thông báo",
              html: `${rs.message}`,
              icon: "info",
              confirmButtonText: "OK",
              width: "auto",
              padding: "20px",
              timer: 3000, // Tự động đóng sau 3 giây
              timerProgressBar: true, // Hiển thị thanh đếm thời gian
              didClose: () => {
                location.reload(); // Reload trang khi đóng
              },
            }).then((result) => {
              if (result.isDismissed || result.isConfirmed) {
                location.reload(); // Reload trang nếu bấm "OK" hoặc "X"
              }
            });

            return; // Dừng lại nếu có lỗi
          }

          renderData = rs.data; // Lưu dữ liệu vào biến renderData

          // Gọi hàm renderTable để hiển thị dữ liệu
          renderTable();
        } catch (error) {
          console.error("Error fetching data:", error);
          alert("Có lỗi xảy ra khi gọi API: " + error.message);
        }
      }

      // Hàm render bảng
      function renderTable() {
        const role = localStorage.getItem("userRole");
        const MaPhongBan = localStorage.getItem("MaPhongBan");

        const tableBody = document.getElementById("data-table-body");
        const tableHeader = document.getElementById("table-header");

        const headersMap = {
          Khoa: "Khoa",
          Dot: "Đợt",
          Ki: "Kì",
          Nam: "Năm",
          GiaoVien: "Giảng viên theo TKB",
          SoTinChi: "Số TC",
          LopHocPhan: "Lớp học phần",
          LL: "Số tiết LL",
          SoTietCTDT: "Số tiết TKB",
          HeSoT7CN: "Hệ số ngoài giờ",
          SoSinhVien: "Số SV",
          HeSoLopDong: "Hệ số lớp đông",
          QuyChuan: "Số tiết QC",
        };

        // Cột cho phép sort
        const sortableColumns = ["SoSinhVien"];

        // Cột cho phép lọc
        const filterTableColumns = ["LopHocPhan", "GiaoVien"];

        const columns = Object.keys(headersMap).map((key) => {
          const column = {
            headerFilterPlaceholder: "Tìm kiếm...", // Văn bản hiển thị trong ô
            headerFilter: filterTableColumns.includes(key) ? true : false, // Bật chức năng lọc cho tiêu đề cột
            title: headersMap[key] || key,
            field: key,
            hozAlign: "center",
            editor: false,
            headerSort: sortableColumns.includes(key) ? true : false,
          };

          // Đặt độ rộng cho các cột cụ thể
          if (key === "LopHocPhan" || key === "GiaoVien") {
            column.width = "18%";
          } else if (key === "Dot" || key === "Ki" || key === "SoTinChi") {
            column.width = "3%";
          } else if (key === "SoSinhVien") {
            column.width = "3%";
          }
          return column;
        });

        if (role === "Duyệt" && MaPhongBan == "DAOTAO") {
          columns.push({
            title: "Xóa",
            field: "actions",
            hozAlign: "center",
            headerSort: false,
            sortable: false,
            formatter: function (cell, formatterParams, onRendered) {
              const id = cell.getRow().getData().ID;
              return `<button onclick="deleteRow(${id})">Xóa</button>`;
            },
          });

          const nonEditableColumns = [
            "Khoa",
            "Dot",
            "Ki",
            "Nam",
            "HeSoLopDong",
          ]; // Danh sách cột không cho chỉnh sửa

          columns.forEach((col) => {
            col.editor = !nonEditableColumns.includes(col.field); // Chỉ chỉnh sửa nếu không nằm trong danh sách
          });
        } else {
          columns.forEach((col) => {
            col.editor = false; // Không cho phép chỉnh sửa
          });
        }

        if (table) {
          table.destroy();
        }

        // Lưu dữ liệu renderData vào localData khi bảng được render
        localData = JSON.parse(JSON.stringify(renderData));

        table = new Tabulator("#table-container", {
          data: localData,
          layout: "fitColumns",
          movableColumns: true,
          resizableColumns: true,
          columns: columns,
          index: "ID",
          renderVertical: "virtual", // Sử dụng render dọc Virtual DOM thay vì phân trang
          height: "550px", // Giới hạn chiều cao để virtual scroll hoạt động

          cellEdited: function (cell) {
            const editedData = cell.getData();
            const rowIndex = localData.findIndex(
              (row) => row.ID === editedData.ID
            );
            if (rowIndex !== -1) {
              localData[rowIndex] = editedData;
            }
          },
        });
      }

      // Hàm cập nhật
      function updateDataInServer() {
        // So sánh localData với renderData để tìm các thay đổi
        const changes = localData.filter((localRow) => {
          const renderRow = renderData.find(
            (renderRow) => renderRow.ID === localRow.ID
          );
          return JSON.stringify(localRow) !== JSON.stringify(renderRow); // So sánh dữ liệu giữa local và render
        });

        if (changes.length > 0) {
          const apiUrl = "/update-qcdk";

          fetch(apiUrl, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(changes),
          })
            .then((response) => response.json())
            .then((rs) => {
              if (rs.success) {
                Swal.fire({
                  title: "Thông báo",
                  html: `${rs.message}`,
                  icon: "success",
                  confirmButtonText: "OK",
                  width: "auto",
                  padding: "20px",
                  timer: 3000, // Tự động đóng sau 3 giây
                  timerProgressBar: true, // Hiển thị thanh đếm thời gian
                  didClose: () => {
                    getDataTable();
                    renderTable();
                  },
                });
              }
            })
            .catch((error) => {
              console.error("Có lỗi khi gửi dữ liệu lên server:", error);
            });
        } else {
          Swal.fire({
            title: "Thông báo",
            html: "Chưa có dữ liệu thay đổi",
            icon: "info",
            confirmButtonText: "OK",
            width: "auto",
            padding: "20px",
            timer: 3000, // Tự động đóng sau 3 giây
            timerProgressBar: true, // Hiển thị thanh đếm thời gian
          });
        }
      }

      // Hàm xóa dòng
      async function deleteRow(id) {
        if (confirm("Bạn có chắc chắn muốn xóa dòng này?")) {
          try {
            // Gửi yêu cầu DELETE tới API để xóa dòng
            const response = await fetch(`/delete-row/${id}`, {
              method: "DELETE", // Phương thức DELETE
              headers: {
                "Content-Type": "application/json", // Định dạng dữ liệu
              },
            });

            // Kiểm tra phản hồi từ server
            if (!response.ok) {
              throw new Error(`Xóa dòng thất bại: ${response.statusText}`);
            }

            // Xóa dòng trong dữ liệu cục bộ renderData
            localData = localData.filter((row) => row.ID !== id);

            // Cập nhật lại bảng Tabulator với dữ liệu mới
            table.replaceData(localData);

            // Thông báo thành công (tuỳ chọn)
          } catch (error) {
            console.error("Lỗi khi xóa dòng:", error);
            alert(`Có lỗi xảy ra khi xóa: ${error.message}`);
          }
        }
      }

      // Hàm thêm dòng
      async function addRow() {
        let Dot = document.getElementById("combobox-dot").value;
        let Ki = document.getElementById("comboboxki").value;
        let Nam = document.getElementById("NamHoc").value;
        let Khoa = document.getElementById("MaPhongBan").value;

        // Tạo đối tượng mới với dữ liệu mặc định
        const newRow = {
          Khoa: Khoa, // Chỉ cần gán trực tiếp giá trị của Khoa
          Dot: Dot, // Cập nhật giá trị của Dot
          Ki: Ki, // Cập nhật giá trị của Ki
          Nam: Nam, // Cập nhật giá trị của Nam
          GiaoVien: "",
          SoTinChi: 0,
          LopHocPhan: "",
          LL: 0,
          SoTietCTDT: 0,
          HeSoT7CN: 0,
          SoSinhVien: 0,
          HeSoLopDong: 0,
          QuyChuan: 0,
        };

        // Gửi dữ liệu lên server
        const response = await fetch("/add-row", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(newRow),
        });

        // Kiểm tra phản hồi từ server
        if (!response.ok) {
          console.error("Lỗi khi gửi dữ liệu lên server");
          return;
        }

        const result = await response.json();
        newRow.ID = result.ID; // Gán ID từ server

        // Lấy trang hiện tại
        let currentPage = table.getPage();

        // Thêm dòng mới vào đầu dữ liệu cục bộ (localData)
        localData.unshift(newRow);

        // Cập nhật lại dữ liệu trong Tabulator
        table.addRow(newRow, true); // `true` để thêm vào đầu trang hiện tại

        // Giữ nguyên trạng thái phân trang
        table.setPage(currentPage);
      }
    </script>
    <!-- phần xóa bảng quy chuẩn dự kiến -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        document
          .getElementById("xoa-qc-du-kien")
          .addEventListener("click", async function () {
            let Dot = document.getElementById("combobox-dot").value;
            let Ki = document.getElementById("comboboxki").value;
            let Nam = document.getElementById("NamHoc").value;
            let Khoa = document.getElementById("MaPhongBan").value;

            const body = {
              Khoa: Khoa,
              Dot: Dot,
              Ki: Ki,
              Nam: Nam,
            };

            // Hiển thị hộp thoại xác nhận
            const confirmation = confirm(
              `Xóa dữ liệu của Khoa ${Khoa} Đợt ${Dot} Kì ${Ki} Năm ${Nam}`
            );

            if (confirmation) {
              // Nếu người dùng chọn OK
              try {
                // Gọi tới API để xóa dữ liệu
                const response = await fetch("/xoa-qcdk", {
                  // Đường dẫn tới API của bạn
                  method: "POST", // Phương thức HTTP
                  headers: {
                    "Content-Type": "application/json", // Định dạng dữ liệu
                  },
                  body: JSON.stringify(body), // Gửi Khoa trong body
                });

                // Kiểm tra xem yêu cầu có thành công không
                if (response.ok) {
                  const result = await response.json(); // Chuyển đổi phản hồi sang JSON
                  Swal.fire({
                    title: "Thông báo",
                    html: result.message,
                    icon: "success",
                    confirmButtonText: "OK",
                    width: "auto", // Tự động điều chỉnh chiều rộng
                    padding: "20px", // Giữ khoảng cách cho nội dung
                  });
                  // location.reload();
                } else {
                  const errorData = await response.json(); // Lấy thông tin lỗi
                  Swal.fire({
                    title: "Thông báo",
                    html: `Lỗi: ${errorData.message}`,
                    icon: "error",
                    confirmButtonText: "OK",
                    width: "auto", // Tự động điều chỉnh chiều rộng
                    padding: "20px", // Giữ khoảng cách cho nội dung
                  });
                }
              } catch (error) {
                console.error("Đã xảy ra lỗi:", error);
                Swal.fire({
                  title: "Thông báo",
                  html: "Đã xảy ra lỗi khi gọi API",
                  icon: "error",
                  confirmButtonText: "OK",
                  width: "auto", // Tự động điều chỉnh chiều rộng
                  padding: "20px", // Giữ khoảng cách cho nội dung
                });
              }
            } else {
              // Nếu người dùng chọn Cancel
              // alert('Đã hủy yêu cầu xóa dữ liệu.'); // Thông báo đã hủy
            }
          });
      });
    </script>
    <!-- phần ban hành -->
    <script>
      let dataQC = [];

      // Hàm fetch lần đầu để lấy dữ liệu từ server
      async function fetchData() {
        // Lấy giá trị từ các phần tử đầu vào và kiểm tra xem có tồn tại hay không
        let Dot = document.getElementById("combobox-dot")?.value;
        let Ki = document.getElementById("comboboxki")?.value;
        let Nam = document.getElementById("NamHoc")?.value;
        let Khoa = document.getElementById("MaPhongBan")?.value;

        // Kiểm tra nếu có phần tử nào chưa được chọn
        if (!Dot || !Ki || !Nam || !Khoa) {
          alert("Vui lòng điền đầy đủ các thông tin cần thiết.");
          return;
        }

        const body = {
          Khoa: Khoa,
          Dot: Dot,
          Ki: Ki,
          Nam: Nam,
        };

        try {
          const response = await fetch("/qcdk", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(body),
          });

          // Kiểm tra phản hồi từ server
          if (!response.ok) {
            throw new Error("Lấy dữ liệu thất bại");
          }

          const rs = await response.json();
          dataQC = rs.data; // Lưu dữ liệu vào dataQC
        } catch (error) {
          console.error("Error:", error);
          alert("Lấy dữ liệu thất bại! Vui lòng kiểm tra lại kết nối.");
        }
      }

      // Hàm xử lý sự kiện khi người dùng nhấn nút "ban-hanh"
      document
        .getElementById("ban-hanh")
        .addEventListener("click", async function () {
          // Xác nhận lại hành động ban hành
          const confirmed = confirm("Bạn có chắc chắn muốn ban hành không?");
          if (!confirmed) {
            return; // Thoát nếu người dùng không đồng ý
          }

          // Gọi hàm fetchData để lấy dữ liệu từ server
          await fetchData();

          // Kiểm tra nếu dữ liệu không có gì để gửi
          if (!dataQC || dataQC.length === 0) {
            Swal.fire({
              title: "Thông báo",
              html: "Không có dữ liệu để ban hành",
              icon: "info",
              confirmButtonText: "OK",
              width: "auto", // Tự động điều chỉnh chiều rộng
              padding: "20px", // Giữ khoảng cách cho nội dung
            });
            return;
          }

          try {
            const response = await fetch("/ban-hanh", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(dataQC),
            });

            const result = await response.json();

            if (result.success) {
              // Lấy dữ liệu từ các ô chọn
              let Dot = document.getElementById("combobox-dot").value;
              let Ki = document.getElementById("comboboxki").value;
              let Nam = document.getElementById("NamHoc").value;
              let Khoa = document.getElementById("MaPhongBan").value;

              const body = { Khoa, Dot, Ki, Nam };

              // Gọi API xóa dữ liệu
              fetch("/xoa-qcdk", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(body),
              })
                .then((response) => response.json())
                .then((deleteResult) => {
                  if (deleteResult.success) {
                    console.log("Dữ liệu đã được xóa thành công!");
                  } else {
                    console.error("Lỗi xóa dữ liệu:", deleteResult.message);
                  }
                })
                .catch((error) => console.error("Lỗi khi gọi API xóa:", error));

              // Hiển thị thông báo ban hành thành công
              Swal.fire({
                title: "Thông báo",
                html: result.message,
                icon: "success",
                confirmButtonText: "OK",
                width: "auto",
                padding: "20px",
                timer: 3000, // Thời gian hiển thị (ms), ở đây là 3 giây
                timerProgressBar: true, // Hiển thị thanh tiến trình
                didClose: () => {
                  location.reload(); // Reload trang khi alert đóng
                },
              });
            } else {
              // Hiển thị thông báo ban hành thất bại
              Swal.fire({
                title: "Thông báo",
                html: result.message,
                icon: "error",
                confirmButtonText: "OK",
                width: "auto",
                padding: "20px",
              });
            }
          } catch (error) {
            console.error("Error:", error);
            Swal.fire({
              title: "Thông báo",
              html: "Gửi dữ liệu thất bại! Vui lòng thử lại.",
              icon: "success",
              confirmButtonText: "OK",
              width: "auto", // Tự động điều chỉnh chiều rộng
              padding: "20px", // Giữ khoảng cách cho nội dung
            });
          }
        });
    </script>
    <!-- link các site -->
    <script src="/js/moigiang/href.js"></script>
    <!-- năm học, khoa -->
    <script src="/js/moigiang/getdata.js"></script>
    <!-- ẩn các nút theo role -->
    <script src="/js/moigiang/hideBtn.js"></script>
  </body>
</html>
