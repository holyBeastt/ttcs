<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
  <style>
    /* Định dạng cho bảng */
    .table {
        width: 70%;
        border-collapse: separate;
        border-spacing: 0;
        margin-top: 20px;
        font-size: 0.9em;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        border-radius: 8px;
        overflow: hidden;
        justify-self: center;
    }

    .table th,
    .table td {
        padding: 10px;
        text-align: left;
        border: 1px solid #dee2e6;
        border-right: 2px solid #dee2e6;
        border-left: 2px solid #dee2e6;
    }

    .table th {
        background-color: blue;
        color: white;
        font-weight: bold;
        border-right: 2px solid #fff;
    }

    .table th:last-child {
        border-right: 2px solid #dee2e6;
    }

    .table tbody tr {
        border-bottom: 1px solid #dddddd;
        transition: all 0.3s ease;
    }

    .table tbody tr:nth-child(even) {
        background-color: #f3f3f3;
    }

    .table tbody tr:last-of-type {
        border-bottom: 2px solid #009879;
    }

    .table tbody tr:hover {
        background-color: #f5f5f5;
        transform: scale(1.01);
    }

    /* Định dạng cho biểu đồ */
    #thongkemgCanvas {
        width: 80%;
        max-width: 1200px;
        height: 400px;
        margin: 30px auto;
        padding: 20px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    /* Định dạng cho tiêu đề */
    h3 {
        color: #009879;
        text-align: center;
        margin: 30px 0;
        font-weight: 600;
        position: relative;
        padding-bottom: 10px;
    }

    h3:after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 100px;
        height: 3px;
        background: #009879;
    }

    /* Định dạng cho tổng số tiết */
    .total-label {
        background: #f8f9fa;
        padding: 15px 20px;
        border-radius: 8px;
        margin: 20px auto;
        width: fit-content;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-weight: bold;
        color: #009879;
    }

    .value {
        color: #dc3545;
        font-size: 1.1em;
        margin-left: 5px;
    }

    /* Container cho các controls */
    .controls-container {
        display: flex;
        justify-content: start;
        align-items: center;
        gap: 10px;
        margin: 20px;
        flex-wrap: wrap;
    }

    /* Responsive design */
    @media (max-width: 768px) {
        #thongkemgCanvas {
            width: 95%;
            height: 300px;
        }

        .table {
            font-size: 0.8em;
        }
    }

    /* Thêm container cho 2 biểu đồ tất cả khoa */
    .charts-container {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        margin: 20px 0;
    }

    .chart-wrapper {
        width: 48%;
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 15px;
    }

    .total-labels-container {
        display: flex;
        justify-content: space-around;
        margin: 20px 0;
    }
  </style>
</head>

<body>
  <!-- Phần header -->
  <%- include('header') %>

  <!-- Phần nội dung -->
   
  <div class="container-fluid box m-4  "></div>
    <div class="mx-5 flex-grow-1">
        <!-- Nút chuyển đổi -->
        <div class="d-flex justify-content-start align-items-center mb-3">
            <div class="btn-group me-3" role="group" aria-label="Toggle statistics">
                <button id="toggleKhoa" class="btn btn-primary active">
                    <i class="bi bi-building"></i> Thống kê theo Khoa
                </button>
                <button id="toggleHeDaoTao" class="btn btn-outline-primary">
                    <i class="bi bi-mortarboard"></i> Thống kê theo Hệ đào tạo
                </button>
            </div>
        </div>
        <div class="d-flex justify-content-start align-items-end mb-3">
            <!-- Combo box Năm -->
            <select class="form-select mx-1 selectop" style="width: 170px;" id="NamHoc">
                <option value="ALL">Tất cả năm</option>
            </select>
            <!-- Combo box Khoa -->
            <select class="form-select mx-1 selectop" style="width: 150px;" id="Khoa">
                <option value="ALL">Tất cả khoa</option>
            </select>
            <!-- Combo box Hệ đào tạo (ẩn mặc định) -->
            <select class="form-select mx-1 selectop" id="HeDaoTao" style="width: fit-content; display: none;">
                <option value="ALL">Tất cả hệ</option>
            </select>
        </div>
      <div class="overflow-auto">
        <table class="table table-bordered">
          <thead>
            <tr id="table-header"></tr>
          </thead>
          <tbody id="data-table-body"></tbody>
        </table>
      </div>
    </div>
  </div>
  <!-- Biểu đồ và bảng -->
  <div id="chart-section">
    <div id="khoa-chart-container" style="display: none;">
        <canvas id="khoaChart"></canvas>
    </div>
    <div class="charts-container" id="all-khoa-charts" style="display: none;">
        <div class="chart-wrapper">
            <canvas id="pieChart"></canvas>
        </div>
        <div class="chart-wrapper">
            <canvas id="barChart"></canvas>
        </div>
    </div>
</div>

  <h3>Bảng chi tiết số tiết vượt giờ</h3>
  <div class="total-labels-container">
      <div class="total-label">
          <label>Số tiết tính vượt giờ: <span class="value" id="totalSoTietGiangDay">0</span></label>
        </div>
        <div class="total-label" id="totalSTPHTContainer">
            <label>Số tiết phải hoàn thành: <span class="value" id="totalSTPHT">0</span></label>
        </div>
        <div class="total-label" id="totalSTMGContainer">
            <label>Số tiết miễn giảm: <span class="value" id="totalSTMG">0</span></label>
        </div>
        <div class="total-label">
            <label>Tổng số tiết vượt giờ (được thanh toán): <span class="value" id="total">0</span></label>
        </div>
</div>
  <table class="table table-bordered my-2" id="thongkevuotgioTable">
      <thead>
          <tr>
              <th>STT</th>
              <th>Họ tên</th>
              <th>Tổng số tiết</th>
              <th>Số tiết phải hoàn thành</th>
              <th>Số tiết miễn giảm</th>
              <th>Số tiết vượt giờ</th>
          </tr>
      </thead>
      <tbody id="tableBody">
          <!-- Dữ liệu bảng sẽ được chèn vào đây -->
      </tbody>
  </table>
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  

<script>
$(document).ready(function () {
    let currentType = "khoa"; // "khoa" hoặc "hedaotao"

    // Hàm lấy danh sách hệ đào tạo
    function loadHeDaoTaoCombobox(selectedValue = "ALL", callback) {
        $('#HeDaoTao').empty();
        $.ajax({
            url: '/getHeDaoTaoVG',
            method: 'GET',
            success: function (response) {
                if (response.success) {
                    $('#HeDaoTao').append('<option value="ALL">Tất cả hệ</option>');
                    response.HeDaoTao.forEach(function (item) {
                        $('#HeDaoTao').append(
                            `<option value="${item.HeDaoTao}">${item.HeDaoTao}</option>`
                        );
                    });
                    $('#HeDaoTao').val(selectedValue);
                    if (typeof callback === 'function') callback();
                }
            }
        });
    }

    // Sửa lại sự kiện chuyển đổi
    document.getElementById("toggleKhoa").onclick = function () {
        currentType = "khoa";
        this.classList.add("active");
        document.getElementById("toggleHeDaoTao").classList.remove("active");
        $('#Khoa').show();
        $('#HeDaoTao').hide();
        fetchThongkevuotgioData();
    };

    document.getElementById("toggleHeDaoTao").onclick = function () {
        currentType = "hedaotao";
        this.classList.add("active");
        document.getElementById("toggleKhoa").classList.remove("active");
        $('#Khoa').hide();
        $('#HeDaoTao').show();
        loadHeDaoTaoCombobox('ALL', function() {
            document.getElementById('HeDaoTao').value = 'ALL';
            fetchThongkevuotgioData();
        });
    };

    // Sửa fetchThongkevuotgioData để lấy đúng giá trị lọc
    async function fetchThongkevuotgioData() {
        try {
            const nam = document.getElementById('NamHoc').value;
            let khoa = "";
            let hedaotao = "";

            if (currentType === "khoa") {
                khoa = document.getElementById('Khoa').value;
            } else {
                hedaotao = document.getElementById('HeDaoTao').value;
            }

            let url = '/api/thongkevuotgio-data';
            const params = new URLSearchParams();

            if (nam && nam !== 'ALL') params.append('namhoc', nam);
            if (currentType === "khoa" && khoa) params.append('khoa', khoa);
            if (currentType === "hedaotao" && hedaotao) params.append('hedaotao', hedaotao);
            params.append('type', currentType);

            if (params.toString()) {
                url += '?' + params.toString();
            }

            console.log('Requesting URL:', url);

            const response = await fetch(url);
            const data = await response.json();

            // Cập nhật bảng
            const tableBody = document.getElementById('tableBody');
            if (!tableBody) {
                console.error('Không tìm thấy element tableBody');
                return;
            }

            // Xóa dữ liệu cũ
            tableBody.innerHTML = '';

            if (!data || data.length === 0) {
                console.log('Không có dữ liệu');
                const row = tableBody.insertRow();
                const cell = row.insertCell(0);
                cell.style.textAlign = 'center';
                cell.textContent = 'Không có dữ liệu cho khoảng thời gian này';

                // Ẩn biểu đồ và cập nhật tổng số tiết
                document.getElementById('total').textContent = '0';
                document.getElementById('khoa-chart-container').style.display = 'none';
                document.getElementById('all-khoa-charts').style.display = 'none';
                return;
            }

            // Cập nhật header của bảng dựa vào chế độ thống kê
            const tableHeader = document.querySelector('#thongkevuotgioTable thead tr');
            if (tableHeader) {
                if (currentType === "khoa") {
                    if (khoa === 'ALL') {
                        tableHeader.innerHTML = `
                            <th>Khoa</th>
                            <th>Số tiết tính vượt giờ</th>
                            <th>Số tiết vượt giờ(được thanh toán)</th>
                            <th>Số lượng giảng viên</th>
                        `;
                    } else {
                        tableHeader.innerHTML = `
                            <th>STT</th>
                            <th>Họ tên</th>
                            <th>Số tiết tính vượt giờ</th>
                            <th>Số tiết phải hoàn thành</th>
                            <th>Số tiết miễn giảm</th>
                            <th>Số tiết vượt giờ(được thanh toán)</th>
                        `;
                    }
                } else if (currentType === "hedaotao") {
                    if (hedaotao === 'ALL') {
                        tableHeader.innerHTML = `
                            <th>Hệ đào tạo</th>
                            <th>Số tiết tính vượt giờ</th>
                            <th>Số tiết vượt giờ(được thanh toán)</th>
                            <th>Số lượng giảng viên</th>
                        `;
                    } else {
                        tableHeader.innerHTML = `
                            <th>STT</th>
                            <th>Họ tên</th>
                            <th>Học vị</th>
                            <th>Số tiết tính vượt giờ</th>
                            <th>Số tiết phải hoàn thành</th>
                            <th>Số tiết miễn giảm</th>
                            <th>Số tiết vượt giờ(được thanh toán)</th>
                        `;
                    }
                }
            }



            // Cập nhật tổng số tiết
            const total = data.reduce((sum, item) => sum + parseFloat(item.SoTietVuotGio || 0), 0);
            document.getElementById('total').textContent = total.toFixed(2);

            // Cập nhật tổng số tiết giảng dạy
            let totalSoTietGiangDay;
            if (currentType === "khoa" && khoa === 'ALL') {
                totalSoTietGiangDay = data.reduce((sum, item) => sum + parseFloat(item.TongSoTietall || 0), 0);
            } else {
                totalSoTietGiangDay = data.reduce((sum, item) => sum + parseFloat(item.TongSoTiet || 0), 0);
            }
            document.getElementById('totalSoTietGiangDay').textContent = totalSoTietGiangDay.toFixed(2);

            // Cập nhật số tiết phải hoàn thành và miễn giảm
            if (currentType === "khoa" && khoa !== 'ALL' || currentType === "hedaotao" && hedaotao !== 'ALL') {
                const totalSTPHT = data.reduce((sum, item) => sum + (item.STPHT ? parseFloat(item.STPHT) : 0), 0);
                document.getElementById('totalSTPHT').textContent = totalSTPHT.toFixed(2);
                document.getElementById('totalSTPHTContainer').style.display = 'block';

                const totalSTMG = data.reduce((sum, item) => sum + (item.STPHT ? parseFloat(300-item.STPHT) : 0), 0);
                document.getElementById('totalSTMG').textContent = totalSTMG.toFixed(2);
                document.getElementById('totalSTMGContainer').style.display = 'block';
            } else {
                document.getElementById('totalSTPHTContainer').style.display = 'none';
                document.getElementById('totalSTMGContainer').style.display = 'none';
            }

            // Thêm dữ liệu mới vào bảng
            data.forEach((item, index) => {
                const row = tableBody.insertRow();
                let cellIdx = 0;

                if (currentType === "khoa") {
                    if (khoa === 'ALL') {
                        row.insertCell(cellIdx++).textContent = item.Khoa || "";
                        
                        // Tính phần trăm cho số tiết tính vượt giờ
                        const percentageSoTiet = totalSoTietGiangDay > 0 ? ((parseFloat(item.TongSoTietall || 0) / totalSoTietGiangDay) * 100).toFixed(1) : 0;
                        row.insertCell(cellIdx++).textContent = `${parseFloat(item.TongSoTietall || 0).toFixed(2)} (${percentageSoTiet}%)`;
                        
                        // Tính phần trăm cho số tiết vượt giờ
                        const percentageVuotGio = total > 0 ? ((parseFloat(item.SoTietVuotGio || 0) / total) * 100).toFixed(1) : 0;
                        row.insertCell(cellIdx++).textContent = `${parseFloat(item.SoTietVuotGio || 0).toFixed(2)} (${percentageVuotGio}%)`;
                        
                        row.insertCell(cellIdx++).textContent = item.SoLuongGiangVien || "";
                    } else {
                        row.insertCell(cellIdx++).textContent = index + 1;
                        row.insertCell(cellIdx++).textContent = item.GiangVien || "";
                        
                        // Tính phần trăm cho tổng số tiết
                        const percentageSoTiet = totalSoTietGiangDay > 0 ? ((parseFloat(item.TongSoTiet || 0) / totalSoTietGiangDay) * 100).toFixed(1) : 0;
                        row.insertCell(cellIdx++).textContent = `${parseFloat(item.TongSoTiet || 0).toFixed(2)} (${percentageSoTiet}%)`;
                        
                        row.insertCell(cellIdx++).textContent = parseFloat(item.STPHT || 0).toFixed(2);
                        row.insertCell(cellIdx++).textContent = parseFloat((300 - item.STPHT) || 0).toFixed(2);
                        
                        // Tính phần trăm cho số tiết vượt giờ
                        const percentageVuotGio = total > 0 ? ((parseFloat(item.SoTietVuotGio || 0) / total) * 100).toFixed(1) : 0;
                        row.insertCell(cellIdx++).textContent = `${parseFloat(item.SoTietVuotGio || 0).toFixed(2)} (${percentageVuotGio}%)`;
                    }
                } else if (currentType === "hedaotao") {
                    if (hedaotao === 'ALL') {
                        row.insertCell(cellIdx++).textContent = item.HeDaoTao || "";
                        
                        // Tính phần trăm cho tổng số tiết
                        const percentageSoTiet = totalSoTietGiangDay > 0 ? ((parseFloat(item.TongSoTiet || 0) / totalSoTietGiangDay) * 100).toFixed(1) : 0;
                        row.insertCell(cellIdx++).textContent = `${parseFloat(item.TongSoTiet || 0).toFixed(2)} (${percentageSoTiet}%)`;
                        
                        // Tính phần trăm cho số tiết vượt giờ
                        const percentageVuotGio = total > 0 ? ((parseFloat(item.SoTietVuotGio || 0) / total) * 100).toFixed(1) : 0;
                        row.insertCell(cellIdx++).textContent = `${parseFloat(item.SoTietVuotGio || 0).toFixed(2)} (${percentageVuotGio}%)`;
                        
                        row.insertCell(cellIdx++).textContent = item.SoLuongGiangVien || "";
                    } else {
                        row.insertCell(cellIdx++).textContent = index + 1;
                        row.insertCell(cellIdx++).textContent = item.GiangVien || "";
                        row.insertCell(cellIdx++).textContent = item.HocVi || "";
                        
                        // Tính phần trăm cho tổng số tiết
                        const percentageSoTiet = totalSoTietGiangDay > 0 ? ((parseFloat(item.TongSoTiet || 0) / totalSoTietGiangDay) * 100).toFixed(1) : 0;
                        row.insertCell(cellIdx++).textContent = `${parseFloat(item.TongSoTiet || 0).toFixed(2)} (${percentageSoTiet}%)`;
                        
                        row.insertCell(cellIdx++).textContent = parseFloat(item.STPHT || 0).toFixed(2);
                        row.insertCell(cellIdx++).textContent = parseFloat((300 - item.STPHT) || 0).toFixed(2);
                        
                        // Tính phần trăm cho số tiết vượt giờ
                        const percentageVuotGio = total > 0 ? ((parseFloat(item.SoTietVuotGio || 0) / total) * 100).toFixed(1) : 0;
                        row.insertCell(cellIdx++).textContent = `${parseFloat(item.SoTietVuotGio || 0).toFixed(2)} (${percentageVuotGio}%)`;
                    }
                }
            });

            // Cập nhật biểu đồ
            updateCharts(data, currentType, khoa, hedaotao);

        } catch (error) {
            console.error('Error in fetchThongkevuotgioData:', error);
            const tableBody = document.getElementById('tableBody');
            if (tableBody) {
                tableBody.innerHTML = `
                    <tr>
                        <td colspan="6" style="text-align: center; color: red;">
                            Đã xảy ra lỗi khi tải dữ liệu: ${error.message}
                        </td>
                    </tr>
                `;
            }
        }
    }

    // Cập nhật hàm updateCharts để hỗ trợ cả hai chế độ
    function updateCharts(data, type, khoa, hedaotao) {
        try {
            // Map lại dữ liệu: nếu có TongSoTietall thì gán vào TongSoTiet để vẽ biểu đồ như thongkemg
            const chartData = data.map(item => {
                if (item.TongSoTietall !== undefined) {
                    return { ...item, TongSoTiet: item.TongSoTietall };
                }
                return item;
            });
            // Luôn hiển thị biểu đồ, kể cả khi chọn từng khoa
            if ((type === "khoa" && khoa === 'ALL') || (type === "hedaotao" && hedaotao === 'ALL')) {
                document.getElementById('khoa-chart-container').style.display = 'none';
                document.getElementById('all-khoa-charts').style.display = 'flex';

                // Vẽ biểu đồ tròn
                const ctxPie = document.getElementById('pieChart');
                if (window.pieChart instanceof Chart) {
                    window.pieChart.destroy();
                }

                const totalHours = chartData.reduce((sum, item) => sum + parseFloat(item.TongSoTiet || 0), 0);
                if (chartData.length === 0 || totalHours === 0) {
                    $('#pieChart').hide();
                    $('#barChart').hide();
                    return;
                } else {
                    $('#pieChart').show();
                    $('#barChart').show();
                }

                window.pieChart = new Chart(ctxPie, {
                    type: 'pie',
                    data: {
                        labels: chartData.map(item => type === "hedaotao" ? item.HeDaoTao : item.Khoa),
                        datasets: [{
                            data: chartData.map(item => parseFloat(item.TongSoTiet || 0)),
                            backgroundColor: [
                                '#FF6384', '#36A2EB', '#FFCE56',
                                '#4BC0C0', '#9966FF', '#FF9F40'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        aspectRatio: 1.5,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    generateLabels: function(chart) {
                                        const data = chart.data;
                                        if (data.labels.length && data.datasets.length) {
                                            return data.labels.map((label, i) => {
                                                const value = data.datasets[0].data[i];
                                                const percentage = ((value / totalHours) * 100).toFixed(1);
                                                return {
                                                    text: `${label} (${percentage}%)`,
                                                    fillStyle: data.datasets[0].backgroundColor[i],
                                                    hidden: isNaN(value) || value === 0,
                                                    index: i
                                                };
                                            });
                                        }
                                        return [];
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const value = context.raw;
                                        const percentage = ((value / totalHours) * 100).toFixed(1);
                                        return `${context.label}: ${value} tiết (${percentage}%)`;
                                    }
                                }
                            },
                            title: {
                                display: true,
                                text: type === "hedaotao" ? 'Phân bố số tiết theo hệ đào tạo' : 'Phân bố số tiết theo khoa'
                            }
                        }
                    }
                });

                // Vẽ biểu đồ cột
                const ctxBar = document.getElementById('barChart');
                if (window.barChart instanceof Chart) {
                    window.barChart.destroy();
                }

                window.barChart = new Chart(ctxBar, {
                    type: 'bar',
                    data: {
                        labels: chartData.map(item => type === "hedaotao" ? item.HeDaoTao : item.Khoa),
                        datasets: [{
                            label: 'Số tiết vượt giờ',
                            data: chartData.map(item => parseFloat(item.SoTietVuotGio || 0)),
                            backgroundColor: 'rgba(54, 162, 235, 0.5)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        aspectRatio: 1.5,
                        plugins: {
                            title: {
                                display: true,
                                text: type === "hedaotao" ? 'Số tiết vượt giờ theo hệ đào tạo' : 'Số tiết vượt giờ theo khoa'
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            } else {
                document.getElementById('khoa-chart-container').style.display = 'block';
                document.getElementById('all-khoa-charts').style.display = 'none';
                const ctxKhoa = document.getElementById('khoaChart');
                if (window.khoaChart instanceof Chart) {
                    window.khoaChart.destroy();
                }
                window.khoaChart = new Chart(ctxKhoa, {
                    type: 'bar',
                    data: {
                        labels: data.map(item => item.GiangVien),
                        datasets: [{
                            label: 'Số tiết vượt giờ',
                            data: data.map(item => parseFloat(item.SoTietVuotGio || 0)),
                            backgroundColor: 'blue',
                            borderColor: 'black',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        aspectRatio: 2,
                        plugins: {
                            title: {
                                display: true,
                                text: 'Số tiết vượt giờ của giảng viên'
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        } catch (error) {
            console.error('Error in updateCharts:', error);
        }
    }

    // Thêm event listeners
    document.getElementById('NamHoc').addEventListener('change', fetchThongkevuotgioData);
    document.getElementById('Khoa').addEventListener('change', fetchThongkevuotgioData);
    document.getElementById('HeDaoTao').addEventListener('change', fetchThongkevuotgioData);

    // Lấy danh sách năm học
    $.ajax({
        url: '/getNamHocVG',
        method: 'GET',
        success: function (response) {
            if (response.success) {
                $('#NamHoc').empty();
                response.NamHoc.forEach(function (item) {
                    $('#NamHoc').append(
                        `<option value="${item.NamHoc}">${item.NamHoc === "ALL" ? "Tất cả năm" : item.NamHoc}</option>`
                    );
                });
                // Đặt giá trị mặc định là năm lớn nhất nếu có
                if (response.MaxNamHoc) {
                    $('#NamHoc').val(response.MaxNamHoc).trigger('change');
                }
            }
        }
    });

    // Lấy danh sách khoa
    $.ajax({
        url: '/getPhongBanVG',
        method: 'GET',
        success: function (response) {
            if (response.success) {
                $('#Khoa').empty();
                $('#Khoa').append('<option value="ALL">Tất cả khoa</option>');
                response.MaPhongBan.forEach(function (item) {
                    if(item.MaPhongBan && item.MaPhongBan !== 'ALL') {
                        $('#Khoa').append(
                            `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                        );
                    }
                });
            }
        }
    });

    fetchThongkevuotgioData();
});
</script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const role = localStorage.getItem("userRole");

    // Ẩn button ngay khi trang được tải
    const actionButton = document.getElementById('changeMessage');
    //Ẩn site thêm thông báo
    if (role === APP_ROLES.lanhDao_khoa || role === APP_ROLES.troLy_phong || role === APP_ROLES.lanhDao_phong) {
      actionButton.style.display = '';
    } else {
      actionButton.style.display = 'none';
    }
  });
</script>
<script>
  document.getElementById("changeMessage").addEventListener("click", function(event) {
    event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
    const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

    if (MaPhongBan) {
        // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
        window.location.href = `/changeMessage/${MaPhongBan}`;
    } else {
        alert("Không tìm thấy MaPhongBan trong localStorage.");
    }
  });
</script>

<script>
document.addEventListener("DOMContentLoaded", () => {
    const role = localStorage.getItem("userRole");
    const isKhoa = localStorage.getItem("isKhoa");
    
    // Ẩn button ngay khi trang được tải
    const actionButton = document.getElementById('changeMessage');
    //Ẩn site thêm thông báo
    if (role === APP_ROLES.troLy_phong || role === APP_ROLES.lanhDao_phong) {
        actionButton.style.display = '';
    } else {
        actionButton.style.display = 'none';
    }
});
</script>

<script>
document.getElementById("changeMessage").addEventListener("click", function(event) {
    event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
    const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

    if (MaPhongBan) {
        // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
        window.location.href = `/changeMessage/${MaPhongBan}`;
    } else {
        alert("Không tìm thấy MaPhongBan trong localStorage.");
    }
});
</script>

<script>
document.getElementById("changePasswordLink").addEventListener("click", function(event) {
    event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
    const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage

    if (tenDangNhap) {
        // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
        window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(tenDangNhap)}`;
    } else {
        alert("Không tìm thấy TenDangNhap trong localStorage.");
    }
});
</script>

<script>
document.getElementById("infome").addEventListener("click", function(event) {
    event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
    const id_User = localStorage.getItem("id_User"); // Lấy id_User từ localStorage
    if (id_User) {
        // Chuyển hướng đến trang infome và truyền id_User trong URL
        window.location.href = `/infome/${id_User}`;
    } else {
        alert("Không tìm thấy id_User trong localStorage.");
    }
});
 // Thêm sự kiện click cho phần tử có id="Home"

 const Home = document.getElementById("Home");

Home.addEventListener("click", function (event) {
event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

const isKhoa = localStorage.getItem("isKhoa");

if (isKhoa == 0) {
// Nếu là đào tạo hoặc tài chính
window.location.href = "/maindt";
} else {
window.location.href = "/mainkhoa";
}
});
</script>
</body>
</html>
