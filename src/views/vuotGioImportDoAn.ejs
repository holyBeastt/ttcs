<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Học Viện Kỹ Thuật Mật Mã</title>
  <link rel="stylesheet" href="/css/table.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="/css/import.css" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" />
</head>
<style>
  .btn {
    height: 45px;
    margin-bottom: 0px;
    text-wrap: nowrap;
  }

  /* Css phần suggestion */
  .suggestions {
    position: absolute;
    /* Đảm bảo gợi ý nằm bên trên các thành phần khác */
    top: calc(100% + 5px);
    /* Đặt gợi ý phía trên input với một khoảng cách */
    font-size: 12px;
    left: 0;
    background-color: #f0f0f0;
    color: #000;
    border: 1px solid #ccc;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    /* Đảm bảo gợi ý nằm trên các thành phần khác */
    border-radius: 4px;
    max-height: 300px;
    overflow-y: auto;
  }

  /* Hiệu ứng lung linh khi hover */
  .suggestions:hover {
    background-color: #e0e0e0;
    /* Thay đổi màu nền khi hover */
    box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.2);
    /* Tăng độ bóng khi hover */
  }

  /* CSS cho từng mục gợi ý */
  .suggestion-item {
    padding: 8px 12px;
    /* Khoảng cách bên trong từng mục */
    cursor: pointer;
    /* Con trỏ chuột thay đổi khi hover */
    transition: background-color 0.2s ease;
    /* Tạo hiệu ứng chuyển đổi mượt mà khi hover */
  }

  /* Hiệu ứng khi người dùng di chuột vào mục gợi ý */
  .suggestion-item:hover {
    background-color: #f0f0f0;
    /* Màu nền khi hover */
  }

  /* Đặt lại một số thuộc tính khi input mất focus */
  input:focus+.suggestions {
    display: block;
    /* Đảm bảo khung hiển thị khi input được focus */
  }

  /* Đảm bảo container gợi ý không bị tràn ra ngoài khung nếu có */
  .suggestions {
    overflow: hidden;
  }

  /* Phần ngày bắt đầu, ngày kết thúc */
  .input-group-group {
    display: flex;
    align-items: center;
    gap: 16px;
    /* Khoảng cách giữa hai ô */
    width: fit-content;
    /* Chỉ chiếm không gian theo nội dung */
  }

  .input-group {
    display: flex;
    align-items: center;
    border: 1px solid #ccc;
    /* Đường viền */
    border-radius: 8px;
    /* Góc bo */
    padding: 5px;
    /* Khoảng cách trong */
    background-color: #42c2f5;
    /* Màu nền nhạt */
    width: 350px;
    /* Chiều rộng từng ô */
  }

  .input-group-text {
    font-weight: bold;
    background-color: transparent;
    /* Nền trong suốt */
    border: none;
    /* Loại bỏ viền */
  }

  .form-control {
    border: none;
    outline: none;
    /* Bỏ viền focus mặc định */
    width: 100%;
    /* Chiếm hết không gian còn lại */
  }
</style>

<body>
  <!-- Phần header -->
  <%- include('header') %>

    <!-- Phần nội dung -->

    <div class="container-fluid m-4 box d-flex justify-content-start">
      <div class="mx-2">
        <div class="d-flex align-items-center mb-3">
          <label for="fileInput" class="btn btn-primary"> Chọn File</label>
          <input type="file" id="fileInput" accept=".pdf, .docx, .xlsx" style="display: none" />

          <!-- Combo chọn đợt -->
          <select class="selectop w-100px mx-1" id="combobox-dot">
            <option value="">Đợt</option>
          </select>

          <!-- Combo box Năm -->
          <select class="selectop mx-1" id="NamHoc">
            <option value="">Chọn năm học</option>
          </select>

          <!-- Combo box với các giá trị CNTT, ATTT, DTVT -->
          <select class="selectop" id="MaPhongBan">
            <option value="">Khoa</option>
          </select>

          <button class="btn mx-2" id="import">Thêm</button>
        </div>

        <div class="input-group-group" style="display: flex; gap: 16px">
          <div class="input-group my-2" id="batdau">
            <label for="startDate" class="input-group-text">Ngày bắt đầu</label>
            <input required type="date" id="startDate" class="form-control" />
          </div>
          <div class="input-group my-2" id="ketthuc">
            <label for="endDate" class="input-group-text">Ngày kết thúc</label>
            <input required type="date" id="endDate" class="form-control" />
          </div>
        </div>

        <div id="renderInfo">
          <table class="text-center">
            <thead>
              <tr>
                <th style="width: 30px">TT</th>
                <th style="width: 200px">Sinh Viên</th>
                <th style="width: 100px">Mã SV</th>
                <th style="width: 400px">Tên đề tài</th>
                <th style="width: 200px">Giảng Viên Hướng Dẫn</th>
                <!-- <th style="width: 200px">Đơn vị công tác</th> -->
                <th style="width: 200px">Giảng Viên Hướng Dẫn 1</th>
                <th style="width: 200px">Giảng Viên Hướng Dẫn 2</th>
              </tr>
            </thead>
            <tbody id="tableBody">
              <tr>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td></td>
                <td id="ankhoa"></td>
              </tr>
            </tbody>
          </table>
        </div>

        <div id="action-modal" style="display: none">
          <div style="
              position: fixed;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: rgba(0, 0, 0, 0.6);
              display: flex;
              justify-content: center;
              align-items: center;
              z-index: 10000000000;
            ">
            <div style="
                background: #ffffff;
                padding: 25px;
                border-radius: 12px;
                max-width: 450px;
                width: 90%;
                text-align: center;
                box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.2);
              ">
              <p id="modal-message" style="font-size: 16px; color: #333; margin-bottom: 20px">
                Đây là nội dung của modal.
              </p>
              <button id="btn-delete" style="
                  background-color: #e74c3c;
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  margin: 5px;
                  border-radius: 6px;
                  cursor: pointer;
                  font-size: 14px;
                  transition: background-color 0.3s;
                " onmouseover="this.style.backgroundColor='#c0392b'" onmouseout="this.style.backgroundColor='#e74c3c'">
                Xóa
              </button>
              <button id="btn-append" style="
                  background-color: #3498db;
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  margin: 5px;
                  border-radius: 6px;
                  cursor: pointer;
                  font-size: 14px;
                  transition: background-color 0.3s;
                " onmouseover="this.style.backgroundColor='#2980b9'" onmouseout="this.style.backgroundColor='#3498db'">
                Chèn
              </button>
              <button id="btn-cancel" style="
                  background-color: #95a5a6;
                  color: white;
                  border: none;
                  padding: 10px 20px;
                  margin: 5px;
                  border-radius: 6px;
                  cursor: pointer;
                  font-size: 14px;
                  transition: background-color 0.3s;
                " onmouseover="this.style.backgroundColor='#7f8c8d'" onmouseout="this.style.backgroundColor='#95a5a6'">
                Hủy
              </button>
            </div>
          </div>
        </div>
        <div id="dataTableContainer" class="h-75"></div>
      </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Link script Sweet alert 2 -->
    <!-- SweetAlert2 CSS -->
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.min.css" rel="stylesheet" />

    <!-- SweetAlert2 JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.6.16/dist/sweetalert2.all.min.js"></script>

    <script>
      document.getElementById("viewtam").onclick = function () {
        window.location.href = "/tableTam"; // Thay URL bằng trang bạn muốn chuyển hướng đến
      };
    </script>

    <script>
      // Chọn file
      document
        .getElementById("fileInput")
        .addEventListener("change", function () {
          const formData = new FormData();
          formData.append("file", this.files[0]); // Lấy file từ input

          // Gửi file qua API
          fetch("/postImportDoAn", {
            method: "POST",
            body: formData,
          })
            .then((response) => {
              if (!response.ok) {
                throw new Error("Import PDF thất bại");
              }
              return response.json();
            })
            .then((data) => {
              if (data && data.content) {
                // Lấy danh sách giảng viên bị trùng và lưu và localStorage
                localStorage.setItem(
                  "duplicateGV",
                  JSON.stringify(data.duplicateGV)
                );
                // Lấy danh sách tất cả giảng viên và lưu và localStorage
                localStorage.setItem("allGV", JSON.stringify(data.allGV));
                // Lấy bảng dữ liệu và lưu vào localstorage
                localStorage.setItem("tableData", JSON.stringify(data.content));
                // Gọi hàm renderTable để hiển thị dữ liệu
                renderTable(data.content);
              } else {
                // Hiển thị thông báo nếu không có dữ liệu
                document.getElementById("dataTableContainer").innerHTML =
                  "<p>Không có dữ liệu để hiển thị.</p>";
              }
            })
            .catch((error) => {
              console.error(error);
            });
        });

      function renderTable(data) {
        const role = localStorage.getItem("userRole");
        const MaPhongBan = localStorage.getItem("MaPhongBan");
        const isKhoa = localStorage.getItem("isKhoa");
        const duplicateGV = localStorage.getItem("duplicateGV");
        const tableBody = document.getElementById("tableBody");
        tableBody.innerHTML = ""; // Xóa nội dung cũ

        // id truyền vào để đánh dấu mỗi dòng, mục đích lấy phần tử và so sánh với bảng trong localStorage
        data.forEach((row, id) => {
          const tableRow = document.createElement("tr");

          // TT
          const ttTd = document.createElement("td");
          ttTd.textContent = `${row.TT}` || "";
          tableRow.appendChild(ttTd);

          // Sinh Viên
          const sinhVienTd = document.createElement("td");
          sinhVienTd.textContent = row.SinhVien || "";
          tableRow.appendChild(sinhVienTd);

          // Mã SV
          const maSVTd = document.createElement("td");
          maSVTd.textContent = row.MaSV || "";
          tableRow.appendChild(maSVTd);

          // Tên đề tài
          const tenDeTaiTd = document.createElement("td");
          tenDeTaiTd.textContent = row.TenDeTai || "";
          tableRow.appendChild(tenDeTaiTd);

          // Giảng viên hướng dẫn
          const giangVienTd = document.createElement("td");

          // Thay thế xuống dòng (\n) bằng thẻ <br> và gán vào innerHTML
          giangVienTd.innerHTML = (row.GiangVienDefault || "").replace(
            /\n/g,
            "<br>"
          );

          tableRow.appendChild(giangVienTd);

          // // Đơn vị công tác
          // const donViCongTacTd = document.createElement("td");
          // const donViCongTacInput = document.createElement("input");
          // donViCongTacInput.type = "text";
          // donViCongTacInput.value = row.DonViCongTac || "";
          // // Gán id cho input
          // donViCongTacInput.id = `donvicongtac-${id}`;
          // donViCongTacTd.appendChild(donViCongTacInput);
          // tableRow.appendChild(donViCongTacTd);
          // donViCongTacInput.disabled = true;


          // Giảng viên hướng dẫn 1
          const giaoVienHuongDan1Td = document.createElement("td");
          const giaoVienHuongDan1Input = document.createElement("input");
          giaoVienHuongDan1Input.type = "text";
          giaoVienHuongDan1Input.placeholder = "";
          giaoVienHuongDan1Input.value = row.GiangVien1 || "";
          // Gán id cho input
          giaoVienHuongDan1Input.id = `GiangVien1-${id}`;

          giaoVienHuongDan1Td.appendChild(giaoVienHuongDan1Input);
          tableRow.appendChild(giaoVienHuongDan1Td);

          giaoVienHuongDan1Input.disabled = true;
          giaoVienHuongDan1Input.onclick = () => {
            showSuggestions(giaoVienHuongDan1Input, row.GiangVien1Real, 1, id);
          };

          giaoVienHuongDan1Td.oninput = () => {
            showSuggestions(giaoVienHuongDan1Input, row.GiangVien1Real, 1, id);
          };

          giaoVienHuongDan1Td.appendChild(giaoVienHuongDan1Input);
          tableRow.appendChild(giaoVienHuongDan1Td);

          // Giảng viên hướng dẫn 2
          const giaoVienHuongDan2Td = document.createElement("td");
          const giaoVienHuongDan2Input = document.createElement("input");
          giaoVienHuongDan2Input.type = "text";
          giaoVienHuongDan2Input.placeholder = "";
          giaoVienHuongDan2Input.value = row.GiangVien2 || "";
          // Gán id cho input
          giaoVienHuongDan2Input.id = `GiangVien2-${id}`;

          giaoVienHuongDan2Td.appendChild(giaoVienHuongDan2Input);
          tableRow.appendChild(giaoVienHuongDan2Td);
          giaoVienHuongDan2Input.disabled = true;
          giaoVienHuongDan2Input.onclick = () => {
            showSuggestions(giaoVienHuongDan2Input, row.GiangVien2Real, 2, id);
          };

          giaoVienHuongDan2Td.oninput = () => {
            showSuggestions(giaoVienHuongDan2Input, row.GiangVien2Real, 2, id);
          };

          giaoVienHuongDan2Td.appendChild(giaoVienHuongDan2Input);
          tableRow.appendChild(giaoVienHuongDan2Td);

          // Tạo 2 cột lưu tên giảng viên để so sánh
          const GiangVien1Real = document.createElement("td");
          GiangVien1Real.textContent = row.GiangVien1Real || "";
          GiangVien1Real.id = `GiangVien1Real-${id}`;
          GiangVien1Real.style.display = "none"; // Ẩn input bằng CSS

          // Kiểm tra nếu GiangVien1Real nằm trong duplicateGV
          if (duplicateGV.includes(GiangVien1Real.textContent)) {
            giaoVienHuongDan1Td.style.backgroundColor = "#FFFACD"; // Vàng nhạt
            giaoVienHuongDan1Td.style.border = "1px solid #FFD700"; // Thêm viền vàng đậm
            giaoVienHuongDan1Td.style.borderRadius = "4px"; // Góc bo tròn cho đẹ
            giaoVienHuongDan1Input.placeholder = "TÊN GIẢNG VIÊN TRÙNG";
          }
          tableRow.appendChild(GiangVien1Real);

          const GiangVien2Real = document.createElement("td");
          GiangVien2Real.textContent = row.GiangVien2Real || "";
          GiangVien2Real.id = `GiangVien2Real-${id}`;
          GiangVien2Real.style.display = "none"; // Ẩn input bằng CSS

          // Kiểm tra nếu GiangVien2Real nằm trong duplicateGV
          if (
            duplicateGV.includes(GiangVien2Real.textContent) &&
            row.GiangVien2 != "không"
          ) {
            giaoVienHuongDan2Td.style.backgroundColor = "#FFFACD"; // Vàng nhạt
            giaoVienHuongDan2Td.style.border = "1px solid #FFD700"; // Thêm viền vàng đậm
            giaoVienHuongDan2Td.style.borderRadius = "4px"; // Góc bo tròn cho đẹ
            giaoVienHuongDan2Input.placeholder = "TÊN GIẢNG VIÊN TRÙNG";
          }

          tableRow.appendChild(GiangVien2Real);

          // Thêm hàng vào body của bảng
          tableBody.appendChild(tableRow);
        });
      }

      // Lấy dữ liệu để lưu
      function getDataToStored() {
        const rows = document.querySelectorAll("#tableBody tr"); // Lấy tất cả các hàng trong bảng
        const data = JSON.parse(localStorage.getItem("tableData"));

        rows.forEach((row, id) => {
          // Bỏ qua các hàng đang bị ẩn
          if (row.style.display === "none") {
            return;
          }

          console.log("id = ", id);
          // Lấy giá trị ngày bắt đầu, ngày kết thúc
          const NgayBatDau = document.getElementById(`startDate`);
          const NgayKetThuc = document.getElementById(`endDate`);

          data[id].NgayBatDau = NgayBatDau.value;
          data[id].NgayKetThuc = NgayKetThuc.value;

          // Lấy các giá trị từ các ô nhập Giảng viên
          const GiangVien1 = document.getElementById(`GiangVien1-${id}`);
          const GiangVien2 = document.getElementById(`GiangVien2-${id}`);

          console.log("data = ", data[id]);
          console.log("gv1 = ", GiangVien1.value);
          data[id].GiangVien1 = GiangVien1.value;
          data[id].GiangVien2 = GiangVien2.value;
        });

        return data;
      }
      // Hàm hiển thị gợi ý đã được cập nhật
      function showSuggestions(input, GiangVienDefault, position, id) {
        const value = input.value.toLowerCase(); // Lấy giá trị nhập vào và chuyển thành chữ thường
        hideSuggestions(); // Ẩn gợi ý cũ trước khi hiển thị gợi ý

        // Tạo thẻ div chứa gợi ý
        const suggestionsContainer = document.createElement("div");
        suggestionsContainer.className = "suggestions"; // Đặt class cho khung gợi ý

        // Đặt vị trí cho suggestionsContainer
        const { bottom, left, width } = input.getBoundingClientRect();
        suggestionsContainer.style.position = "absolute";
        suggestionsContainer.style.top = `${bottom + window.scrollY}px`;
        suggestionsContainer.style.left = `${left + window.scrollX}px`;
        suggestionsContainer.style.width = `${width}px`;
        suggestionsContainer.style.zIndex = "1000";
        suggestionsContainer.style.maxHeight = "200px";
        suggestionsContainer.style.overflowY = "auto";

        // Thêm suggestionsContainer vào DOM
        document.body.appendChild(suggestionsContainer);

        let suggestions = [];

        // Lấy dữ liệu từ localStorage
        const duplicateGV =
          JSON.parse(localStorage.getItem("duplicateGV")) || [];
        const allGV = JSON.parse(localStorage.getItem("allGV")) || [];

        // Kiểm tra giá trị moiGiang
        if (position == "1") {
          suggestions = duplicateGV
            .filter((item) => item.HoTenReal == GiangVienDefault) // Điều kiện lọc
            .map((item) => `${item.HoTen} - ${item.BienChe} - ${item.CCCD}`);
        } else if (position == "2") {
          suggestions = duplicateGV
            .filter((item) => item.HoTenReal == GiangVienDefault) // Điều kiện lọc
            .map((item) => `${item.HoTen} - ${item.BienChe} - ${item.CCCD}`);
        }

        let isAll = false;
        if (suggestions.length < 1) {
          isAll = true;
          suggestions = allGV.map(
            (item) => `${item.HoTen} - ${item.BienChe} - ${item.CCCD}`
          );
        }

        // Lọc gợi ý theo giá trị nhập vào
        if (value) {
          suggestions = suggestions.filter((name) =>
            name.toLowerCase().includes(value)
          );
        }

        // Nếu không có gợi ý, ẩn container
        if (suggestions.length === 0) {
          suggestionsContainer.remove();
          return;
        }

        // Tạo các suggestionItem cho mỗi gợi ý
        suggestions.forEach((name) => {
          const suggestionItem = document.createElement("div"); // Tạo mới phần tử cho gợi ý
          suggestionItem.className = "suggestion-item"; // Đặt class cho gợi ý
          suggestionItem.textContent = name; // Thiết lập nội dung cho gợi ý

          // Thêm sự kiện click
          suggestionItem.onclick = function () {
            const tableData = JSON.parse(localStorage.getItem("tableData"));
            // Tìm item dựa trên `TT` (hoặc bất kỳ thuộc tính nào bạn so sánh)
            const itemID = tableData.find((item) => item.TT == id);

            // Lấy tên giảng viên từ gợi ý đã chọn
            const selectedName = name.split(" - ")[0]; // Tách tên ra khỏi Biên chế và CCCD
            const selectedCCCD = name.split(" - ")[2];

            let arrayGV;

            if (isAll) {
              arrayGV = Array.isArray(allGV) ? allGV : Object.values(allGV);
            } else {
              arrayGV = Array.isArray(duplicateGV)
                ? duplicateGV
                : Object.values(duplicateGV);
            }

            const lecturerFound = arrayGV.find(
              (lecturer) => lecturer.CCCD.trim() == selectedCCCD.trim()
            );

            if (lecturerFound) {
              if (itemID !== -1) {
                // Kiểm tra nếu có id
                if (position == 1) {
                  const GiangVien1 = document.getElementById(
                    `GiangVien1-${itemID.TT}`
                  );
                  GiangVien1.value =
                    lecturerFound.HoTen +
                    " - " +
                    lecturerFound.BienChe +
                    " - " +
                    lecturerFound.CCCD;
                } else {
                  const GiangVien2 = document.getElementById(
                    `GiangVien2-${itemID.TT}`
                  );
                  GiangVien2.value =
                    lecturerFound.HoTen +
                    " - " +
                    lecturerFound.BienChe +
                    " - " +
                    lecturerFound.CCCD;
                }
              }
            }

            hideSuggestions(); // Ẩn gợi ý sau khi chọn
          };

          suggestionsContainer.appendChild(suggestionItem); // Thêm suggestionItem vào container
        });

        // Ẩn gợi ý khi input không còn focus
        input.onblur = function () {
          setTimeout(() => {
            hideSuggestions();
          }, 100);
        };
      }

      // Hàm ẩn gợi ý
      function hideSuggestions() {
        const existingSuggestions = document.querySelectorAll(".suggestions");
        existingSuggestions.forEach((suggestion) => suggestion.remove());
      }
    </script>

    <!-- Phần xử lý khi thêm dữ liệu vào bảng doantotnghiep -->
    <script>
      // Hàm kiểm tra dữ liệu tồn tại trên server
      function checkDataExistence(khoaValue, dotValue, namValue, dataTam) {
        const body = {
          Khoa: khoaValue,
          Dot: dotValue,
          Nam: namValue,
        };
        fetch("/checkExistDataFile", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(body),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Kiểm tra dữ liệu thất bại");
            }
            return response.json();
          })
          .then((data) => {
            if (data.exists) {
              showModal(khoaValue, dotValue, namValue);
            } else {
              saveDataDoAnDuKien(khoaValue, dotValue, namValue);
            }
          })
          .catch((error) => {
            alert("Kiểm tra dữ liệu file quy chuẩn thất bại!");
            console.error("Error:", error);
          });
      }

      // Hàm hiển thị modal và xử lý sự kiện "Xóa" và "Chèn"
      function showModal(khoaValue, dotValue, namValue) {
        const modal = document.getElementById("action-modal");
        const message = `Đã tồn tại dữ liệu của Khoa ${khoaValue}, Đợt ${dotValue}, Năm ${namValue}. Thực hiện XÓA file cũ hay CHÈN thêm file mới?
        Lưu ý : XÓA sẽ loại bỏ file cũ và chèn thêm, CHÈN sẽ không loại bỏ file cũ và chèn thêm`;
        document.getElementById("modal-message").innerText = message;
        modal.style.display = "block";

        // Xử lý sự kiện "Xóa"
        const deleteButton = document.getElementById("btn-delete");
        deleteButton.onclick = function handleDeleteClick() {
          modal.style.display = "none";
          deleteFile(khoaValue, dotValue, namValue);
          saveDataDoAnDuKien(khoaValue, dotValue, namValue);
          //appendData(khoaValue, dotValue, namValue, dataTam);
          // alert("Xóa thành công!");
          //location.reload();
        };

        // Xử lý sự kiện "Chèn"
        const appendButton = document.getElementById("btn-append");
        appendButton.onclick = function handleAppendClick() {
          modal.style.display = "none";
          //appendData(khoaValue, dotValue, namValue, dataTam);
          saveDataDoAnDuKien(khoaValue, dotValue, namValue);
          //location.reload();
        };

        // Xử lý sự kiện "Hủy"
        document.getElementById("btn-cancel").onclick = function () {
          modal.style.display = "none";
        };
      }

      // Hàm gửi yêu cầu xóa dữ liệu
      function deleteFile(khoaValue, dotValue, namValue) {
        const body = {
          Khoa: khoaValue,
          Dot: dotValue,
          Nam: namValue,
        };

        fetch("/deleteDataDoAnExist", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(body),
        })
          .then((response) => {
            if (!response.ok) {
              throw new Error("Xóa dữ liệu thất bại");
            }
          })
          .catch((error) => {
            alert("Xóa dữ liệu thất bại!");
            console.error("Error:", error);
          });
      }

      // Hàm chèn thêm dữ liệu
      function saveDataDoAnDuKien(khoaValue, dotValue, namValue) {
        const namHoc = namValue;
        const MaPhongBan = khoaValue;
        const Dot = dotValue;

        let data = getDataToStored();

        // Gửi dữ liệu qua API
        fetch(
          `/postSaveDataDoAn?namHoc=${encodeURIComponent(
            namHoc
          )}&MaPhongBan=${encodeURIComponent(
            MaPhongBan
          )}&Dot=${encodeURIComponent(Dot)}`,
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(data),
          }
        )
          .then((response) => {
            if (!response.ok) {
              return response.json().then((errorData) => {
                throw new Error(JSON.stringify(errorData)); // Gửi toàn bộ dữ liệu lỗi qua Error
              });
            }
            return response.json();
          })
          .then((responseData) => {
            // Hiển thị thông báo thành công
            Swal.fire({
              title: "Thông báo",
              html: responseData.message,
              icon: "success", // Biểu tượng thành công
              confirmButtonText: "OK",
              width: "auto",
              padding: "20px",
            }).then(() => {
              location.reload(); // Tải lại trang sau khi người dùng nhấn OK
            });
          })
          .catch((error) => {
            let errorMessage = "Đã xảy ra lỗi.";
            let errorDetails = "";

            try {
              const errorData = JSON.parse(error.message);
              errorMessage = errorData.message || errorMessage;
              if (errorData.errors && Array.isArray(errorData.errors)) {
                errorDetails = errorData.errors
                  .map((err, index) => `${index + 1}. ${err}`)
                  .join("<br>");
              }
            } catch {
              errorDetails = error.message.replace(/\n/g, "<br>");
            }

            Swal.fire({
              title: "Thông báo lỗi",
              html: `${errorMessage}<br>${errorDetails}`,
              icon: "error", // Biểu tượng lỗi
              confirmButtonText: "OK",
              width: "auto",
              padding: "20px",
            });
          });
      }

      // Gắn sự kiện cho nút "import"
      document.getElementById("import").addEventListener("click", function () {
        const khoaValue = document.getElementById("MaPhongBan").value;
        const dotValue = document.getElementById("combobox-dot").value;
        const namValue = document.getElementById("NamHoc").value;

        if (khoaValue !== "ALL") {
          checkDataExistence(khoaValue, dotValue, namValue);
        }
      });
    </script>

    <!-- link  -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Thêm sự kiện click cho phần tử có id="ThongTinGD"
        const ThongTinGD = document.getElementById("ThongTinGD");

        ThongTinGD.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa"); // Lấy role từ localStorage

          if (isKhoa == 0) {
            // Nếu là đào tạo hoặc tài chính
            window.location.href = "/info2";
          } else {
            window.location.href = "/info";
          }
        });

        // Thêm sự kiện click cho phần tử có id="Home"

        const Home = document.getElementById("Home");

        Home.addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết

          const isKhoa = localStorage.getItem("isKhoa");

          if (isKhoa == 0) {
            // Nếu là đào tạo hoặc tài chính
            window.location.href = "/maindt";
          } else {
            window.location.href = "/mainkhoa";
          }
        });
      });
    </script>

    <script>
      document
        .getElementById("changePasswordLink")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const tenDangNhap = localStorage.getItem("TenDangNhap"); // Lấy TenDangNhap từ localStorage

          if (tenDangNhap) {
            // Chuyển hướng đến trang changePassword và truyền TenDangNhap trong URL
            window.location.href = `/changePassword?tenDangNhap=${encodeURIComponent(
              tenDangNhap
            )}`;
          } else {
            alert("Không tìm thấy TenDangNhap trong localStorage.");
          }
        });
    </script>
    <script>
      $(document).ready(function () {
        $('#NamHoc option[value=""]').remove();
        $('#comboboxki option[value=""]').remove();
        $('#combobox-dot option[value=""]').remove();

        $.ajax({
          url: "/getNamHoc",
          method: "GET",
          success: function (response) {
            if (response.success) {
              response.NamHoc.forEach(function (item) {
                console.log(item.NamHoc);
                $("#NamHoc").append(
                  `<option value="${item.NamHoc}">${item.NamHoc}</option>`
                );
              });

              response.Ki.forEach(function (item) {
                console.log(item.Ki);
                $("#comboboxki").append(
                  `<option value="${item.value}">${item.Ki}</option>`
                );
              });
              response.Dot.forEach(function (item) {
                console.log(item.Dot);
                $("#combobox-dot").append(
                  `<option value="${item.value}">${item.Dot}</option>`
                );
              });
            } else {
              console.error(
                "Không lấy được dữ liệu năm học:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu năm học:", error);
          },
        });
      });
    </script>
    <script>
      $(document).ready(function () {
        $('#MaPhongBan option[value=""]').remove();
        // Gọi AJAX để lấy dữ liệu JSON từ API
        $.ajax({
          url: "/getPhongBan", // Đường dẫn tới API getPhongBan
          method: "GET",
          success: function (response) {
            // Kiểm tra nếu response thành công
            const MaPhongBan = response.MaPhongBan;
            if (response.success) {
              // $('#MaPhongBan').prepend('<option value="ALL">Tất cả khoa</option>');
              // Lặp qua từng mục trong mảng MaPhongBan
              response.MaPhongBan.forEach(function (item) {
                // Nếu item.MaPhongBan bằng boMon.MaPhongBan, hiển thị trước
                console.log(item);
                $("#MaPhongBan").append(
                  `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                );
              });

              // Nếu không có phòng ban nào tương ứng, bạn có thể thêm tùy chọn mặc định ở đây
              if (!$("#MaPhongBan option:selected").length) {
                $("#MaPhongBan").prepend(
                  '<option value="">Chọn Phòng Ban</option>'
                );
              }
            } else {
              console.error(
                "Không lấy được dữ liệu phongBan:",
                response.message
              );
            }
          },
          error: function (error) {
            console.error("Lỗi khi lấy dữ liệu phongBan:", error);
          },
        });
      });
    </script>
    <script>
      document
        .getElementById("infome")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const id_User = localStorage.getItem("id_User"); // Lấy id_User từ localStorage\
          if (id_User) {
            // Chuyển hướng đến trang infome và truyền id_User trong URL
            window.location.href = `/infome/${id_User}`;
          } else {
            alert("Không tìm thấy id_User trong localStorage.");
          }
        });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const role = localStorage.getItem("userRole");

        // Ẩn button ngay khi trang được tải
        const actionButton = document.getElementById("changeMessage");
        //Ẩn site thêm thông báo
        if (role === "Duyệt") {
          actionButton.style.display = "";
        } else {
          actionButton.style.display = "none";
        }
      });
    </script>
    <script>
      document
        .getElementById("changeMessage")
        .addEventListener("click", function (event) {
          event.preventDefault(); // Ngăn chặn hành vi mặc định của thẻ a
          const MaPhongBan = localStorage.getItem("MaPhongBan"); // Lấy MaPhongBan từ localStorage

          if (MaPhongBan) {
            // Chuyển hướng đến trang changeMessage và truyền MaPhongBan trong URL
            window.location.href = `/changeMessage/${MaPhongBan}`;
          } else {
            alert("Không tìm thấy MaPhongBan trong localStorage.");
          }
        });
    </script>
</body>

</html>