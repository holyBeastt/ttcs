<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Học Viện Kỹ Thuật Mật Mã</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css"
    />
    <link rel="stylesheet" href="/css/styles.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css"
    />
    <style>
      /* Định dạng cho bảng */
      .table {
        width: 70%;
        border-collapse: separate;
        border-spacing: 0;
        margin-top: 20px;
        font-size: 0.9em;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.15);
        border-radius: 8px;
        overflow: hidden;
        justify-self: center;
      }

      .table th,
      .table td {
        padding: 10px;
        text-align: left;
        border: 1px solid #dee2e6;
        border-right: 2px solid #dee2e6;
        border-left: 2px solid #dee2e6;
      }

      .table th {
        background-color: blue;
        color: white;
        font-weight: bold;
        border-right: 2px solid #fff;
      }

      .table th:last-child {
        border-right: 2px solid #dee2e6;
      }

      .table tbody tr {
        border-bottom: 1px solid #dddddd;
        transition: all 0.3s ease;
      }

      .table tbody tr:nth-child(even) {
        background-color: #f3f3f3;
      }

      .table tbody tr:last-of-type {
        border-bottom: 2px solid #009879;
      }

      .table tbody tr:hover {
        background-color: #f5f5f5;
        transform: scale(1.01);
      }

      /* Định dạng cho biểu đồ */
      .chart {
        width: 80%;
        margin-left: 10%;
      }

      /* Định dạng cho tiêu đề */
      h3 {
        color: #009879;
        text-align: center;
        margin: 30px 0;
        font-weight: 600;
        position: relative;
        padding-bottom: 10px;
      }

      h3:after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 50%;
        transform: translateX(-50%);
        width: 100px;
        height: 3px;
        background: #009879;
      }

      /* Định dạng cho tổng số tiết */
      .total-label {
        background: #f8f9fa;
        padding: 15px 20px;
        border-radius: 8px;
        margin: 20px auto;
        width: fit-content;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        font-weight: bold;
        color: #009879;
      }

      .value {
        color: #dc3545;
        font-size: 1.1em;
        margin-left: 5px;
      }

      /* Container cho các controls */
      .controls-container {
        display: flex;
        justify-content: start;
        align-items: center;
        gap: 10px;
        margin: 20px;
        flex-wrap: wrap;
      }

      .selectop {
        margin-top: 5px;
      }

      /* Responsive design */
      @media (max-width: 768px) {
        #thongkethonghopCanvas {
          width: 70%;
          height: 300px;
        }

        .table {
          font-size: 0.8em;
        }
      }

      /* Thêm container cho 2 biểu đồ tất cả khoa */
      .charts-container {
        display: flex;
        justify-content: flex-start;
        align-items: flex-start;
        gap: 20px;
        margin: 5px 0;
        flex-wrap: wrap; /* Đảm bảo tương thích với màn hình nhỏ */
      }

      .chart-wrapper {
        flex: 1; /* Chia đều chiều rộng */
        min-width: 300px; /* Đảm bảo kích thước tối thiểu */
        max-width: 33%; /* Đảm bảo không vượt quá 33% chiều rộng */
        background: white;
        border-radius: 12px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 15px;
      }

      .table th span {
        text-decoration: none;
        color: white;
        font-weight: bold;
      }
    </style>
  </head>

  <body>
    <!-- Phần header -->
    <%- include('header') %>
    <div class="d-flex justify-content-start align-items-center mb-3">
      <!-- Nút chuyển đổi -->
      <div
        class="btn-group me-3"
        role="group"
        aria-label="Toggle statistics"
        style="margin-top: 20px"
      >
        <button id="toggleKhoa" class="btn btn-primary active">
          <i class="bi bi-building"></i> Thống kê theo Khoa
        </button>
        <button id="toggleHeDaoTao" class="btn btn-outline-primary">
          <i class="bi bi-mortarboard"></i> Thống kê theo Hệ đào tạo
        </button>
      </div>
      <!-- Combo box kì -->
      <select class="form-select mx-1 selectop" id="comboboxki">
        <option value="ALL">Cả năm</option>
      </select>

      <!-- Combo box Năm -->
      <select
        class="form-select mx-1 selectop"
        style="width: 170px"
        id="NamHoc"
      >
        <option value="ALL">Tất cả năm</option>
      </select>

      <!-- Combo box Khoa -->
      <!-- Removed Combo box Khoa -->

      <!-- Combo box Hệ đào tạo (ẩn mặc định) -->
      <!-- Removed Combo box Hệ đào tạo -->
    </div>
    <!-- Phần nội dung -->

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <div class="chart">
      <h3>Thống kê tổng hợp</h3>
      <canvas id="chart"></canvas>
    </div>
    <div class="charts-container">
      <!-- Biểu đồ tròn 1: Số tiết mời giảng -->
      <div class="chart-wrapper">
        <h3>Phần trăm số tiết mời giảng</h3>
        <canvas id="moiGiangPieChart"></canvas>
      </div>

      <!-- Biểu đồ tròn 2: Số tiết vượt giờ -->
      <div class="chart-wrapper">
        <h3>Phần trăm số tiết vượt giờ</h3>
        <canvas id="vuotGioPieChart"></canvas>
      </div>

      <!-- Biểu đồ tròn 3: Tổng số tiết -->
      <div class="chart-wrapper">
        <h3>Tổng số tiết (Mời giảng + Vượt giờ)</h3>
        <canvas id="tongTietPieChart"></canvas>
      </div>
    </div>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      $(document).ready(function () {
        let currentType = "khoa"; // "khoa" hoặc "hedaotao"

        // Hàm lấy danh sách hệ đào tạo (No longer needed)
        /*
        function loadHeDaoTaoCombobox(selectedValue = "ALL", callback) {
          $("#HeDaoTao").empty();
          $.ajax({
            url: "/getHeDaoTaoTH",
            method: "GET",
            success: function (response) {
              if (response.success) {
                $("#HeDaoTao").append('<option value="ALL">Tất cả hệ</option>');
                response.HeDaoTao.forEach(function (item) {
                  $("#HeDaoTao").append(
                    `<option value="${item.HeDaoTao}">${item.HeDaoTao}</option>`
                  );
                });
                $("#HeDaoTao").val(selectedValue);
                if (typeof callback === "function") callback();
              }
            },
          });
        }
        */

        // Sửa lại sự kiện chuyển đổi
        document.getElementById("toggleKhoa").onclick = function () {
          currentType = "khoa";
          this.classList.add("active");
          document.getElementById("toggleHeDaoTao").classList.remove("active");
          // $("#Khoa").show(); // Removed
          // $("#HeDaoTao").hide(); // Removed
          fetchData1();
          fetchThongKeMGData();
          fetchData2();
        };

        document.getElementById("toggleHeDaoTao").onclick = function () {
          currentType = "hedaotao";
          this.classList.add("active");
          document.getElementById("toggleKhoa").classList.remove("active");
          // $("#Khoa").hide(); // Removed
          // $("#HeDaoTao").show(); // Removed
          // loadHeDaoTaoCombobox("ALL", function () { // Removed
          //   document.getElementById("HeDaoTao").value = "ALL"; // Removed
          fetchData1();
          fetchThongKeMGData();
          fetchData2();
          // }); // Removed
        };

        // Cập nhật hàm fetchData1
        async function fetchData1() {
          try {
            const ki = document.getElementById("comboboxki").value;
            const nam = document.getElementById("NamHoc").value;
            // const khoa = document.getElementById("Khoa").value; // Removed
            // const hedaotao = document.getElementById("HeDaoTao").value; // Removed

            let url = "/api/thongketonghop-data";
            const params = new URLSearchParams();

            if (ki && ki !== "ALL") params.append("kihoc", ki);
            if (nam && nam !== "ALL") params.append("namhoc", nam);
            // if (currentType === "khoa" && khoa) params.append("khoa", khoa); // Removed
            // if (currentType === "hedaotao" && hedaotao) // Removed
            //   params.append("hedaotao", hedaotao); // Removed
            params.append("type", currentType);

            if (params.toString()) {
              url += "?" + params.toString();
            }

            const response = await fetch(url);
            const data = await response.json();

            if (!data || data.length === 0) {
              console.log("Không có dữ liệu");
              document.getElementById("chart").style.display = "none";
              return;
            }

            if (window.myChart) {
              window.myChart.destroy();
            }

            const ctx = document.getElementById("chart").getContext("2d");
            window.myChart = new Chart(ctx, {
              type: "bar",
              data: {
                labels: data.map((item) => item.Khoa), // Keep item.Khoa for flexibility, as controller sends "Khoa" or "he_dao_tao" as Khoa
                datasets: [
                  {
                    label: "Tổng số tiết mời giảng",
                    data: data.map((item) => item.TongSoTietMoiGiang),
                    backgroundColor: "red",
                    borderColor: "rgba(75, 192, 192, 1)",
                    borderWidth: 1,
                  },
                  {
                    label: "Tổng số tiết tính vượt giờ",
                    data: data.map((item) => item.TongSoTiet),
                    backgroundColor: "blue",
                    borderColor: "rgba(255, 99, 132, 1)",
                    borderWidth: 1,
                  },
                ],
              },
              options: {
                responsive: true,
                plugins: {
                  legend: {
                    position: "top",
                  },
                  tooltip: {
                    callbacks: {
                      label: function (context) {
                        const rawValue = context.raw || 0;
                        const chart = context.chart;
                        const datasets = chart.data.datasets;
                        const index = context.dataIndex;
                        const totalAtIndex = datasets.reduce((sum, ds) => {
                          const v = Array.isArray(ds.data)
                            ? parseFloat(ds.data[index]) || 0
                            : 0;
                          return sum + v;
                        }, 0);
                        const percentage =
                          totalAtIndex > 0
                            ? ((rawValue / totalAtIndex) * 100).toFixed(1)
                            : 0;
                        const value = (parseFloat(rawValue) || 0).toFixed(2);
                        return `${context.dataset.label}: ${value} tiết (${percentage}%)`;
                      },
                    },
                  },
                  title: {
                    display: true,
                    text:
                      currentType === "hedaotao"
                        ? "Thống kê theo hệ đào tạo"
                        : "Thống kê theo khoa",
                  },
                },
                scales: {
                  x: {
                    stacked: true,
                    title: {
                      display: true,
                      text: currentType === "hedaotao" ? "Hệ đào tạo" : "Khoa",
                    },
                  },
                  y: {
                    stacked: true,
                    title: {
                      display: true,
                      text: "Số tiết",
                    },
                    beginAtZero: true,
                  },
                },
              },
            });
          } catch (error) {
            console.error("Lỗi khi tải dữ liệu:", error);
          }
        }

        // Cập nhật hàm fetchThongKeMGData
        async function fetchThongKeMGData() {
          try {
            const ki = document.getElementById("comboboxki").value;
            const nam = document.getElementById("NamHoc").value;
            // const khoa = document.getElementById("Khoa").value; // Removed
            // const hedaotao = document.getElementById("HeDaoTao").value; // Removed

            let url = "/api/thongketonghop-data";
            const params = new URLSearchParams();

            if (ki && ki !== "ALL") params.append("kihoc", ki);
            if (nam && nam !== "ALL") params.append("namhoc", nam);
            // if (currentType === "khoa" && khoa) params.append("khoa", khoa); // Removed
            // if (currentType === "hedaotao" && hedaotao) // Removed
            //   params.append("hedaotao", hedaotao); // Removed
            params.append("type", currentType);

            if (params.toString()) {
              url += "?" + params.toString();
            }

            const response = await fetch(url);
            const data = await response.json();

            const tableBody = document.querySelector("table tbody");
            tableBody.innerHTML = "";

            if (!data || data.length === 0) {
              const row = tableBody.insertRow();
              const cell = row.insertCell(0);
              cell.colSpan = 4;
              cell.style.textAlign = "center";
              cell.textContent = "Không có dữ liệu cho khoảng thời gian này";
              return;
            }

            // Update table header text
            document.querySelector(
              "#thongketonghopTable thead th:first-child"
            ).textContent = currentType === "hedaotao" ? "Hệ đào tạo" : "Khoa";

            data.forEach((item) => {
              const row = document.createElement("tr");
              const khoaSVT =
                currentType === "hedaotao" ? item.Khoa : item.Khoa; // item.Khoa will contain he_dao_tao when currentType is hedaotao

              // Tính tổng để tính phần trăm
              const totalMoiGiang = data.reduce(
                (sum, item) => sum + parseFloat(item.TongSoTietMoiGiang || 0),
                0
              );
              const totalVuotGio = data.reduce(
                (sum, item) => sum + parseFloat(item.TongSoTiet || 0),
                0
              );
              const totalTong = data.reduce(
                (sum, item) => sum + parseFloat(item.Tongso || 0),
                0
              );

              // Phần trăm "Tổng số" theo toàn bảng để hiển thị ở cột Khoa
              const percentageTong =
                totalTong > 0
                  ? ((parseFloat(item.Tongso || 0) / totalTong) * 100).toFixed(
                      1
                    )
                  : 0;

              // Tính phần trăm THEO HÀNG: MG/(MG+VG) và VG/(MG+VG)
              const mgValueRow = parseFloat(item.TongSoTietMoiGiang || 0);
              const vgValueRow = parseFloat(item.TongSoTiet || 0);
              const rowTotal = mgValueRow + vgValueRow;
              const percentageMoiGiang =
                rowTotal > 0 ? ((mgValueRow / rowTotal) * 100).toFixed(1) : 0;
              const percentageVuotGio =
                rowTotal > 0 ? ((vgValueRow / rowTotal) * 100).toFixed(1) : 0;

              const tongSoTietMoiGiangSV = parseFloat(
                item.TongSoTietMoiGiang || 0
              ).toFixed(2);
              const tongSoTietSV = parseFloat(item.TongSoTiet || 0).toFixed(2);
              const tongsoSV = parseFloat(item.Tongso || 0).toFixed(2);

              row.innerHTML = `
                        <td>${khoaSVT} (${percentageTong}%)</td>
                        <td>${tongSoTietMoiGiangSV} (${percentageMoiGiang}%)</td>
                        <td>${tongSoTietSV} (${percentageVuotGio}%)</td>
                        <td>${tongsoSV}</td>
                    `;
              tableBody.appendChild(row);
            });
          } catch (error) {
            console.error("Lỗi khi tải dữ liệu:", error);
          }
        }

        // Cập nhật hàm fetchData2
        async function fetchData2() {
          try {
            const ki = document.getElementById("comboboxki").value;
            const nam = document.getElementById("NamHoc").value;
            // const khoa = document.getElementById("Khoa").value; // Removed
            // const hedaotao = document.getElementById("HeDaoTao").value; // Removed

            let url = "/api/thongketonghop-data";
            const params = new URLSearchParams();

            if (ki && ki !== "ALL") params.append("kihoc", ki);
            if (nam && nam !== "ALL") params.append("namhoc", nam);
            // if (currentType === "khoa" && khoa) params.append("khoa", khoa); // Removed
            // if (currentType === "hedaotao" && hedaotao) // Removed
            //   params.append("hedaotao", hedaotao); // Removed
            params.append("type", currentType);

            if (params.toString()) {
              url += "?" + params.toString();
            }

            const response = await fetch(url);
            const data = await response.json();

            if (!data || data.length === 0) {
              document.getElementById("moiGiangPieChart").style.display =
                "none";
              document.getElementById("vuotGioPieChart").style.display = "none";
              document.getElementById("tongTietPieChart").style.display =
                "none";
              return;
            }

            const labels = data.map((item) => item.Khoa); // Keep item.Khoa for flexibility
            const moiGiangData = data.map((item) =>
              parseFloat(item.TongSoTietMoiGiang)
            );
            const vuotGioData = data.map((item) => parseFloat(item.TongSoTiet));
            const tongSoTietData = data.map((item) => parseFloat(item.Tongso));

            const colors = [
              "#FF6384",
              "#36A2EB",
              "#FFCE56",
              "#4BC0C0",
              "#9966FF",
              "#FF9F40",
              "#C9CBCF",
            ];

            if (window.moiGiangPieChart instanceof Chart) {
              window.moiGiangPieChart.destroy();
            }
            if (window.vuotGioPieChart instanceof Chart) {
              window.vuotGioPieChart.destroy();
            }
            if (window.tongTietPieChart instanceof Chart) {
              window.tongTietPieChart.destroy();
            }

            // Biểu đồ tròn: Số tiết mời giảng
            const moiGiangCtx = document
              .getElementById("moiGiangPieChart")
              .getContext("2d");
            const totalMoiGiang = moiGiangData.reduce(
              (sum, v) => sum + (parseFloat(v) || 0),
              0
            );
            window.moiGiangPieChart = new Chart(moiGiangCtx, {
              type: "pie",
              data: {
                labels: labels,
                datasets: [
                  {
                    label: "Số tiết mời giảng",
                    data: moiGiangData,
                    backgroundColor: colors,
                  },
                ],
              },
              options: {
                responsive: true,
                plugins: {
                  legend: {
                    position: "top",
                    labels: {
                      generateLabels: function (chart) {
                        const data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                          return data.labels.map((label, i) => {
                            const value = data.datasets[0].data[i];
                            const percentage =
                              totalMoiGiang > 0
                                ? (
                                    ((value || 0) / totalMoiGiang) *
                                    100
                                  ).toFixed(1)
                                : 0;
                            return {
                              text: `${label} (${percentage}%)`,
                              fillStyle: data.datasets[0].backgroundColor[i],
                              hidden: isNaN(value) || value === 0,
                              index: i,
                            };
                          });
                        }
                        return [];
                      },
                    },
                  },
                  tooltip: {
                    callbacks: {
                      label: function (context) {
                        const raw = context.raw;
                        const value = (parseFloat(raw) || 0).toFixed(2);
                        const percentage =
                          totalMoiGiang > 0
                            ? (((raw || 0) / totalMoiGiang) * 100).toFixed(1)
                            : 0;
                        return `${context.label}: ${value} tiết (${percentage}%)`;
                      },
                    },
                  },
                  title: {
                    display: true,
                    text:
                      currentType === "hedaotao"
                        ? "Phân bố số tiết mời giảng theo hệ đào tạo"
                        : "Phân bố số tiết mời giảng theo khoa",
                  },
                },
              },
            });

            // Biểu đồ tròn: Số tiết vượt giờ
            const vuotGioCtx = document
              .getElementById("vuotGioPieChart")
              .getContext("2d");
            const totalVuotGio = vuotGioData.reduce(
              (sum, v) => sum + (parseFloat(v) || 0),
              0
            );
            window.vuotGioPieChart = new Chart(vuotGioCtx, {
              type: "pie",
              data: {
                labels: labels,
                datasets: [
                  {
                    label: "Số tiết tính vượt giờ",
                    data: vuotGioData,
                    backgroundColor: colors,
                  },
                ],
              },
              options: {
                responsive: true,
                plugins: {
                  legend: {
                    position: "top",
                    labels: {
                      generateLabels: function (chart) {
                        const data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                          return data.labels.map((label, i) => {
                            const value = data.datasets[0].data[i];
                            const percentage =
                              totalVuotGio > 0
                                ? (((value || 0) / totalVuotGio) * 100).toFixed(
                                    1
                                  )
                                : 0;
                            return {
                              text: `${label} (${percentage}%)`,
                              fillStyle: data.datasets[0].backgroundColor[i],
                              hidden: isNaN(value) || value === 0,
                              index: i,
                            };
                          });
                        }
                        return [];
                      },
                    },
                  },
                  tooltip: {
                    callbacks: {
                      label: function (context) {
                        const raw = context.raw;
                        const value = (parseFloat(raw) || 0).toFixed(2);
                        const percentage =
                          totalVuotGio > 0
                            ? (((raw || 0) / totalVuotGio) * 100).toFixed(1)
                            : 0;
                        return `${context.label}: ${value} tiết (${percentage}%)`;
                      },
                    },
                  },
                  title: {
                    display: true,
                    text:
                      currentType === "hedaotao"
                        ? "Phân bố số tiết vượt giờ theo hệ đào tạo"
                        : "Phân bố số tiết vượt giờ theo khoa",
                  },
                },
              },
            });

            // Biểu đồ tròn: Tổng số tiết
            const tongTietCtx = document
              .getElementById("tongTietPieChart")
              .getContext("2d");
            const totalTong = tongSoTietData.reduce(
              (sum, v) => sum + (parseFloat(v) || 0),
              0
            );
            window.tongTietPieChart = new Chart(tongTietCtx, {
              type: "pie",
              data: {
                labels: labels,
                datasets: [
                  {
                    label: "Tổng số tiết",
                    data: tongSoTietData,
                    backgroundColor: colors,
                  },
                ],
              },
              options: {
                responsive: true,
                plugins: {
                  legend: {
                    position: "top",
                    labels: {
                      generateLabels: function (chart) {
                        const data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                          return data.labels.map((label, i) => {
                            const value = data.datasets[0].data[i];
                            const percentage =
                              totalTong > 0
                                ? (((value || 0) / totalTong) * 100).toFixed(1)
                                : 0;
                            return {
                              text: `${label} (${percentage}%)`,
                              fillStyle: data.datasets[0].backgroundColor[i],
                              hidden: isNaN(value) || value === 0,
                              index: i,
                            };
                          });
                        }
                        return [];
                      },
                    },
                  },
                  tooltip: {
                    callbacks: {
                      label: function (context) {
                        const raw = context.raw;
                        const value = (parseFloat(raw) || 0).toFixed(2);
                        const percentage =
                          totalTong > 0
                            ? (((raw || 0) / totalTong) * 100).toFixed(1)
                            : 0;
                        return `${context.label}: ${value} tiết (${percentage}%)`;
                      },
                    },
                  },
                  title: {
                    display: true,
                    text:
                      currentType === "hedaotao"
                        ? "Phân bố tổng số tiết theo hệ đào tạo"
                        : "Phân bố tổng số tiết theo khoa",
                  },
                },
              },
            });
          } catch (error) {
            console.error("Lỗi khi tải dữ liệu:", error);
          }
        }

        // Thêm event listeners
        document.getElementById("NamHoc").addEventListener("change", () => {
          fetchData1();
          fetchThongKeMGData();
          fetchData2();
        });

        document.getElementById("comboboxki").addEventListener("change", () => {
          fetchData1();
          fetchThongKeMGData();
          fetchData2();
        });

        // document.getElementById("Khoa").addEventListener("change", () => { // Removed
        //   fetchData1(); // Removed
        //   fetchThongKeMGData(); // Removed
        //   fetchData2(); // Removed
        // }); // Removed

        // document.getElementById("HeDaoTao").addEventListener("change", () => { // Removed
        //   fetchData1(); // Removed
        //   fetchThongKeMGData(); // Removed
        //   fetchData2(); // Removed
        // }); // Removed

        // Lấy danh sách năm học
        $.ajax({
          url: "/getNamHocTH",
          method: "GET",
          success: function (response) {
            if (response.success) {
              $("#NamHoc").empty();
              response.NamHoc.forEach(function (item) {
                $("#NamHoc").append(
                  `<option value="${item.NamHoc}">${
                    item.NamHoc === "ALL" ? "Tất cả năm" : item.NamHoc
                  }</option>`
                );
              });
              if (response.MaxNamHoc) {
                $("#NamHoc").val(response.MaxNamHoc).trigger("change");
              }

              // Populate comboboxki with data
              $("#comboboxki").empty();
              response.Ki.forEach(function (item) {
                $("#comboboxki").append(
                  `<option value="${item.Ki}">${
                    item.Ki === "ALL" ? "Cả năm" : item.Ki
                  }</option>`
                );
              });
            }
          },
        });

        // Lấy danh sách khoa (No longer needed)
        /*
        $.ajax({
          url: "/getPhongBanTH",
          method: "GET",
          success: function (response) {
            if (response.success) {
              $("#Khoa").empty();
              $("#Khoa").append('<option value="ALL">Tất cả khoa</option>');
              response.MaPhongBan.forEach(function (item) {
                if (item.MaPhongBan && item.MaPhongBan !== "ALL") {
                  $("#Khoa").append(
                    `<option value="${item.MaPhongBan}">${item.MaPhongBan}</option>`
                  );
                }
              });
            }
          },
        });
        */

        // Lấy danh sách hệ đào tạo (No longer needed)
        /*
        $.ajax({
          url: "/getHeDaoTaoTH",
          method: "GET",
          success: function (response) {
            if (response.success) {
              $("#HeDaoTao").empty();
              $("#HeDaoTao").append('<option value="ALL">Tất cả hệ</option>');
              response.HeDaoTao.forEach(function (item) {
                $("#HeDaoTao").append(
                  `<option value="${item.HeDaoTao}">${item.HeDaoTao}</option>`
                );
              });
            }
          },
        });
        */

        // Khởi tạo dữ liệu
        fetchData1();
        fetchThongKeMGData();
        fetchData2();
      });
    </script>

    <h3 style="margin-top: 30px; text-align: center">
      Chi tiết số tiết giảng dạy
    </h3>
    <table
      class="table table-bordered my-2"
      border="1"
      id="thongketonghopTable"
    >
      <thead>
        <tr>
          <th>Khoa</th>
          <th>Số tiết mời giảng</th>
          <th>Số tiết tính vượt giờ</th>
          <th>
            <span title="Mời giảng + Vượt giờ">Tổng số</span>
          </th>
        </tr>
      </thead>
      <tbody id="detailTable">
        <!-- Dữ liệu sẽ được thêm vào đây -->
      </tbody>
    </table>
  </body>
</html>
